(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{"./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */function(e,t){function s(e,t,s,n,r,o,i){try{var a=e[o](i),d=a.value}catch(e){return void s(e)}a.done?t(d):Promise.resolve(d).then(n,r)}e.exports=function(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){s(i,r,o,a,d,"next",e)}function d(e){s(i,r,o,a,d,"throw",e)}a(void 0)}))}},e.exports.__esModule=!0,e.exports.default=e.exports},"./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */function(e,t,s){var n=s(/*! ./toPropertyKey.js */"./node_modules/@babel/runtime/helpers/toPropertyKey.js");e.exports=function(e,t,s){return(t=n(t))in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e},e.exports.__esModule=!0,e.exports.default=e.exports},"./node_modules/@babel/runtime/helpers/toPrimitive.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPrimitive.js ***!
  \************************************************************/
/*! no static exports found */function(e,t,s){var n=s(/*! ./typeof.js */"./node_modules/@babel/runtime/helpers/typeof.js").default;e.exports=function(e,t){if("object"!==n(e)||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,t||"default");if("object"!==n(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)},e.exports.__esModule=!0,e.exports.default=e.exports},"./node_modules/@babel/runtime/helpers/toPropertyKey.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPropertyKey.js ***!
  \**************************************************************/
/*! no static exports found */function(e,t,s){var n=s(/*! ./typeof.js */"./node_modules/@babel/runtime/helpers/typeof.js").default,r=s(/*! ./toPrimitive.js */"./node_modules/@babel/runtime/helpers/toPrimitive.js");e.exports=function(e){var t=r(e,"string");return"symbol"===n(t)?t:String(t)},e.exports.__esModule=!0,e.exports.default=e.exports},"./node_modules/jspdf/node_modules/canvg/lib/index.es.js":
/*!***************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/canvg/lib/index.es.js ***!
  \***************************************************************/
/*! exports provided: AElement, AnimateColorElement, AnimateElement, AnimateTransformElement, BoundingBox, CB1, CB2, CB3, CB4, Canvg, CircleElement, ClipPathElement, DefsElement, DescElement, Document, Element, EllipseElement, FeColorMatrixElement, FeCompositeElement, FeDropShadowElement, FeGaussianBlurElement, FeMorphologyElement, FilterElement, Font, FontElement, FontFaceElement, GElement, GlyphElement, GradientElement, ImageElement, LineElement, LinearGradientElement, MarkerElement, MaskElement, Matrix, MissingGlyphElement, Mouse, PSEUDO_ZERO, Parser, PathElement, PathParser, PatternElement, Point, PolygonElement, PolylineElement, Property, QB1, QB2, QB3, RadialGradientElement, RectElement, RenderedElement, Rotate, SVGElement, SVGFontLoader, Scale, Screen, Skew, SkewX, SkewY, StopElement, StyleElement, SymbolElement, TRefElement, TSpanElement, TextElement, TextPathElement, TitleElement, Transform, Translate, UnknownElement, UseElement, ViewPort, compressSpaces, default, getSelectorSpecificity, normalizeAttributeName, normalizeColor, parseExternalUrl, presets, toNumbers, trimLeft, trimRight, vectorMagnitude, vectorsAngle, vectorsRatio */function(e,t,s){"use strict";s.r(t),function(e){s.d(t,"AElement",(function(){return Ue})),s.d(t,"AnimateColorElement",(function(){return Ie})),s.d(t,"AnimateElement",(function(){return Ve})),s.d(t,"AnimateTransformElement",(function(){return Le})),s.d(t,"BoundingBox",(function(){return fe})),s.d(t,"CB1",(function(){return V})),s.d(t,"CB2",(function(){return I})),s.d(t,"CB3",(function(){return L})),s.d(t,"CB4",(function(){return D})),s.d(t,"Canvg",(function(){return yt})),s.d(t,"CircleElement",(function(){return be})),s.d(t,"ClipPathElement",(function(){return ot})),s.d(t,"DefsElement",(function(){return Ce})),s.d(t,"DescElement",(function(){return ft})),s.d(t,"Document",(function(){return jt})),s.d(t,"Element",(function(){return ie})),s.d(t,"EllipseElement",(function(){return we})),s.d(t,"FeColorMatrixElement",(function(){return st})),s.d(t,"FeCompositeElement",(function(){return lt})),s.d(t,"FeDropShadowElement",(function(){return at})),s.d(t,"FeGaussianBlurElement",(function(){return ut})),s.d(t,"FeMorphologyElement",(function(){return dt})),s.d(t,"FilterElement",(function(){return it})),s.d(t,"Font",(function(){return ce})),s.d(t,"FontElement",(function(){return De})),s.d(t,"FontFaceElement",(function(){return Be})),s.d(t,"GElement",(function(){return Ee})),s.d(t,"GlyphElement",(function(){return je})),s.d(t,"GradientElement",(function(){return Me})),s.d(t,"ImageElement",(function(){return qe})),s.d(t,"LineElement",(function(){return Se})),s.d(t,"LinearGradientElement",(function(){return Ne})),s.d(t,"MarkerElement",(function(){return Pe})),s.d(t,"MaskElement",(function(){return nt})),s.d(t,"Matrix",(function(){return te})),s.d(t,"MissingGlyphElement",(function(){return Fe})),s.d(t,"Mouse",(function(){return Y})),s.d(t,"PSEUDO_ZERO",(function(){return M})),s.d(t,"Parser",(function(){return Z})),s.d(t,"PathElement",(function(){return pe})),s.d(t,"PathParser",(function(){return he})),s.d(t,"PatternElement",(function(){return Oe})),s.d(t,"Point",(function(){return X})),s.d(t,"PolygonElement",(function(){return Ae})),s.d(t,"PolylineElement",(function(){return Te})),s.d(t,"Property",(function(){return U})),s.d(t,"QB1",(function(){return B})),s.d(t,"QB2",(function(){return F})),s.d(t,"QB3",(function(){return z})),s.d(t,"RadialGradientElement",(function(){return ke})),s.d(t,"RectElement",(function(){return xe})),s.d(t,"RenderedElement",(function(){return me})),s.d(t,"Rotate",(function(){return J})),s.d(t,"SVGElement",(function(){return ve})),s.d(t,"SVGFontLoader",(function(){return Qe})),s.d(t,"Scale",(function(){return ee})),s.d(t,"Screen",(function(){return W})),s.d(t,"Skew",(function(){return se})),s.d(t,"SkewX",(function(){return ne})),s.d(t,"SkewY",(function(){return re})),s.d(t,"StopElement",(function(){return Re})),s.d(t,"StyleElement",(function(){return $e})),s.d(t,"SymbolElement",(function(){return We})),s.d(t,"TRefElement",(function(){return ze})),s.d(t,"TSpanElement",(function(){return _e})),s.d(t,"TextElement",(function(){return ge})),s.d(t,"TextPathElement",(function(){return Ye})),s.d(t,"TitleElement",(function(){return ct})),s.d(t,"Transform",(function(){return oe})),s.d(t,"Translate",(function(){return K})),s.d(t,"UnknownElement",(function(){return ae})),s.d(t,"UseElement",(function(){return Ze})),s.d(t,"ViewPort",(function(){return H})),s.d(t,"compressSpaces",(function(){return m})),s.d(t,"default",(function(){return yt})),s.d(t,"getSelectorSpecificity",(function(){return E})),s.d(t,"normalizeAttributeName",(function(){return y})),s.d(t,"normalizeColor",(function(){return x})),s.d(t,"parseExternalUrl",(function(){return v})),s.d(t,"presets",(function(){return h})),s.d(t,"toNumbers",(function(){return g})),s.d(t,"trimLeft",(function(){return p})),s.d(t,"trimRight",(function(){return j})),s.d(t,"vectorMagnitude",(function(){return N})),s.d(t,"vectorsAngle",(function(){return R})),s.d(t,"vectorsRatio",(function(){return k}));s(/*! core-js/modules/es.promise.js */"./node_modules/jspdf/node_modules/core-js/modules/es.promise.js");var n=s(/*! @babel/runtime/helpers/asyncToGenerator */"./node_modules/@babel/runtime/helpers/asyncToGenerator.js"),r=s.n(n),o=(s(/*! core-js/modules/es.string.match.js */"./node_modules/jspdf/node_modules/core-js/modules/es.string.match.js"),s(/*! core-js/modules/es.string.replace.js */"./node_modules/jspdf/node_modules/core-js/modules/es.string.replace.js"),s(/*! core-js/modules/es.string.starts-with.js */"./node_modules/jspdf/node_modules/core-js/modules/es.string.starts-with.js"),s(/*! core-js/modules/es.array.iterator.js */"./node_modules/jspdf/node_modules/core-js/modules/es.array.iterator.js"),s(/*! core-js/modules/web.dom-collections.iterator.js */"./node_modules/jspdf/node_modules/core-js/modules/web.dom-collections.iterator.js"),s(/*! @babel/runtime/helpers/defineProperty */"./node_modules/@babel/runtime/helpers/defineProperty.js")),i=s.n(o),a=(s(/*! core-js/modules/es.array.reduce.js */"./node_modules/jspdf/node_modules/core-js/modules/es.array.reduce.js"),s(/*! core-js/modules/es.string.ends-with.js */"./node_modules/jspdf/node_modules/core-js/modules/es.string.ends-with.js"),s(/*! core-js/modules/es.string.split.js */"./node_modules/jspdf/node_modules/core-js/modules/es.string.split.js"),s(/*! raf */"./node_modules/raf/index.js")),d=s.n(a),l=(s(/*! core-js/modules/es.string.trim.js */"./node_modules/jspdf/node_modules/core-js/modules/es.string.trim.js"),s(/*! rgbcolor */"./node_modules/rgbcolor/index.js")),u=s.n(l),c=(s(/*! core-js/modules/es.array.index-of.js */"./node_modules/jspdf/node_modules/core-js/modules/es.array.index-of.js"),s(/*! core-js/modules/es.string.includes.js */"./node_modules/jspdf/node_modules/core-js/modules/es.string.includes.js"),s(/*! core-js/modules/es.array.reverse.js */"./node_modules/jspdf/node_modules/core-js/modules/es.array.reverse.js"),s(/*! svg-pathdata */"./node_modules/svg-pathdata/lib/SVGPathData.module.js")),f=(s(/*! core-js/modules/es.regexp.to-string.js */"./node_modules/jspdf/node_modules/core-js/modules/es.regexp.to-string.js"),s(/*! stackblur-canvas */"./node_modules/stackblur-canvas/dist/stackblur-es.js"));var h=Object.freeze({__proto__:null,offscreen:function(){var{DOMParser:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:e,createCanvas:(e,t)=>new OffscreenCanvas(e,t),createImage:e=>r()((function*(){var t=yield fetch(e),s=yield t.blob();return yield createImageBitmap(s)}))()};return"undefined"==typeof DOMParser&&void 0!==e||Reflect.deleteProperty(t,"DOMParser"),t},node:function(e){var{DOMParser:t,canvas:s,fetch:n}=e;return{window:null,ignoreAnimation:!0,ignoreMouse:!0,DOMParser:t,fetch:n,createCanvas:s.createCanvas,createImage:s.loadImage}}});function m(e){return e.replace(/(?!\u3000)\s+/gm," ")}function p(e){return e.replace(/^[\n \t]+/,"")}function j(e){return e.replace(/[\n \t]+$/,"")}function g(e){return((e||"").match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm)||[]).map(parseFloat)}var _=/^[A-Z-]+$/;function y(e){return _.test(e)?e.toLowerCase():e}function v(e){var t=/url\(('([^']+)'|"([^"]+)"|([^'")]+))\)/.exec(e)||[];return t[2]||t[3]||t[4]}function x(e){if(!e.startsWith("rgb"))return e;var t=3;return e.replace(/\d+(\.\d+)?/g,(e,s)=>t--&&s?String(Math.round(parseFloat(e))):e)}var b=/(\[[^\]]+\])/g,w=/(#[^\s+>~.[:]+)/g,S=/(\.[^\s+>~.[:]+)/g,T=/(::[^\s+>~.[:]+|:first-line|:first-letter|:before|:after)/gi,A=/(:[\w-]+\([^)]*\))/gi,O=/(:[^\s+>~.[:]+)/g,P=/([^\s+>~.[:]+)/g;function C(e,t){var s=t.exec(e);return s?[e.replace(t," "),s.length]:[e,0]}function E(e){var t=[0,0,0],s=e.replace(/:not\(([^)]*)\)/g,"     $1 ").replace(/{[\s\S]*/gm," "),n=0;return[s,n]=C(s,b),t[1]+=n,[s,n]=C(s,w),t[0]+=n,[s,n]=C(s,S),t[1]+=n,[s,n]=C(s,T),t[2]+=n,[s,n]=C(s,A),t[1]+=n,[s,n]=C(s,O),t[1]+=n,s=s.replace(/[*\s+>~]/g," ").replace(/[#.]/g," "),[s,n]=C(s,P),t[2]+=n,t.join("")}var M=1e-8;function N(e){return Math.sqrt(Math.pow(e[0],2)+Math.pow(e[1],2))}function k(e,t){return(e[0]*t[0]+e[1]*t[1])/(N(e)*N(t))}function R(e,t){return(e[0]*t[1]<e[1]*t[0]?-1:1)*Math.acos(k(e,t))}function V(e){return e*e*e}function I(e){return 3*e*e*(1-e)}function L(e){return 3*e*(1-e)*(1-e)}function D(e){return(1-e)*(1-e)*(1-e)}function B(e){return e*e}function F(e){return 2*e*(1-e)}function z(e){return(1-e)*(1-e)}class U{constructor(e,t,s){this.document=e,this.name=t,this.value=s,this.isNormalizedColor=!1}static empty(e){return new U(e,"EMPTY","")}split(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:" ",{document:t,name:s}=this;return m(this.getString()).trim().split(e).map(e=>new U(t,s,e))}hasValue(e){var{value:t}=this;return null!==t&&""!==t&&(e||0!==t)&&void 0!==t}isString(e){var{value:t}=this,s="string"==typeof t;return s&&e?e.test(t):s}isUrlDefinition(){return this.isString(/^url\(/)}isPixels(){if(!this.hasValue())return!1;var e=this.getString();switch(!0){case e.endsWith("px"):case/^[0-9]+$/.test(e):return!0;default:return!1}}setValue(e){return this.value=e,this}getValue(e){return void 0===e||this.hasValue()?this.value:e}getNumber(e){if(!this.hasValue())return void 0===e?0:parseFloat(e);var{value:t}=this,s=parseFloat(t);return this.isString(/%$/)&&(s/=100),s}getString(e){return void 0===e||this.hasValue()?void 0===this.value?"":String(this.value):String(e)}getColor(e){var t=this.getString(e);return this.isNormalizedColor||(this.isNormalizedColor=!0,t=x(t),this.value=t),t}getDpi(){return 96}getRem(){return this.document.rootEmSize}getEm(){return this.document.emSize}getUnits(){return this.getString().replace(/[0-9.-]/g,"")}getPixels(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!this.hasValue())return 0;var[s,n]="boolean"==typeof e?[void 0,e]:[e],{viewPort:r}=this.document.screen;switch(!0){case this.isString(/vmin$/):return this.getNumber()/100*Math.min(r.computeSize("x"),r.computeSize("y"));case this.isString(/vmax$/):return this.getNumber()/100*Math.max(r.computeSize("x"),r.computeSize("y"));case this.isString(/vw$/):return this.getNumber()/100*r.computeSize("x");case this.isString(/vh$/):return this.getNumber()/100*r.computeSize("y");case this.isString(/rem$/):return this.getNumber()*this.getRem();case this.isString(/em$/):return this.getNumber()*this.getEm();case this.isString(/ex$/):return this.getNumber()*this.getEm()/2;case this.isString(/px$/):return this.getNumber();case this.isString(/pt$/):return this.getNumber()*this.getDpi()*(1/72);case this.isString(/pc$/):return 15*this.getNumber();case this.isString(/cm$/):return this.getNumber()*this.getDpi()/2.54;case this.isString(/mm$/):return this.getNumber()*this.getDpi()/25.4;case this.isString(/in$/):return this.getNumber()*this.getDpi();case this.isString(/%$/)&&n:return this.getNumber()*this.getEm();case this.isString(/%$/):return this.getNumber()*r.computeSize(s);default:var o=this.getNumber();return t&&o<1?o*r.computeSize(s):o}}getMilliseconds(){return this.hasValue()?this.isString(/ms$/)?this.getNumber():1e3*this.getNumber():0}getRadians(){if(!this.hasValue())return 0;switch(!0){case this.isString(/deg$/):return this.getNumber()*(Math.PI/180);case this.isString(/grad$/):return this.getNumber()*(Math.PI/200);case this.isString(/rad$/):return this.getNumber();default:return this.getNumber()*(Math.PI/180)}}getDefinition(){var e=this.getString(),t=/#([^)'"]+)/.exec(e);return t&&(t=t[1]),t||(t=e),this.document.definitions[t]}getFillStyleDefinition(e,t){var s=this.getDefinition();if(!s)return null;if("function"==typeof s.createGradient)return s.createGradient(this.document.ctx,e,t);if("function"==typeof s.createPattern){if(s.getHrefAttribute().hasValue()){var n=s.getAttribute("patternTransform");s=s.getHrefAttribute().getDefinition(),n.hasValue()&&s.getAttribute("patternTransform",!0).setValue(n.value)}return s.createPattern(this.document.ctx,e,t)}return null}getTextBaseline(){return this.hasValue()?U.textBaselineMapping[this.getString()]:null}addOpacity(e){for(var t=this.getColor(),s=t.length,n=0,r=0;r<s&&(","===t[r]&&n++,3!==n);r++);if(e.hasValue()&&this.isString()&&3!==n){var o=new u.a(t);o.ok&&(o.alpha=e.getNumber(),t=o.toRGBA())}return new U(this.document,this.name,t)}}U.textBaselineMapping={baseline:"alphabetic","before-edge":"top","text-before-edge":"top",middle:"middle",central:"middle","after-edge":"bottom","text-after-edge":"bottom",ideographic:"ideographic",alphabetic:"alphabetic",hanging:"hanging",mathematical:"alphabetic"};class H{constructor(){this.viewPorts=[]}clear(){this.viewPorts=[]}setCurrent(e,t){this.viewPorts.push({width:e,height:t})}removeCurrent(){this.viewPorts.pop()}getCurrent(){var{viewPorts:e}=this;return e[e.length-1]}get width(){return this.getCurrent().width}get height(){return this.getCurrent().height}computeSize(e){return"number"==typeof e?e:"x"===e?this.width:"y"===e?this.height:Math.sqrt(Math.pow(this.width,2)+Math.pow(this.height,2))/Math.sqrt(2)}}class X{constructor(e,t){this.x=e,this.y=t}static parse(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,[s=t,n=t]=g(e);return new X(s,n)}static parseScale(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,[s=t,n=s]=g(e);return new X(s,n)}static parsePath(e){for(var t=g(e),s=t.length,n=[],r=0;r<s;r+=2)n.push(new X(t[r],t[r+1]));return n}angleTo(e){return Math.atan2(e.y-this.y,e.x-this.x)}applyTransform(e){var{x:t,y:s}=this,n=t*e[0]+s*e[2]+e[4],r=t*e[1]+s*e[3]+e[5];this.x=n,this.y=r}}class Y{constructor(e){this.screen=e,this.working=!1,this.events=[],this.eventElements=[],this.onClick=this.onClick.bind(this),this.onMouseMove=this.onMouseMove.bind(this)}isWorking(){return this.working}start(){if(!this.working){var{screen:e,onClick:t,onMouseMove:s}=this,n=e.ctx.canvas;n.onclick=t,n.onmousemove=s,this.working=!0}}stop(){if(this.working){var e=this.screen.ctx.canvas;this.working=!1,e.onclick=null,e.onmousemove=null}}hasEvents(){return this.working&&this.events.length>0}runEvents(){if(this.working){var{screen:e,events:t,eventElements:s}=this,{style:n}=e.ctx.canvas;n&&(n.cursor=""),t.forEach((e,t)=>{for(var{run:n}=e,r=s[t];r;)n(r),r=r.parent}),this.events=[],this.eventElements=[]}}checkPath(e,t){if(this.working&&t){var{events:s,eventElements:n}=this;s.forEach((s,r)=>{var{x:o,y:i}=s;!n[r]&&t.isPointInPath&&t.isPointInPath(o,i)&&(n[r]=e)})}}checkBoundingBox(e,t){if(this.working&&t){var{events:s,eventElements:n}=this;s.forEach((s,r)=>{var{x:o,y:i}=s;!n[r]&&t.isPointInBox(o,i)&&(n[r]=e)})}}mapXY(e,t){for(var{window:s,ctx:n}=this.screen,r=new X(e,t),o=n.canvas;o;)r.x-=o.offsetLeft,r.y-=o.offsetTop,o=o.offsetParent;return s.scrollX&&(r.x+=s.scrollX),s.scrollY&&(r.y+=s.scrollY),r}onClick(e){var{x:t,y:s}=this.mapXY(e.clientX,e.clientY);this.events.push({type:"onclick",x:t,y:s,run(e){e.onClick&&e.onClick()}})}onMouseMove(e){var{x:t,y:s}=this.mapXY(e.clientX,e.clientY);this.events.push({type:"onmousemove",x:t,y:s,run(e){e.onMouseMove&&e.onMouseMove()}})}}var G="undefined"!=typeof window?window:null,q="undefined"!=typeof fetch?fetch.bind(void 0):null;class W{constructor(e){var{fetch:t=q,window:s=G}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.ctx=e,this.FRAMERATE=30,this.MAX_VIRTUAL_PIXELS=3e4,this.CLIENT_WIDTH=800,this.CLIENT_HEIGHT=600,this.viewPort=new H,this.mouse=new Y(this),this.animations=[],this.waits=[],this.frameDuration=0,this.isReadyLock=!1,this.isFirstRender=!0,this.intervalId=null,this.window=s,this.fetch=t}wait(e){this.waits.push(e)}ready(){return this.readyPromise?this.readyPromise:Promise.resolve()}isReady(){if(this.isReadyLock)return!0;var e=this.waits.every(e=>e());return e&&(this.waits=[],this.resolveReady&&this.resolveReady()),this.isReadyLock=e,e}setDefaults(e){e.strokeStyle="rgba(0,0,0,0)",e.lineCap="butt",e.lineJoin="miter",e.miterLimit=4}setViewBox(e){var{document:t,ctx:s,aspectRatio:n,width:r,desiredWidth:o,height:i,desiredHeight:a,minX:d=0,minY:l=0,refX:u,refY:c,clip:f=!1,clipX:h=0,clipY:p=0}=e,j=m(n).replace(/^defer\s/,""),[g,_]=j.split(" "),y=g||"xMidYMid",v=_||"meet",x=r/o,b=i/a,w=Math.min(x,b),S=Math.max(x,b),T=o,A=a;"meet"===v&&(T*=w,A*=w),"slice"===v&&(T*=S,A*=S);var O=new U(t,"refX",u),P=new U(t,"refY",c),C=O.hasValue()&&P.hasValue();if(C&&s.translate(-w*O.getPixels("x"),-w*P.getPixels("y")),f){var E=w*h,M=w*p;s.beginPath(),s.moveTo(E,M),s.lineTo(r,M),s.lineTo(r,i),s.lineTo(E,i),s.closePath(),s.clip()}if(!C){var N="meet"===v&&w===b,k="slice"===v&&S===b,R="meet"===v&&w===x,V="slice"===v&&S===x;y.startsWith("xMid")&&(N||k)&&s.translate(r/2-T/2,0),y.endsWith("YMid")&&(R||V)&&s.translate(0,i/2-A/2),y.startsWith("xMax")&&(N||k)&&s.translate(r-T,0),y.endsWith("YMax")&&(R||V)&&s.translate(0,i-A)}switch(!0){case"none"===y:s.scale(x,b);break;case"meet"===v:s.scale(w,w);break;case"slice"===v:s.scale(S,S)}s.translate(-d,-l)}start(e){var{enableRedraw:t=!1,ignoreMouse:s=!1,ignoreAnimation:n=!1,ignoreDimensions:r=!1,ignoreClear:o=!1,forceRedraw:i,scaleWidth:a,scaleHeight:l,offsetX:u,offsetY:c}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{FRAMERATE:f,mouse:h}=this,m=1e3/f;if(this.frameDuration=m,this.readyPromise=new Promise(e=>{this.resolveReady=e}),this.isReady()&&this.render(e,r,o,a,l,u,c),t){var p=Date.now(),j=p,g=0,_=()=>{p=Date.now(),(g=p-j)>=m&&(j=p-g%m,this.shouldUpdate(n,i)&&(this.render(e,r,o,a,l,u,c),h.runEvents())),this.intervalId=d()(_)};s||h.start(),this.intervalId=d()(_)}}stop(){this.intervalId&&(d.a.cancel(this.intervalId),this.intervalId=null),this.mouse.stop()}shouldUpdate(e,t){if(!e){var{frameDuration:s}=this;if(this.animations.reduce((e,t)=>t.update(s)||e,!1))return!0}return!("function"!=typeof t||!t())||(!(this.isReadyLock||!this.isReady())||!!this.mouse.hasEvents())}render(e,t,s,n,r,o,i){var{CLIENT_WIDTH:a,CLIENT_HEIGHT:d,viewPort:l,ctx:u,isFirstRender:c}=this,f=u.canvas;l.clear(),f.width&&f.height?l.setCurrent(f.width,f.height):l.setCurrent(a,d);var h=e.getStyle("width"),m=e.getStyle("height");!t&&(c||"number"!=typeof n&&"number"!=typeof r)&&(h.hasValue()&&(f.width=h.getPixels("x"),f.style&&(f.style.width="".concat(f.width,"px"))),m.hasValue()&&(f.height=m.getPixels("y"),f.style&&(f.style.height="".concat(f.height,"px"))));var p=f.clientWidth||f.width,j=f.clientHeight||f.height;if(t&&h.hasValue()&&m.hasValue()&&(p=h.getPixels("x"),j=m.getPixels("y")),l.setCurrent(p,j),"number"==typeof o&&e.getAttribute("x",!0).setValue(o),"number"==typeof i&&e.getAttribute("y",!0).setValue(i),"number"==typeof n||"number"==typeof r){var _=g(e.getAttribute("viewBox").getString()),y=0,v=0;if("number"==typeof n){var x=e.getStyle("width");x.hasValue()?y=x.getPixels("x")/n:isNaN(_[2])||(y=_[2]/n)}if("number"==typeof r){var b=e.getStyle("height");b.hasValue()?v=b.getPixels("y")/r:isNaN(_[3])||(v=_[3]/r)}y||(y=v),v||(v=y),e.getAttribute("width",!0).setValue(n),e.getAttribute("height",!0).setValue(r);var w=e.getStyle("transform",!0,!0);w.setValue("".concat(w.getString()," scale(").concat(1/y,", ").concat(1/v,")"))}s||u.clearRect(0,0,p,j),e.render(u),c&&(this.isFirstRender=!1)}}W.defaultWindow=G,W.defaultFetch=q;var{defaultFetch:Q}=W,$="undefined"!=typeof DOMParser?DOMParser:null;class Z{constructor(){var{fetch:e=Q,DOMParser:t=$}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this.fetch=e,this.DOMParser=t}parse(e){var t=this;return r()((function*(){return e.startsWith("<")?t.parseFromString(e):t.load(e)}))()}parseFromString(e){var t=new this.DOMParser;try{return this.checkDocument(t.parseFromString(e,"image/svg+xml"))}catch(s){return this.checkDocument(t.parseFromString(e,"text/xml"))}}checkDocument(e){var t=e.getElementsByTagName("parsererror")[0];if(t)throw new Error(t.textContent);return e}load(e){var t=this;return r()((function*(){var s=yield t.fetch(e),n=yield s.text();return t.parseFromString(n)}))()}}class K{constructor(e,t){this.type="translate",this.point=null,this.point=X.parse(t)}apply(e){var{x:t,y:s}=this.point;e.translate(t||0,s||0)}unapply(e){var{x:t,y:s}=this.point;e.translate(-1*t||0,-1*s||0)}applyToPoint(e){var{x:t,y:s}=this.point;e.applyTransform([1,0,0,1,t||0,s||0])}}class J{constructor(e,t,s){this.type="rotate",this.angle=null,this.originX=null,this.originY=null,this.cx=0,this.cy=0;var n=g(t);this.angle=new U(e,"angle",n[0]),this.originX=s[0],this.originY=s[1],this.cx=n[1]||0,this.cy=n[2]||0}apply(e){var{cx:t,cy:s,originX:n,originY:r,angle:o}=this,i=t+n.getPixels("x"),a=s+r.getPixels("y");e.translate(i,a),e.rotate(o.getRadians()),e.translate(-i,-a)}unapply(e){var{cx:t,cy:s,originX:n,originY:r,angle:o}=this,i=t+n.getPixels("x"),a=s+r.getPixels("y");e.translate(i,a),e.rotate(-1*o.getRadians()),e.translate(-i,-a)}applyToPoint(e){var{cx:t,cy:s,angle:n}=this,r=n.getRadians();e.applyTransform([1,0,0,1,t||0,s||0]),e.applyTransform([Math.cos(r),Math.sin(r),-Math.sin(r),Math.cos(r),0,0]),e.applyTransform([1,0,0,1,-t||0,-s||0])}}class ee{constructor(e,t,s){this.type="scale",this.scale=null,this.originX=null,this.originY=null;var n=X.parseScale(t);0!==n.x&&0!==n.y||(n.x=M,n.y=M),this.scale=n,this.originX=s[0],this.originY=s[1]}apply(e){var{scale:{x:t,y:s},originX:n,originY:r}=this,o=n.getPixels("x"),i=r.getPixels("y");e.translate(o,i),e.scale(t,s||t),e.translate(-o,-i)}unapply(e){var{scale:{x:t,y:s},originX:n,originY:r}=this,o=n.getPixels("x"),i=r.getPixels("y");e.translate(o,i),e.scale(1/t,1/s||t),e.translate(-o,-i)}applyToPoint(e){var{x:t,y:s}=this.scale;e.applyTransform([t||0,0,0,s||0,0,0])}}class te{constructor(e,t,s){this.type="matrix",this.matrix=[],this.originX=null,this.originY=null,this.matrix=g(t),this.originX=s[0],this.originY=s[1]}apply(e){var{originX:t,originY:s,matrix:n}=this,r=t.getPixels("x"),o=s.getPixels("y");e.translate(r,o),e.transform(n[0],n[1],n[2],n[3],n[4],n[5]),e.translate(-r,-o)}unapply(e){var{originX:t,originY:s,matrix:n}=this,r=n[0],o=n[2],i=n[4],a=n[1],d=n[3],l=n[5],u=1/(r*(1*d-0*l)-o*(1*a-0*l)+i*(0*a-0*d)),c=t.getPixels("x"),f=s.getPixels("y");e.translate(c,f),e.transform(u*(1*d-0*l),u*(0*l-1*a),u*(0*i-1*o),u*(1*r-0*i),u*(o*l-i*d),u*(i*a-r*l)),e.translate(-c,-f)}applyToPoint(e){e.applyTransform(this.matrix)}}class se extends te{constructor(e,t,s){super(e,t,s),this.type="skew",this.angle=null,this.angle=new U(e,"angle",t)}}class ne extends se{constructor(e,t,s){super(e,t,s),this.type="skewX",this.matrix=[1,0,Math.tan(this.angle.getRadians()),1,0,0]}}class re extends se{constructor(e,t,s){super(e,t,s),this.type="skewY",this.matrix=[1,Math.tan(this.angle.getRadians()),0,1,0,0]}}class oe{constructor(e,t,s){this.document=e,this.transforms=[],function(e){return m(e).trim().replace(/\)([a-zA-Z])/g,") $1").replace(/\)(\s?,\s?)/g,") ").split(/\s(?=[a-z])/)}(t).forEach(e=>{if("none"!==e){var[t,n]=function(e){var[t,s]=e.split("(");return[t.trim(),s.trim().replace(")","")]}(e),r=oe.transformTypes[t];void 0!==r&&this.transforms.push(new r(this.document,n,s))}})}static fromElement(e,t){var s=t.getStyle("transform",!1,!0),[n,r=n]=t.getStyle("transform-origin",!1,!0).split(),o=[n,r];return s.hasValue()?new oe(e,s.getString(),o):null}apply(e){for(var{transforms:t}=this,s=t.length,n=0;n<s;n++)t[n].apply(e)}unapply(e){for(var{transforms:t}=this,s=t.length-1;s>=0;s--)t[s].unapply(e)}applyToPoint(e){for(var{transforms:t}=this,s=t.length,n=0;n<s;n++)t[n].applyToPoint(e)}}oe.transformTypes={translate:K,rotate:J,scale:ee,matrix:te,skewX:ne,skewY:re};class ie{constructor(e,t){var s=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(this.document=e,this.node=t,this.captureTextNodes=s,this.attributes={},this.styles={},this.stylesSpecificity={},this.animationFrozen=!1,this.animationFrozenValue="",this.parent=null,this.children=[],t&&1===t.nodeType){if(Array.from(t.attributes).forEach(t=>{var s=y(t.nodeName);this.attributes[s]=new U(e,s,t.value)}),this.addStylesFromStyleDefinition(),this.getAttribute("style").hasValue())this.getAttribute("style").getString().split(";").map(e=>e.trim()).forEach(t=>{if(t){var[s,n]=t.split(":").map(e=>e.trim());this.styles[s]=new U(e,s,n)}});var{definitions:n}=e,r=this.getAttribute("id");r.hasValue()&&(n[r.getString()]||(n[r.getString()]=this)),Array.from(t.childNodes).forEach(t=>{if(1===t.nodeType)this.addChild(t);else if(s&&(3===t.nodeType||4===t.nodeType)){var n=e.createTextNode(t);n.getText().length>0&&this.addChild(n)}})}}getAttribute(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],s=this.attributes[e];if(!s&&t){var n=new U(this.document,e,"");return this.attributes[e]=n,n}return s||U.empty(this.document)}getHrefAttribute(){for(var e in this.attributes)if("href"===e||e.endsWith(":href"))return this.attributes[e];return U.empty(this.document)}getStyle(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],s=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=this.styles[e];if(n)return n;var r=this.getAttribute(e);if(null!=r&&r.hasValue())return this.styles[e]=r,r;if(!s){var{parent:o}=this;if(o){var i=o.getStyle(e);if(null!=i&&i.hasValue())return i}}if(t){var a=new U(this.document,e,"");return this.styles[e]=a,a}return n||U.empty(this.document)}render(e){if("none"!==this.getStyle("display").getString()&&"hidden"!==this.getStyle("visibility").getString()){if(e.save(),this.getStyle("mask").hasValue()){var t=this.getStyle("mask").getDefinition();t&&(this.applyEffects(e),t.apply(e,this))}else if("none"!==this.getStyle("filter").getValue("none")){var s=this.getStyle("filter").getDefinition();s&&(this.applyEffects(e),s.apply(e,this))}else this.setContext(e),this.renderChildren(e),this.clearContext(e);e.restore()}}setContext(e){}applyEffects(e){var t=oe.fromElement(this.document,this);t&&t.apply(e);var s=this.getStyle("clip-path",!1,!0);if(s.hasValue()){var n=s.getDefinition();n&&n.apply(e)}}clearContext(e){}renderChildren(e){this.children.forEach(t=>{t.render(e)})}addChild(e){var t=e instanceof ie?e:this.document.createElement(e);t.parent=this,ie.ignoreChildTypes.includes(t.type)||this.children.push(t)}matchesSelector(e){var t,{node:s}=this;if("function"==typeof s.matches)return s.matches(e);var n=null===(t=s.getAttribute)||void 0===t?void 0:t.call(s,"class");return!(!n||""===n)&&n.split(" ").some(t=>".".concat(t)===e)}addStylesFromStyleDefinition(){var{styles:e,stylesSpecificity:t}=this.document;for(var s in e)if(!s.startsWith("@")&&this.matchesSelector(s)){var n=e[s],r=t[s];if(n)for(var o in n){var i=this.stylesSpecificity[o];void 0===i&&(i="000"),r>=i&&(this.styles[o]=n[o],this.stylesSpecificity[o]=r)}}}removeStyles(e,t){return t.reduce((t,s)=>{var n=e.getStyle(s);if(!n.hasValue())return t;var r=n.getString();return n.setValue(""),[...t,[s,r]]},[])}restoreStyles(e,t){t.forEach(t=>{var[s,n]=t;e.getStyle(s,!0).setValue(n)})}isFirstChild(){var e;return 0===(null===(e=this.parent)||void 0===e?void 0:e.children.indexOf(this))}}ie.ignoreChildTypes=["title"];class ae extends ie{constructor(e,t,s){super(e,t,s)}}function de(e){var t=e.trim();return/^('|")/.test(t)?t:'"'.concat(t,'"')}function le(e){if(!e)return"";var t=e.trim().toLowerCase();switch(t){case"normal":case"italic":case"oblique":case"inherit":case"initial":case"unset":return t;default:return/^oblique\s+(-|)\d+deg$/.test(t)?t:""}}function ue(e){if(!e)return"";var t=e.trim().toLowerCase();switch(t){case"normal":case"bold":case"lighter":case"bolder":case"inherit":case"initial":case"unset":return t;default:return/^[\d.]+$/.test(t)?t:""}}class ce{constructor(e,t,s,n,r,o){var i=o?"string"==typeof o?ce.parse(o):o:{};this.fontFamily=r||i.fontFamily,this.fontSize=n||i.fontSize,this.fontStyle=e||i.fontStyle,this.fontWeight=s||i.fontWeight,this.fontVariant=t||i.fontVariant}static parse(){var e=arguments.length>1?arguments[1]:void 0,t="",s="",n="",r="",o="",i=m(arguments.length>0&&void 0!==arguments[0]?arguments[0]:"").trim().split(" "),a={fontSize:!1,fontStyle:!1,fontWeight:!1,fontVariant:!1};return i.forEach(e=>{switch(!0){case!a.fontStyle&&ce.styles.includes(e):"inherit"!==e&&(t=e),a.fontStyle=!0;break;case!a.fontVariant&&ce.variants.includes(e):"inherit"!==e&&(s=e),a.fontStyle=!0,a.fontVariant=!0;break;case!a.fontWeight&&ce.weights.includes(e):"inherit"!==e&&(n=e),a.fontStyle=!0,a.fontVariant=!0,a.fontWeight=!0;break;case!a.fontSize:"inherit"!==e&&([r]=e.split("/")),a.fontStyle=!0,a.fontVariant=!0,a.fontWeight=!0,a.fontSize=!0;break;default:"inherit"!==e&&(o+=e)}}),new ce(t,s,n,r,o,e)}toString(){return[le(this.fontStyle),this.fontVariant,ue(this.fontWeight),this.fontSize,(t=this.fontFamily,void 0===e?t:t.trim().split(",").map(de).join(","))].join(" ").trim();var t}}ce.styles="normal|italic|oblique|inherit",ce.variants="normal|small-caps|inherit",ce.weights="normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit";class fe{constructor(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Number.NaN,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Number.NaN,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Number.NaN,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Number.NaN;this.x1=e,this.y1=t,this.x2=s,this.y2=n,this.addPoint(e,t),this.addPoint(s,n)}get x(){return this.x1}get y(){return this.y1}get width(){return this.x2-this.x1}get height(){return this.y2-this.y1}addPoint(e,t){void 0!==e&&((isNaN(this.x1)||isNaN(this.x2))&&(this.x1=e,this.x2=e),e<this.x1&&(this.x1=e),e>this.x2&&(this.x2=e)),void 0!==t&&((isNaN(this.y1)||isNaN(this.y2))&&(this.y1=t,this.y2=t),t<this.y1&&(this.y1=t),t>this.y2&&(this.y2=t))}addX(e){this.addPoint(e,null)}addY(e){this.addPoint(null,e)}addBoundingBox(e){if(e){var{x1:t,y1:s,x2:n,y2:r}=e;this.addPoint(t,s),this.addPoint(n,r)}}sumCubic(e,t,s,n,r){return Math.pow(1-e,3)*t+3*Math.pow(1-e,2)*e*s+3*(1-e)*Math.pow(e,2)*n+Math.pow(e,3)*r}bezierCurveAdd(e,t,s,n,r){var o=6*t-12*s+6*n,i=-3*t+9*s-9*n+3*r,a=3*s-3*t;if(0!==i){var d=Math.pow(o,2)-4*a*i;if(!(d<0)){var l=(-o+Math.sqrt(d))/(2*i);0<l&&l<1&&(e?this.addX(this.sumCubic(l,t,s,n,r)):this.addY(this.sumCubic(l,t,s,n,r)));var u=(-o-Math.sqrt(d))/(2*i);0<u&&u<1&&(e?this.addX(this.sumCubic(u,t,s,n,r)):this.addY(this.sumCubic(u,t,s,n,r)))}}else{if(0===o)return;var c=-a/o;0<c&&c<1&&(e?this.addX(this.sumCubic(c,t,s,n,r)):this.addY(this.sumCubic(c,t,s,n,r)))}}addBezierCurve(e,t,s,n,r,o,i,a){this.addPoint(e,t),this.addPoint(i,a),this.bezierCurveAdd(!0,e,s,r,i),this.bezierCurveAdd(!1,t,n,o,a)}addQuadraticCurve(e,t,s,n,r,o){var i=e+2/3*(s-e),a=t+2/3*(n-t),d=i+1/3*(r-e),l=a+1/3*(o-t);this.addBezierCurve(e,t,i,d,a,l,r,o)}isPointInBox(e,t){var{x1:s,y1:n,x2:r,y2:o}=this;return s<=e&&e<=r&&n<=t&&t<=o}}class he extends c.SVGPathData{constructor(e){super(e.replace(/([+\-.])\s+/gm,"$1").replace(/[^MmZzLlHhVvCcSsQqTtAae\d\s.,+-].*/g,"")),this.control=null,this.start=null,this.current=null,this.command=null,this.commands=this.commands,this.i=-1,this.previousCommand=null,this.points=[],this.angles=[]}reset(){this.i=-1,this.command=null,this.previousCommand=null,this.start=new X(0,0),this.control=new X(0,0),this.current=new X(0,0),this.points=[],this.angles=[]}isEnd(){var{i:e,commands:t}=this;return e>=t.length-1}next(){var e=this.commands[++this.i];return this.previousCommand=this.command,this.command=e,e}getPoint(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"x",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"y",s=new X(this.command[e],this.command[t]);return this.makeAbsolute(s)}getAsControlPoint(e,t){var s=this.getPoint(e,t);return this.control=s,s}getAsCurrentPoint(e,t){var s=this.getPoint(e,t);return this.current=s,s}getReflectedControlPoint(){var e=this.previousCommand.type;if(e!==c.SVGPathData.CURVE_TO&&e!==c.SVGPathData.SMOOTH_CURVE_TO&&e!==c.SVGPathData.QUAD_TO&&e!==c.SVGPathData.SMOOTH_QUAD_TO)return this.current;var{current:{x:t,y:s},control:{x:n,y:r}}=this;return new X(2*t-n,2*s-r)}makeAbsolute(e){if(this.command.relative){var{x:t,y:s}=this.current;e.x+=t,e.y+=s}return e}addMarker(e,t,s){var{points:n,angles:r}=this;s&&r.length>0&&!r[r.length-1]&&(r[r.length-1]=n[n.length-1].angleTo(s)),this.addMarkerAngle(e,t?t.angleTo(e):null)}addMarkerAngle(e,t){this.points.push(e),this.angles.push(t)}getMarkerPoints(){return this.points}getMarkerAngles(){for(var{angles:e}=this,t=e.length,s=0;s<t;s++)if(!e[s])for(var n=s+1;n<t;n++)if(e[n]){e[s]=e[n];break}return e}}class me extends ie{constructor(){super(...arguments),this.modifiedEmSizeStack=!1}calculateOpacity(){for(var e=1,t=this;t;){var s=t.getStyle("opacity",!1,!0);s.hasValue(!0)&&(e*=s.getNumber()),t=t.parent}return e}setContext(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(!t){var s=this.getStyle("fill"),n=this.getStyle("fill-opacity"),r=this.getStyle("stroke"),o=this.getStyle("stroke-opacity");if(s.isUrlDefinition()){var i=s.getFillStyleDefinition(this,n);i&&(e.fillStyle=i)}else if(s.hasValue()){"currentColor"===s.getString()&&s.setValue(this.getStyle("color").getColor());var a=s.getColor();"inherit"!==a&&(e.fillStyle="none"===a?"rgba(0,0,0,0)":a)}if(n.hasValue()){var d=new U(this.document,"fill",e.fillStyle).addOpacity(n).getColor();e.fillStyle=d}if(r.isUrlDefinition()){var l=r.getFillStyleDefinition(this,o);l&&(e.strokeStyle=l)}else if(r.hasValue()){"currentColor"===r.getString()&&r.setValue(this.getStyle("color").getColor());var u=r.getString();"inherit"!==u&&(e.strokeStyle="none"===u?"rgba(0,0,0,0)":u)}if(o.hasValue()){var c=new U(this.document,"stroke",e.strokeStyle).addOpacity(o).getString();e.strokeStyle=c}var f=this.getStyle("stroke-width");if(f.hasValue()){var h=f.getPixels();e.lineWidth=h||M}var m=this.getStyle("stroke-linecap"),p=this.getStyle("stroke-linejoin"),j=this.getStyle("stroke-miterlimit"),_=this.getStyle("stroke-dasharray"),y=this.getStyle("stroke-dashoffset");if(m.hasValue()&&(e.lineCap=m.getString()),p.hasValue()&&(e.lineJoin=p.getString()),j.hasValue()&&(e.miterLimit=j.getNumber()),_.hasValue()&&"none"!==_.getString()){var v=g(_.getString());void 0!==e.setLineDash?e.setLineDash(v):void 0!==e.webkitLineDash?e.webkitLineDash=v:void 0===e.mozDash||1===v.length&&0===v[0]||(e.mozDash=v);var x=y.getPixels();void 0!==e.lineDashOffset?e.lineDashOffset=x:void 0!==e.webkitLineDashOffset?e.webkitLineDashOffset=x:void 0!==e.mozDashOffset&&(e.mozDashOffset=x)}}if(this.modifiedEmSizeStack=!1,void 0!==e.font){var b=this.getStyle("font"),w=this.getStyle("font-style"),S=this.getStyle("font-variant"),T=this.getStyle("font-weight"),A=this.getStyle("font-size"),O=this.getStyle("font-family"),P=new ce(w.getString(),S.getString(),T.getString(),A.hasValue()?"".concat(A.getPixels(!0),"px"):"",O.getString(),ce.parse(b.getString(),e.font));w.setValue(P.fontStyle),S.setValue(P.fontVariant),T.setValue(P.fontWeight),A.setValue(P.fontSize),O.setValue(P.fontFamily),e.font=P.toString(),A.isPixels()&&(this.document.emSize=A.getPixels(),this.modifiedEmSizeStack=!0)}t||(this.applyEffects(e),e.globalAlpha=this.calculateOpacity())}clearContext(e){super.clearContext(e),this.modifiedEmSizeStack&&this.document.popEmSize()}}class pe extends me{constructor(e,t,s){super(e,t,s),this.type="path",this.pathParser=null,this.pathParser=new he(this.getAttribute("d").getString())}path(e){var{pathParser:t}=this,s=new fe;for(t.reset(),e&&e.beginPath();!t.isEnd();)switch(t.next().type){case he.MOVE_TO:this.pathM(e,s);break;case he.LINE_TO:this.pathL(e,s);break;case he.HORIZ_LINE_TO:this.pathH(e,s);break;case he.VERT_LINE_TO:this.pathV(e,s);break;case he.CURVE_TO:this.pathC(e,s);break;case he.SMOOTH_CURVE_TO:this.pathS(e,s);break;case he.QUAD_TO:this.pathQ(e,s);break;case he.SMOOTH_QUAD_TO:this.pathT(e,s);break;case he.ARC:this.pathA(e,s);break;case he.CLOSE_PATH:this.pathZ(e,s)}return s}getBoundingBox(e){return this.path()}getMarkers(){var{pathParser:e}=this,t=e.getMarkerPoints(),s=e.getMarkerAngles();return t.map((e,t)=>[e,s[t]])}renderChildren(e){this.path(e),this.document.screen.mouse.checkPath(this,e);var t=this.getStyle("fill-rule");""!==e.fillStyle&&("inherit"!==t.getString("inherit")?e.fill(t.getString()):e.fill()),""!==e.strokeStyle&&("non-scaling-stroke"===this.getAttribute("vector-effect").getString()?(e.save(),e.setTransform(1,0,0,1,0,0),e.stroke(),e.restore()):e.stroke());var s=this.getMarkers();if(s){var n=s.length-1,r=this.getStyle("marker-start"),o=this.getStyle("marker-mid"),i=this.getStyle("marker-end");if(r.isUrlDefinition()){var a=r.getDefinition(),[d,l]=s[0];a.render(e,d,l)}if(o.isUrlDefinition())for(var u=o.getDefinition(),c=1;c<n;c++){var[f,h]=s[c];u.render(e,f,h)}if(i.isUrlDefinition()){var m=i.getDefinition(),[p,j]=s[n];m.render(e,p,j)}}}static pathM(e){var t=e.getAsCurrentPoint();return e.start=e.current,{point:t}}pathM(e,t){var{pathParser:s}=this,{point:n}=pe.pathM(s),{x:r,y:o}=n;s.addMarker(n),t.addPoint(r,o),e&&e.moveTo(r,o)}static pathL(e){var{current:t}=e;return{current:t,point:e.getAsCurrentPoint()}}pathL(e,t){var{pathParser:s}=this,{current:n,point:r}=pe.pathL(s),{x:o,y:i}=r;s.addMarker(r,n),t.addPoint(o,i),e&&e.lineTo(o,i)}static pathH(e){var{current:t,command:s}=e,n=new X((s.relative?t.x:0)+s.x,t.y);return e.current=n,{current:t,point:n}}pathH(e,t){var{pathParser:s}=this,{current:n,point:r}=pe.pathH(s),{x:o,y:i}=r;s.addMarker(r,n),t.addPoint(o,i),e&&e.lineTo(o,i)}static pathV(e){var{current:t,command:s}=e,n=new X(t.x,(s.relative?t.y:0)+s.y);return e.current=n,{current:t,point:n}}pathV(e,t){var{pathParser:s}=this,{current:n,point:r}=pe.pathV(s),{x:o,y:i}=r;s.addMarker(r,n),t.addPoint(o,i),e&&e.lineTo(o,i)}static pathC(e){var{current:t}=e;return{current:t,point:e.getPoint("x1","y1"),controlPoint:e.getAsControlPoint("x2","y2"),currentPoint:e.getAsCurrentPoint()}}pathC(e,t){var{pathParser:s}=this,{current:n,point:r,controlPoint:o,currentPoint:i}=pe.pathC(s);s.addMarker(i,o,r),t.addBezierCurve(n.x,n.y,r.x,r.y,o.x,o.y,i.x,i.y),e&&e.bezierCurveTo(r.x,r.y,o.x,o.y,i.x,i.y)}static pathS(e){var{current:t}=e;return{current:t,point:e.getReflectedControlPoint(),controlPoint:e.getAsControlPoint("x2","y2"),currentPoint:e.getAsCurrentPoint()}}pathS(e,t){var{pathParser:s}=this,{current:n,point:r,controlPoint:o,currentPoint:i}=pe.pathS(s);s.addMarker(i,o,r),t.addBezierCurve(n.x,n.y,r.x,r.y,o.x,o.y,i.x,i.y),e&&e.bezierCurveTo(r.x,r.y,o.x,o.y,i.x,i.y)}static pathQ(e){var{current:t}=e;return{current:t,controlPoint:e.getAsControlPoint("x1","y1"),currentPoint:e.getAsCurrentPoint()}}pathQ(e,t){var{pathParser:s}=this,{current:n,controlPoint:r,currentPoint:o}=pe.pathQ(s);s.addMarker(o,r,r),t.addQuadraticCurve(n.x,n.y,r.x,r.y,o.x,o.y),e&&e.quadraticCurveTo(r.x,r.y,o.x,o.y)}static pathT(e){var{current:t}=e,s=e.getReflectedControlPoint();return e.control=s,{current:t,controlPoint:s,currentPoint:e.getAsCurrentPoint()}}pathT(e,t){var{pathParser:s}=this,{current:n,controlPoint:r,currentPoint:o}=pe.pathT(s);s.addMarker(o,r,r),t.addQuadraticCurve(n.x,n.y,r.x,r.y,o.x,o.y),e&&e.quadraticCurveTo(r.x,r.y,o.x,o.y)}static pathA(e){var{current:t,command:s}=e,{rX:n,rY:r,xRot:o,lArcFlag:i,sweepFlag:a}=s,d=o*(Math.PI/180),l=e.getAsCurrentPoint(),u=new X(Math.cos(d)*(t.x-l.x)/2+Math.sin(d)*(t.y-l.y)/2,-Math.sin(d)*(t.x-l.x)/2+Math.cos(d)*(t.y-l.y)/2),c=Math.pow(u.x,2)/Math.pow(n,2)+Math.pow(u.y,2)/Math.pow(r,2);c>1&&(n*=Math.sqrt(c),r*=Math.sqrt(c));var f=(i===a?-1:1)*Math.sqrt((Math.pow(n,2)*Math.pow(r,2)-Math.pow(n,2)*Math.pow(u.y,2)-Math.pow(r,2)*Math.pow(u.x,2))/(Math.pow(n,2)*Math.pow(u.y,2)+Math.pow(r,2)*Math.pow(u.x,2)));isNaN(f)&&(f=0);var h=new X(f*n*u.y/r,f*-r*u.x/n),m=new X((t.x+l.x)/2+Math.cos(d)*h.x-Math.sin(d)*h.y,(t.y+l.y)/2+Math.sin(d)*h.x+Math.cos(d)*h.y),p=R([1,0],[(u.x-h.x)/n,(u.y-h.y)/r]),j=[(u.x-h.x)/n,(u.y-h.y)/r],g=[(-u.x-h.x)/n,(-u.y-h.y)/r],_=R(j,g);return k(j,g)<=-1&&(_=Math.PI),k(j,g)>=1&&(_=0),{currentPoint:l,rX:n,rY:r,sweepFlag:a,xAxisRotation:d,centp:m,a1:p,ad:_}}pathA(e,t){var{pathParser:s}=this,{currentPoint:n,rX:r,rY:o,sweepFlag:i,xAxisRotation:a,centp:d,a1:l,ad:u}=pe.pathA(s),c=1-i?1:-1,f=l+c*(u/2),h=new X(d.x+r*Math.cos(f),d.y+o*Math.sin(f));if(s.addMarkerAngle(h,f-c*Math.PI/2),s.addMarkerAngle(n,f-c*Math.PI),t.addPoint(n.x,n.y),e&&!isNaN(l)&&!isNaN(u)){var m=r>o?r:o,p=r>o?1:r/o,j=r>o?o/r:1;e.translate(d.x,d.y),e.rotate(a),e.scale(p,j),e.arc(0,0,m,l,l+u,Boolean(1-i)),e.scale(1/p,1/j),e.rotate(-a),e.translate(-d.x,-d.y)}}static pathZ(e){e.current=e.start}pathZ(e,t){pe.pathZ(this.pathParser),e&&t.x1!==t.x2&&t.y1!==t.y2&&e.closePath()}}class je extends pe{constructor(e,t,s){super(e,t,s),this.type="glyph",this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber(),this.unicode=this.getAttribute("unicode").getString(),this.arabicForm=this.getAttribute("arabic-form").getString()}}class ge extends me{constructor(e,t,s){super(e,t,new.target===ge||s),this.type="text",this.x=0,this.y=0,this.measureCache=-1}setContext(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];super.setContext(e,t);var s=this.getStyle("dominant-baseline").getTextBaseline()||this.getStyle("alignment-baseline").getTextBaseline();s&&(e.textBaseline=s)}initializeCoordinates(){this.x=0,this.y=0,this.leafTexts=[],this.textChunkStart=0,this.minX=Number.POSITIVE_INFINITY,this.maxX=Number.NEGATIVE_INFINITY}getBoundingBox(e){if("text"!==this.type)return this.getTElementBoundingBox(e);this.initializeCoordinates(),this.adjustChildCoordinatesRecursive(e);var t=null;return this.children.forEach((s,n)=>{var r=this.getChildBoundingBox(e,this,this,n);t?t.addBoundingBox(r):t=r}),t}getFontSize(){var{document:e,parent:t}=this,s=ce.parse(e.ctx.font).fontSize;return t.getStyle("font-size").getNumber(s)}getTElementBoundingBox(e){var t=this.getFontSize();return new fe(this.x,this.y-t,this.x+this.measureText(e),this.y)}getGlyph(e,t,s){var n=t[s],r=null;if(e.isArabic){var o=t.length,i=t[s-1],a=t[s+1],d="isolated";if((0===s||" "===i)&&s<o-1&&" "!==a&&(d="terminal"),s>0&&" "!==i&&s<o-1&&" "!==a&&(d="medial"),s>0&&" "!==i&&(s===o-1||" "===a)&&(d="initial"),void 0!==e.glyphs[n]){var l=e.glyphs[n];r=l instanceof je?l:l[d]}}else r=e.glyphs[n];return r||(r=e.missingGlyph),r}getText(){return""}getTextFromNode(e){var t=e||this.node,s=Array.from(t.parentNode.childNodes),n=s.indexOf(t),r=s.length-1,o=m(t.textContent||"");return 0===n&&(o=p(o)),n===r&&(o=j(o)),o}renderChildren(e){if("text"===this.type){this.initializeCoordinates(),this.adjustChildCoordinatesRecursive(e),this.children.forEach((t,s)=>{this.renderChild(e,this,this,s)});var{mouse:t}=this.document.screen;t.isWorking()&&t.checkBoundingBox(this,this.getBoundingBox(e))}else this.renderTElementChildren(e)}renderTElementChildren(e){var{document:t,parent:s}=this,n=this.getText(),r=s.getStyle("font-family").getDefinition();if(r)for(var{unitsPerEm:o}=r.fontFace,i=ce.parse(t.ctx.font),a=s.getStyle("font-size").getNumber(i.fontSize),d=s.getStyle("font-style").getString(i.fontStyle),l=a/o,u=r.isRTL?n.split("").reverse().join(""):n,c=g(s.getAttribute("dx").getString()),f=u.length,h=0;h<f;h++){var m=this.getGlyph(r,u,h);e.translate(this.x,this.y),e.scale(l,-l);var p=e.lineWidth;e.lineWidth=e.lineWidth*o/a,"italic"===d&&e.transform(1,0,.4,1,0,0),m.render(e),"italic"===d&&e.transform(1,0,-.4,1,0,0),e.lineWidth=p,e.scale(1/l,-1/l),e.translate(-this.x,-this.y),this.x+=a*(m.horizAdvX||r.horizAdvX)/o,void 0===c[h]||isNaN(c[h])||(this.x+=c[h])}else{var{x:j,y:_}=this;e.fillStyle&&e.fillText(n,j,_),e.strokeStyle&&e.strokeText(n,j,_)}}applyAnchoring(){if(!(this.textChunkStart>=this.leafTexts.length)){var e=this.leafTexts[this.textChunkStart],t=e.getStyle("text-anchor").getString("start"),s=0;s="start"===t?e.x-this.minX:"end"===t?e.x-this.maxX:e.x-(this.minX+this.maxX)/2;for(var n=this.textChunkStart;n<this.leafTexts.length;n++)this.leafTexts[n].x+=s;this.minX=Number.POSITIVE_INFINITY,this.maxX=Number.NEGATIVE_INFINITY,this.textChunkStart=this.leafTexts.length}}adjustChildCoordinatesRecursive(e){this.children.forEach((t,s)=>{this.adjustChildCoordinatesRecursiveCore(e,this,this,s)}),this.applyAnchoring()}adjustChildCoordinatesRecursiveCore(e,t,s,n){var r=s.children[n];r.children.length>0?r.children.forEach((s,n)=>{t.adjustChildCoordinatesRecursiveCore(e,t,r,n)}):this.adjustChildCoordinates(e,t,s,n)}adjustChildCoordinates(e,t,s,n){var r=s.children[n];if("function"!=typeof r.measureText)return r;e.save(),r.setContext(e,!0);var o=r.getAttribute("x"),i=r.getAttribute("y"),a=r.getAttribute("dx"),d=r.getAttribute("dy"),l=r.getStyle("font-family").getDefinition(),u=Boolean(l)&&l.isRTL;0===n&&(o.hasValue()||o.setValue(r.getInheritedAttribute("x")),i.hasValue()||i.setValue(r.getInheritedAttribute("y")),a.hasValue()||a.setValue(r.getInheritedAttribute("dx")),d.hasValue()||d.setValue(r.getInheritedAttribute("dy")));var c=r.measureText(e);return u&&(t.x-=c),o.hasValue()?(t.applyAnchoring(),r.x=o.getPixels("x"),a.hasValue()&&(r.x+=a.getPixels("x"))):(a.hasValue()&&(t.x+=a.getPixels("x")),r.x=t.x),t.x=r.x,u||(t.x+=c),i.hasValue()?(r.y=i.getPixels("y"),d.hasValue()&&(r.y+=d.getPixels("y"))):(d.hasValue()&&(t.y+=d.getPixels("y")),r.y=t.y),t.y=r.y,t.leafTexts.push(r),t.minX=Math.min(t.minX,r.x,r.x+c),t.maxX=Math.max(t.maxX,r.x,r.x+c),r.clearContext(e),e.restore(),r}getChildBoundingBox(e,t,s,n){var r=s.children[n];if("function"!=typeof r.getBoundingBox)return null;var o=r.getBoundingBox(e);return o?(r.children.forEach((s,n)=>{var i=t.getChildBoundingBox(e,t,r,n);o.addBoundingBox(i)}),o):null}renderChild(e,t,s,n){var r=s.children[n];r.render(e),r.children.forEach((s,n)=>{t.renderChild(e,t,r,n)})}measureText(e){var{measureCache:t}=this;if(~t)return t;var s=this.getText(),n=this.measureTargetText(e,s);return this.measureCache=n,n}measureTargetText(e,t){if(!t.length)return 0;var{parent:s}=this,n=s.getStyle("font-family").getDefinition();if(n){for(var r=this.getFontSize(),o=n.isRTL?t.split("").reverse().join(""):t,i=g(s.getAttribute("dx").getString()),a=o.length,d=0,l=0;l<a;l++){d+=(this.getGlyph(n,o,l).horizAdvX||n.horizAdvX)*r/n.fontFace.unitsPerEm,void 0===i[l]||isNaN(i[l])||(d+=i[l])}return d}if(!e.measureText)return 10*t.length;e.save(),this.setContext(e,!0);var{width:u}=e.measureText(t);return this.clearContext(e),e.restore(),u}getInheritedAttribute(e){for(var t=this;t instanceof ge&&t.isFirstChild();){var s=t.parent.getAttribute(e);if(s.hasValue(!0))return s.getValue("0");t=t.parent}return null}}class _e extends ge{constructor(e,t,s){super(e,t,new.target===_e||s),this.type="tspan",this.text=this.children.length>0?"":this.getTextFromNode()}getText(){return this.text}}class ye extends _e{constructor(){super(...arguments),this.type="textNode"}}class ve extends me{constructor(){super(...arguments),this.type="svg",this.root=!1}setContext(e){var t,{document:s}=this,{screen:n,window:r}=s,o=e.canvas;if(n.setDefaults(e),o.style&&void 0!==e.font&&r&&void 0!==r.getComputedStyle){e.font=r.getComputedStyle(o).getPropertyValue("font");var i=new U(s,"fontSize",ce.parse(e.font).fontSize);i.hasValue()&&(s.rootEmSize=i.getPixels("y"),s.emSize=s.rootEmSize)}this.getAttribute("x").hasValue()||this.getAttribute("x",!0).setValue(0),this.getAttribute("y").hasValue()||this.getAttribute("y",!0).setValue(0);var{width:a,height:d}=n.viewPort;this.getStyle("width").hasValue()||this.getStyle("width",!0).setValue("100%"),this.getStyle("height").hasValue()||this.getStyle("height",!0).setValue("100%"),this.getStyle("color").hasValue()||this.getStyle("color",!0).setValue("black");var l=this.getAttribute("refX"),u=this.getAttribute("refY"),c=this.getAttribute("viewBox"),f=c.hasValue()?g(c.getString()):null,h=!this.root&&"visible"!==this.getStyle("overflow").getValue("hidden"),m=0,p=0,j=0,_=0;f&&(m=f[0],p=f[1]),this.root||(a=this.getStyle("width").getPixels("x"),d=this.getStyle("height").getPixels("y"),"marker"===this.type&&(j=m,_=p,m=0,p=0)),n.viewPort.setCurrent(a,d),!this.node||this.parent&&"foreignObject"!==(null===(t=this.node.parentNode)||void 0===t?void 0:t.nodeName)||!this.getStyle("transform",!1,!0).hasValue()||this.getStyle("transform-origin",!1,!0).hasValue()||this.getStyle("transform-origin",!0,!0).setValue("50% 50%"),super.setContext(e),e.translate(this.getAttribute("x").getPixels("x"),this.getAttribute("y").getPixels("y")),f&&(a=f[2],d=f[3]),s.setViewBox({ctx:e,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:n.viewPort.width,desiredWidth:a,height:n.viewPort.height,desiredHeight:d,minX:m,minY:p,refX:l.getValue(),refY:u.getValue(),clip:h,clipX:j,clipY:_}),f&&(n.viewPort.removeCurrent(),n.viewPort.setCurrent(a,d))}clearContext(e){super.clearContext(e),this.document.screen.viewPort.removeCurrent()}resize(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e,s=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=this.getAttribute("width",!0),r=this.getAttribute("height",!0),o=this.getAttribute("viewBox"),i=this.getAttribute("style"),a=n.getNumber(0),d=r.getNumber(0);if(s)if("string"==typeof s)this.getAttribute("preserveAspectRatio",!0).setValue(s);else{var l=this.getAttribute("preserveAspectRatio");l.hasValue()&&l.setValue(l.getString().replace(/^\s*(\S.*\S)\s*$/,"$1"))}if(n.setValue(e),r.setValue(t),o.hasValue()||o.setValue("0 0 ".concat(a||e," ").concat(d||t)),i.hasValue()){var u=this.getStyle("width"),c=this.getStyle("height");u.hasValue()&&u.setValue("".concat(e,"px")),c.hasValue()&&c.setValue("".concat(t,"px"))}}}class xe extends pe{constructor(){super(...arguments),this.type="rect"}path(e){var t=this.getAttribute("x").getPixels("x"),s=this.getAttribute("y").getPixels("y"),n=this.getStyle("width",!1,!0).getPixels("x"),r=this.getStyle("height",!1,!0).getPixels("y"),o=this.getAttribute("rx"),i=this.getAttribute("ry"),a=o.getPixels("x"),d=i.getPixels("y");if(o.hasValue()&&!i.hasValue()&&(d=a),i.hasValue()&&!o.hasValue()&&(a=d),a=Math.min(a,n/2),d=Math.min(d,r/2),e){var l=(Math.sqrt(2)-1)/3*4;e.beginPath(),r>0&&n>0&&(e.moveTo(t+a,s),e.lineTo(t+n-a,s),e.bezierCurveTo(t+n-a+l*a,s,t+n,s+d-l*d,t+n,s+d),e.lineTo(t+n,s+r-d),e.bezierCurveTo(t+n,s+r-d+l*d,t+n-a+l*a,s+r,t+n-a,s+r),e.lineTo(t+a,s+r),e.bezierCurveTo(t+a-l*a,s+r,t,s+r-d+l*d,t,s+r-d),e.lineTo(t,s+d),e.bezierCurveTo(t,s+d-l*d,t+a-l*a,s,t+a,s),e.closePath())}return new fe(t,s,t+n,s+r)}getMarkers(){return null}}class be extends pe{constructor(){super(...arguments),this.type="circle"}path(e){var t=this.getAttribute("cx").getPixels("x"),s=this.getAttribute("cy").getPixels("y"),n=this.getAttribute("r").getPixels();return e&&n>0&&(e.beginPath(),e.arc(t,s,n,0,2*Math.PI,!1),e.closePath()),new fe(t-n,s-n,t+n,s+n)}getMarkers(){return null}}class we extends pe{constructor(){super(...arguments),this.type="ellipse"}path(e){var t=(Math.sqrt(2)-1)/3*4,s=this.getAttribute("rx").getPixels("x"),n=this.getAttribute("ry").getPixels("y"),r=this.getAttribute("cx").getPixels("x"),o=this.getAttribute("cy").getPixels("y");return e&&s>0&&n>0&&(e.beginPath(),e.moveTo(r+s,o),e.bezierCurveTo(r+s,o+t*n,r+t*s,o+n,r,o+n),e.bezierCurveTo(r-t*s,o+n,r-s,o+t*n,r-s,o),e.bezierCurveTo(r-s,o-t*n,r-t*s,o-n,r,o-n),e.bezierCurveTo(r+t*s,o-n,r+s,o-t*n,r+s,o),e.closePath()),new fe(r-s,o-n,r+s,o+n)}getMarkers(){return null}}class Se extends pe{constructor(){super(...arguments),this.type="line"}getPoints(){return[new X(this.getAttribute("x1").getPixels("x"),this.getAttribute("y1").getPixels("y")),new X(this.getAttribute("x2").getPixels("x"),this.getAttribute("y2").getPixels("y"))]}path(e){var[{x:t,y:s},{x:n,y:r}]=this.getPoints();return e&&(e.beginPath(),e.moveTo(t,s),e.lineTo(n,r)),new fe(t,s,n,r)}getMarkers(){var[e,t]=this.getPoints(),s=e.angleTo(t);return[[e,s],[t,s]]}}class Te extends pe{constructor(e,t,s){super(e,t,s),this.type="polyline",this.points=[],this.points=X.parsePath(this.getAttribute("points").getString())}path(e){var{points:t}=this,[{x:s,y:n}]=t,r=new fe(s,n);return e&&(e.beginPath(),e.moveTo(s,n)),t.forEach(t=>{var{x:s,y:n}=t;r.addPoint(s,n),e&&e.lineTo(s,n)}),r}getMarkers(){var{points:e}=this,t=e.length-1,s=[];return e.forEach((n,r)=>{r!==t&&s.push([n,n.angleTo(e[r+1])])}),s.length>0&&s.push([e[e.length-1],s[s.length-1][1]]),s}}class Ae extends Te{constructor(){super(...arguments),this.type="polygon"}path(e){var t=super.path(e),[{x:s,y:n}]=this.points;return e&&(e.lineTo(s,n),e.closePath()),t}}class Oe extends ie{constructor(){super(...arguments),this.type="pattern"}createPattern(e,t,s){var n=this.getStyle("width").getPixels("x",!0),r=this.getStyle("height").getPixels("y",!0),o=new ve(this.document,null);o.attributes.viewBox=new U(this.document,"viewBox",this.getAttribute("viewBox").getValue()),o.attributes.width=new U(this.document,"width","".concat(n,"px")),o.attributes.height=new U(this.document,"height","".concat(r,"px")),o.attributes.transform=new U(this.document,"transform",this.getAttribute("patternTransform").getValue()),o.children=this.children;var i=this.document.createCanvas(n,r),a=i.getContext("2d"),d=this.getAttribute("x"),l=this.getAttribute("y");d.hasValue()&&l.hasValue()&&a.translate(d.getPixels("x",!0),l.getPixels("y",!0)),s.hasValue()?this.styles["fill-opacity"]=s:Reflect.deleteProperty(this.styles,"fill-opacity");for(var u=-1;u<=1;u++)for(var c=-1;c<=1;c++)a.save(),o.attributes.x=new U(this.document,"x",u*i.width),o.attributes.y=new U(this.document,"y",c*i.height),o.render(a),a.restore();return e.createPattern(i,"repeat")}}class Pe extends ie{constructor(){super(...arguments),this.type="marker"}render(e,t,s){if(t){var{x:n,y:r}=t,o=this.getAttribute("orient").getString("auto"),i=this.getAttribute("markerUnits").getString("strokeWidth");e.translate(n,r),"auto"===o&&e.rotate(s),"strokeWidth"===i&&e.scale(e.lineWidth,e.lineWidth),e.save();var a=new ve(this.document,null);a.type=this.type,a.attributes.viewBox=new U(this.document,"viewBox",this.getAttribute("viewBox").getValue()),a.attributes.refX=new U(this.document,"refX",this.getAttribute("refX").getValue()),a.attributes.refY=new U(this.document,"refY",this.getAttribute("refY").getValue()),a.attributes.width=new U(this.document,"width",this.getAttribute("markerWidth").getValue()),a.attributes.height=new U(this.document,"height",this.getAttribute("markerHeight").getValue()),a.attributes.overflow=new U(this.document,"overflow",this.getAttribute("overflow").getValue()),a.attributes.fill=new U(this.document,"fill",this.getAttribute("fill").getColor("black")),a.attributes.stroke=new U(this.document,"stroke",this.getAttribute("stroke").getValue("none")),a.children=this.children,a.render(e),e.restore(),"strokeWidth"===i&&e.scale(1/e.lineWidth,1/e.lineWidth),"auto"===o&&e.rotate(-s),e.translate(-n,-r)}}}class Ce extends ie{constructor(){super(...arguments),this.type="defs"}render(){}}class Ee extends me{constructor(){super(...arguments),this.type="g"}getBoundingBox(e){var t=new fe;return this.children.forEach(s=>{t.addBoundingBox(s.getBoundingBox(e))}),t}}class Me extends ie{constructor(e,t,s){super(e,t,s),this.attributesToInherit=["gradientUnits"],this.stops=[];var{stops:n,children:r}=this;r.forEach(e=>{"stop"===e.type&&n.push(e)})}getGradientUnits(){return this.getAttribute("gradientUnits").getString("objectBoundingBox")}createGradient(e,t,s){var n=this;this.getHrefAttribute().hasValue()&&(n=this.getHrefAttribute().getDefinition(),this.inheritStopContainer(n));var{stops:r}=n,o=this.getGradient(e,t);if(!o)return this.addParentOpacity(s,r[r.length-1].color);if(r.forEach(e=>{o.addColorStop(e.offset,this.addParentOpacity(s,e.color))}),this.getAttribute("gradientTransform").hasValue()){var{document:i}=this,{MAX_VIRTUAL_PIXELS:a,viewPort:d}=i.screen,[l]=d.viewPorts,u=new xe(i,null);u.attributes.x=new U(i,"x",-a/3),u.attributes.y=new U(i,"y",-a/3),u.attributes.width=new U(i,"width",a),u.attributes.height=new U(i,"height",a);var c=new Ee(i,null);c.attributes.transform=new U(i,"transform",this.getAttribute("gradientTransform").getValue()),c.children=[u];var f=new ve(i,null);f.attributes.x=new U(i,"x",0),f.attributes.y=new U(i,"y",0),f.attributes.width=new U(i,"width",l.width),f.attributes.height=new U(i,"height",l.height),f.children=[c];var h=i.createCanvas(l.width,l.height),m=h.getContext("2d");return m.fillStyle=o,f.render(m),m.createPattern(h,"no-repeat")}return o}inheritStopContainer(e){this.attributesToInherit.forEach(t=>{!this.getAttribute(t).hasValue()&&e.getAttribute(t).hasValue()&&this.getAttribute(t,!0).setValue(e.getAttribute(t).getValue())})}addParentOpacity(e,t){return e.hasValue()?new U(this.document,"color",t).addOpacity(e).getColor():t}}class Ne extends Me{constructor(e,t,s){super(e,t,s),this.type="linearGradient",this.attributesToInherit.push("x1","y1","x2","y2")}getGradient(e,t){var s="objectBoundingBox"===this.getGradientUnits(),n=s?t.getBoundingBox(e):null;if(s&&!n)return null;this.getAttribute("x1").hasValue()||this.getAttribute("y1").hasValue()||this.getAttribute("x2").hasValue()||this.getAttribute("y2").hasValue()||(this.getAttribute("x1",!0).setValue(0),this.getAttribute("y1",!0).setValue(0),this.getAttribute("x2",!0).setValue(1),this.getAttribute("y2",!0).setValue(0));var r=s?n.x+n.width*this.getAttribute("x1").getNumber():this.getAttribute("x1").getPixels("x"),o=s?n.y+n.height*this.getAttribute("y1").getNumber():this.getAttribute("y1").getPixels("y"),i=s?n.x+n.width*this.getAttribute("x2").getNumber():this.getAttribute("x2").getPixels("x"),a=s?n.y+n.height*this.getAttribute("y2").getNumber():this.getAttribute("y2").getPixels("y");return r===i&&o===a?null:e.createLinearGradient(r,o,i,a)}}class ke extends Me{constructor(e,t,s){super(e,t,s),this.type="radialGradient",this.attributesToInherit.push("cx","cy","r","fx","fy","fr")}getGradient(e,t){var s="objectBoundingBox"===this.getGradientUnits(),n=t.getBoundingBox(e);if(s&&!n)return null;this.getAttribute("cx").hasValue()||this.getAttribute("cx",!0).setValue("50%"),this.getAttribute("cy").hasValue()||this.getAttribute("cy",!0).setValue("50%"),this.getAttribute("r").hasValue()||this.getAttribute("r",!0).setValue("50%");var r=s?n.x+n.width*this.getAttribute("cx").getNumber():this.getAttribute("cx").getPixels("x"),o=s?n.y+n.height*this.getAttribute("cy").getNumber():this.getAttribute("cy").getPixels("y"),i=r,a=o;this.getAttribute("fx").hasValue()&&(i=s?n.x+n.width*this.getAttribute("fx").getNumber():this.getAttribute("fx").getPixels("x")),this.getAttribute("fy").hasValue()&&(a=s?n.y+n.height*this.getAttribute("fy").getNumber():this.getAttribute("fy").getPixels("y"));var d=s?(n.width+n.height)/2*this.getAttribute("r").getNumber():this.getAttribute("r").getPixels(),l=this.getAttribute("fr").getPixels();return e.createRadialGradient(i,a,l,r,o,d)}}class Re extends ie{constructor(e,t,s){super(e,t,s),this.type="stop";var n=Math.max(0,Math.min(1,this.getAttribute("offset").getNumber())),r=this.getStyle("stop-opacity"),o=this.getStyle("stop-color",!0);""===o.getString()&&o.setValue("#000"),r.hasValue()&&(o=o.addOpacity(r)),this.offset=n,this.color=o.getColor()}}class Ve extends ie{constructor(e,t,s){super(e,t,s),this.type="animate",this.duration=0,this.initialValue=null,this.initialUnits="",this.removed=!1,this.frozen=!1,e.screen.animations.push(this),this.begin=this.getAttribute("begin").getMilliseconds(),this.maxDuration=this.begin+this.getAttribute("dur").getMilliseconds(),this.from=this.getAttribute("from"),this.to=this.getAttribute("to"),this.values=new U(e,"values",null);var n=this.getAttribute("values");n.hasValue()&&this.values.setValue(n.getString().split(";"))}getProperty(){var e=this.getAttribute("attributeType").getString(),t=this.getAttribute("attributeName").getString();return"CSS"===e?this.parent.getStyle(t,!0):this.parent.getAttribute(t,!0)}calcValue(){var{initialUnits:e}=this,{progress:t,from:s,to:n}=this.getProgress(),r=s.getNumber()+(n.getNumber()-s.getNumber())*t;return"%"===e&&(r*=100),"".concat(r).concat(e)}update(e){var{parent:t}=this,s=this.getProperty();if(this.initialValue||(this.initialValue=s.getString(),this.initialUnits=s.getUnits()),this.duration>this.maxDuration){var n=this.getAttribute("fill").getString("remove");if("indefinite"===this.getAttribute("repeatCount").getString()||"indefinite"===this.getAttribute("repeatDur").getString())this.duration=0;else if("freeze"!==n||this.frozen){if("remove"===n&&!this.removed)return this.removed=!0,s.setValue(t.animationFrozen?t.animationFrozenValue:this.initialValue),!0}else this.frozen=!0,t.animationFrozen=!0,t.animationFrozenValue=s.getString();return!1}this.duration+=e;var r=!1;if(this.begin<this.duration){var o=this.calcValue(),i=this.getAttribute("type");if(i.hasValue()){var a=i.getString();o="".concat(a,"(").concat(o,")")}s.setValue(o),r=!0}return r}getProgress(){var{document:e,values:t}=this,s={progress:(this.duration-this.begin)/(this.maxDuration-this.begin)};if(t.hasValue()){var n=s.progress*(t.getValue().length-1),r=Math.floor(n),o=Math.ceil(n);s.from=new U(e,"from",parseFloat(t.getValue()[r])),s.to=new U(e,"to",parseFloat(t.getValue()[o])),s.progress=(n-r)/(o-r)}else s.from=this.from,s.to=this.to;return s}}class Ie extends Ve{constructor(){super(...arguments),this.type="animateColor"}calcValue(){var{progress:e,from:t,to:s}=this.getProgress(),n=new u.a(t.getColor()),r=new u.a(s.getColor());if(n.ok&&r.ok){var o=n.r+(r.r-n.r)*e,i=n.g+(r.g-n.g)*e,a=n.b+(r.b-n.b)*e;return"rgb(".concat(Math.floor(o),", ").concat(Math.floor(i),", ").concat(Math.floor(a),")")}return this.getAttribute("from").getColor()}}class Le extends Ve{constructor(){super(...arguments),this.type="animateTransform"}calcValue(){var{progress:e,from:t,to:s}=this.getProgress(),n=g(t.getString()),r=g(s.getString());return n.map((t,s)=>t+(r[s]-t)*e).join(" ")}}class De extends ie{constructor(e,t,s){super(e,t,s),this.type="font",this.glyphs={},this.horizAdvX=this.getAttribute("horiz-adv-x").getNumber();var{definitions:n}=e,{children:r}=this;for(var o of r)switch(o.type){case"font-face":this.fontFace=o;var i=o.getStyle("font-family");i.hasValue()&&(n[i.getString()]=this);break;case"missing-glyph":this.missingGlyph=o;break;case"glyph":var a=o;a.arabicForm?(this.isRTL=!0,this.isArabic=!0,void 0===this.glyphs[a.unicode]&&(this.glyphs[a.unicode]={}),this.glyphs[a.unicode][a.arabicForm]=a):this.glyphs[a.unicode]=a}}render(){}}class Be extends ie{constructor(e,t,s){super(e,t,s),this.type="font-face",this.ascent=this.getAttribute("ascent").getNumber(),this.descent=this.getAttribute("descent").getNumber(),this.unitsPerEm=this.getAttribute("units-per-em").getNumber()}}class Fe extends pe{constructor(){super(...arguments),this.type="missing-glyph",this.horizAdvX=0}}class ze extends ge{constructor(){super(...arguments),this.type="tref"}getText(){var e=this.getHrefAttribute().getDefinition();if(e){var t=e.children[0];if(t)return t.getText()}return""}}class Ue extends ge{constructor(e,t,s){super(e,t,s),this.type="a";var{childNodes:n}=t,r=n[0],o=n.length>0&&Array.from(n).every(e=>3===e.nodeType);this.hasText=o,this.text=o?this.getTextFromNode(r):""}getText(){return this.text}renderChildren(e){if(this.hasText){super.renderChildren(e);var{document:t,x:s,y:n}=this,{mouse:r}=t.screen,o=new U(t,"fontSize",ce.parse(t.ctx.font).fontSize);r.isWorking()&&r.checkBoundingBox(this,new fe(s,n-o.getPixels("y"),s+this.measureText(e),n))}else if(this.children.length>0){var i=new Ee(this.document,null);i.children=this.children,i.parent=this,i.render(e)}}onClick(){var{window:e}=this.document;e&&e.open(this.getHrefAttribute().getString())}onMouseMove(){this.document.ctx.canvas.style.cursor="pointer"}}function He(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function Xe(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?He(Object(s),!0).forEach((function(t){i()(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):He(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}class Ye extends ge{constructor(e,t,s){super(e,t,s),this.type="textPath",this.textWidth=0,this.textHeight=0,this.pathLength=-1,this.glyphInfo=null,this.letterSpacingCache=[],this.measuresCache=new Map([["",0]]);var n=this.getHrefAttribute().getDefinition();this.text=this.getTextFromNode(),this.dataArray=this.parsePathData(n)}getText(){return this.text}path(e){var{dataArray:t}=this;e&&e.beginPath(),t.forEach(t=>{var{type:s,points:n}=t;switch(s){case he.LINE_TO:e&&e.lineTo(n[0],n[1]);break;case he.MOVE_TO:e&&e.moveTo(n[0],n[1]);break;case he.CURVE_TO:e&&e.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5]);break;case he.QUAD_TO:e&&e.quadraticCurveTo(n[0],n[1],n[2],n[3]);break;case he.ARC:var[r,o,i,a,d,l,u,c]=n,f=i>a?i:a,h=i>a?1:i/a,m=i>a?a/i:1;e&&(e.translate(r,o),e.rotate(u),e.scale(h,m),e.arc(0,0,f,d,d+l,Boolean(1-c)),e.scale(1/h,1/m),e.rotate(-u),e.translate(-r,-o));break;case he.CLOSE_PATH:e&&e.closePath()}})}renderChildren(e){this.setTextData(e),e.save();var t=this.parent.getStyle("text-decoration").getString(),s=this.getFontSize(),{glyphInfo:n}=this,r=e.fillStyle;"underline"===t&&e.beginPath(),n.forEach((n,r)=>{var{p0:o,p1:i,rotation:a,text:d}=n;e.save(),e.translate(o.x,o.y),e.rotate(a),e.fillStyle&&e.fillText(d,0,0),e.strokeStyle&&e.strokeText(d,0,0),e.restore(),"underline"===t&&(0===r&&e.moveTo(o.x,o.y+s/8),e.lineTo(i.x,i.y+s/5))}),"underline"===t&&(e.lineWidth=s/20,e.strokeStyle=r,e.stroke(),e.closePath()),e.restore()}getLetterSpacingAt(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0;return this.letterSpacingCache[e]||0}findSegmentToFitChar(e,t,s,n,r,o,i,a,d){var l=o,u=this.measureText(e,a);" "===a&&"justify"===t&&s<n&&(u+=(n-s)/r),d>-1&&(l+=this.getLetterSpacingAt(d));var c=this.textHeight/20,f=this.getEquidistantPointOnPath(l,c,0),h=this.getEquidistantPointOnPath(l+u,c,0),m={p0:f,p1:h},p=f&&h?Math.atan2(h.y-f.y,h.x-f.x):0;if(i){var j=Math.cos(Math.PI/2+p)*i,g=Math.cos(-p)*i;m.p0=Xe(Xe({},f),{},{x:f.x+j,y:f.y+g}),m.p1=Xe(Xe({},h),{},{x:h.x+j,y:h.y+g})}return{offset:l+=u,segment:m,rotation:p}}measureText(e,t){var{measuresCache:s}=this,n=t||this.getText();if(s.has(n))return s.get(n);var r=this.measureTargetText(e,n);return s.set(n,r),r}setTextData(e){if(!this.glyphInfo){var t=this.getText(),s=t.split(""),n=t.split(" ").length-1,r=this.parent.getAttribute("dx").split().map(e=>e.getPixels("x")),o=this.parent.getAttribute("dy").getPixels("y"),i=this.parent.getStyle("text-anchor").getString("start"),a=this.getStyle("letter-spacing"),d=this.parent.getStyle("letter-spacing"),l=0;a.hasValue()&&"inherit"!==a.getValue()?a.hasValue()&&"initial"!==a.getValue()&&"unset"!==a.getValue()&&(l=a.getPixels()):l=d.getPixels();var u=[],c=t.length;this.letterSpacingCache=u;for(var f=0;f<c;f++)u.push(void 0!==r[f]?r[f]:l);var h=u.reduce((e,t,s)=>0===s?0:e+t||0,0),m=this.measureText(e),p=Math.max(m+h,0);this.textWidth=m,this.textHeight=this.getFontSize(),this.glyphInfo=[];var j=this.getPathLength(),g=this.getStyle("startOffset").getNumber(0)*j,_=0;"middle"!==i&&"center"!==i||(_=-p/2),"end"!==i&&"right"!==i||(_=-p),_+=g,s.forEach((t,r)=>{var{offset:a,segment:d,rotation:l}=this.findSegmentToFitChar(e,i,p,j,n,_,o,t,r);_=a,d.p0&&d.p1&&this.glyphInfo.push({text:s[r],p0:d.p0,p1:d.p1,rotation:l})})}}parsePathData(e){if(this.pathLength=-1,!e)return[];var t=[],{pathParser:s}=e;for(s.reset();!s.isEnd();){var{current:n}=s,r=n?n.x:0,o=n?n.y:0,i=s.next(),a=i.type,d=[];switch(i.type){case he.MOVE_TO:this.pathM(s,d);break;case he.LINE_TO:a=this.pathL(s,d);break;case he.HORIZ_LINE_TO:a=this.pathH(s,d);break;case he.VERT_LINE_TO:a=this.pathV(s,d);break;case he.CURVE_TO:this.pathC(s,d);break;case he.SMOOTH_CURVE_TO:a=this.pathS(s,d);break;case he.QUAD_TO:this.pathQ(s,d);break;case he.SMOOTH_QUAD_TO:a=this.pathT(s,d);break;case he.ARC:d=this.pathA(s);break;case he.CLOSE_PATH:pe.pathZ(s)}i.type!==he.CLOSE_PATH?t.push({type:a,points:d,start:{x:r,y:o},pathLength:this.calcLength(r,o,a,d)}):t.push({type:he.CLOSE_PATH,points:[],pathLength:0})}return t}pathM(e,t){var{x:s,y:n}=pe.pathM(e).point;t.push(s,n)}pathL(e,t){var{x:s,y:n}=pe.pathL(e).point;return t.push(s,n),he.LINE_TO}pathH(e,t){var{x:s,y:n}=pe.pathH(e).point;return t.push(s,n),he.LINE_TO}pathV(e,t){var{x:s,y:n}=pe.pathV(e).point;return t.push(s,n),he.LINE_TO}pathC(e,t){var{point:s,controlPoint:n,currentPoint:r}=pe.pathC(e);t.push(s.x,s.y,n.x,n.y,r.x,r.y)}pathS(e,t){var{point:s,controlPoint:n,currentPoint:r}=pe.pathS(e);return t.push(s.x,s.y,n.x,n.y,r.x,r.y),he.CURVE_TO}pathQ(e,t){var{controlPoint:s,currentPoint:n}=pe.pathQ(e);t.push(s.x,s.y,n.x,n.y)}pathT(e,t){var{controlPoint:s,currentPoint:n}=pe.pathT(e);return t.push(s.x,s.y,n.x,n.y),he.QUAD_TO}pathA(e){var{rX:t,rY:s,sweepFlag:n,xAxisRotation:r,centp:o,a1:i,ad:a}=pe.pathA(e);return 0===n&&a>0&&(a-=2*Math.PI),1===n&&a<0&&(a+=2*Math.PI),[o.x,o.y,t,s,i,a,r,n]}calcLength(e,t,s,n){var r=0,o=null,i=null,a=0;switch(s){case he.LINE_TO:return this.getLineLength(e,t,n[0],n[1]);case he.CURVE_TO:for(r=0,o=this.getPointOnCubicBezier(0,e,t,n[0],n[1],n[2],n[3],n[4],n[5]),a=.01;a<=1;a+=.01)i=this.getPointOnCubicBezier(a,e,t,n[0],n[1],n[2],n[3],n[4],n[5]),r+=this.getLineLength(o.x,o.y,i.x,i.y),o=i;return r;case he.QUAD_TO:for(r=0,o=this.getPointOnQuadraticBezier(0,e,t,n[0],n[1],n[2],n[3]),a=.01;a<=1;a+=.01)i=this.getPointOnQuadraticBezier(a,e,t,n[0],n[1],n[2],n[3]),r+=this.getLineLength(o.x,o.y,i.x,i.y),o=i;return r;case he.ARC:r=0;var d=n[4],l=n[5],u=n[4]+l,c=Math.PI/180;if(Math.abs(d-u)<c&&(c=Math.abs(d-u)),o=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],d,0),l<0)for(a=d-c;a>u;a-=c)i=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],a,0),r+=this.getLineLength(o.x,o.y,i.x,i.y),o=i;else for(a=d+c;a<u;a+=c)i=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],a,0),r+=this.getLineLength(o.x,o.y,i.x,i.y),o=i;return i=this.getPointOnEllipticalArc(n[0],n[1],n[2],n[3],u,0),r+=this.getLineLength(o.x,o.y,i.x,i.y)}return 0}getPointOnLine(e,t,s,n,r){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:t,i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:s,a=(r-s)/(n-t+M),d=Math.sqrt(e*e/(1+a*a));n<t&&(d*=-1);var l=a*d,u=null;if(n===t)u={x:o,y:i+l};else if((i-s)/(o-t+M)===a)u={x:o+d,y:i+l};else{var c,f,h=this.getLineLength(t,s,n,r);if(h<M)return null;var m=(o-t)*(n-t)+(i-s)*(r-s);c=t+(m/=h*h)*(n-t),f=s+m*(r-s);var p=this.getLineLength(o,i,c,f),j=Math.sqrt(e*e-p*p);d=Math.sqrt(j*j/(1+a*a)),n<t&&(d*=-1),u={x:c+d,y:f+(l=a*d)}}return u}getPointOnPath(e){var t=this.getPathLength(),s=0,n=null;if(e<-5e-5||e-5e-5>t)return null;var{dataArray:r}=this;for(var o of r){if(!o||!(o.pathLength<5e-5||s+o.pathLength+5e-5<e)){var i=e-s,a=0;switch(o.type){case he.LINE_TO:n=this.getPointOnLine(i,o.start.x,o.start.y,o.points[0],o.points[1],o.start.x,o.start.y);break;case he.ARC:var d=o.points[4],l=o.points[5],u=o.points[4]+l;if(a=d+i/o.pathLength*l,l<0&&a<u||l>=0&&a>u)break;n=this.getPointOnEllipticalArc(o.points[0],o.points[1],o.points[2],o.points[3],a,o.points[6]);break;case he.CURVE_TO:(a=i/o.pathLength)>1&&(a=1),n=this.getPointOnCubicBezier(a,o.start.x,o.start.y,o.points[0],o.points[1],o.points[2],o.points[3],o.points[4],o.points[5]);break;case he.QUAD_TO:(a=i/o.pathLength)>1&&(a=1),n=this.getPointOnQuadraticBezier(a,o.start.x,o.start.y,o.points[0],o.points[1],o.points[2],o.points[3])}if(n)return n;break}s+=o.pathLength}return null}getLineLength(e,t,s,n){return Math.sqrt((s-e)*(s-e)+(n-t)*(n-t))}getPathLength(){return-1===this.pathLength&&(this.pathLength=this.dataArray.reduce((e,t)=>t.pathLength>0?e+t.pathLength:e,0)),this.pathLength}getPointOnCubicBezier(e,t,s,n,r,o,i,a,d){return{x:a*V(e)+o*I(e)+n*L(e)+t*D(e),y:d*V(e)+i*I(e)+r*L(e)+s*D(e)}}getPointOnQuadraticBezier(e,t,s,n,r,o,i){return{x:o*B(e)+n*F(e)+t*z(e),y:i*B(e)+r*F(e)+s*z(e)}}getPointOnEllipticalArc(e,t,s,n,r,o){var i=Math.cos(o),a=Math.sin(o),d=s*Math.cos(r),l=n*Math.sin(r);return{x:e+(d*i-l*a),y:t+(d*a+l*i)}}buildEquidistantCache(e,t){var s=this.getPathLength(),n=t||.25,r=e||s/100;if(!this.equidistantCache||this.equidistantCache.step!==r||this.equidistantCache.precision!==n){this.equidistantCache={step:r,precision:n,points:[]};for(var o=0,i=0;i<=s;i+=n){var a=this.getPointOnPath(i),d=this.getPointOnPath(i+n);a&&d&&((o+=this.getLineLength(a.x,a.y,d.x,d.y))>=r&&(this.equidistantCache.points.push({x:a.x,y:a.y,distance:i}),o-=r))}}}getEquidistantPointOnPath(e,t,s){if(this.buildEquidistantCache(t,s),e<0||e-this.getPathLength()>5e-5)return null;var n=Math.round(e/this.getPathLength()*(this.equidistantCache.points.length-1));return this.equidistantCache.points[n]||null}}var Ge=/^\s*data:(([^/,;]+\/[^/,;]+)(?:;([^,;=]+=[^,;=]+))?)?(?:;(base64))?,(.*)$/i;class qe extends me{constructor(e,t,s){super(e,t,s),this.type="image",this.loaded=!1;var n=this.getHrefAttribute().getString();if(n){var r=n.endsWith(".svg")||/^\s*data:image\/svg\+xml/i.test(n);e.images.push(this),r?this.loadSvg(n):this.loadImage(n),this.isSvg=r}}loadImage(e){var t=this;return r()((function*(){try{var s=yield t.document.createImage(e);t.image=s}catch(t){console.error('Error while loading image "'.concat(e,'":'),t)}t.loaded=!0}))()}loadSvg(e){var t=this;return r()((function*(){var s=Ge.exec(e);if(s){var n=s[5];"base64"===s[4]?t.image=atob(n):t.image=decodeURIComponent(n)}else try{var r=yield t.document.fetch(e),o=yield r.text();t.image=o}catch(t){console.error('Error while loading image "'.concat(e,'":'),t)}t.loaded=!0}))()}renderChildren(e){var{document:t,image:s,loaded:n}=this,r=this.getAttribute("x").getPixels("x"),o=this.getAttribute("y").getPixels("y"),i=this.getStyle("width").getPixels("x"),a=this.getStyle("height").getPixels("y");if(n&&s&&i&&a){if(e.save(),e.translate(r,o),this.isSvg){var d=t.canvg.forkString(e,this.image,{ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0,ignoreClear:!0,offsetX:0,offsetY:0,scaleWidth:i,scaleHeight:a});d.document.documentElement.parent=this,d.render()}else{var l=this.image;t.setViewBox({ctx:e,aspectRatio:this.getAttribute("preserveAspectRatio").getString(),width:i,desiredWidth:l.width,height:a,desiredHeight:l.height}),this.loaded&&(void 0===l.complete||l.complete)&&e.drawImage(l,0,0)}e.restore()}}getBoundingBox(){var e=this.getAttribute("x").getPixels("x"),t=this.getAttribute("y").getPixels("y"),s=this.getStyle("width").getPixels("x"),n=this.getStyle("height").getPixels("y");return new fe(e,t,e+s,t+n)}}class We extends me{constructor(){super(...arguments),this.type="symbol"}render(e){}}class Qe{constructor(e){this.document=e,this.loaded=!1,e.fonts.push(this)}load(e,t){var s=this;return r()((function*(){try{var{document:n}=s,r=(yield n.canvg.parser.load(t)).getElementsByTagName("font");Array.from(r).forEach(t=>{var s=n.createElement(t);n.definitions[e]=s})}catch(e){console.error('Error while loading font "'.concat(t,'":'),e)}s.loaded=!0}))()}}class $e extends ie{constructor(e,t,s){super(e,t,s),this.type="style",m(Array.from(t.childNodes).map(e=>e.textContent).join("").replace(/(\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm,"").replace(/@import.*;/g,"")).split("}").forEach(t=>{var s=t.trim();if(s){var n=s.split("{"),r=n[0].split(","),o=n[1].split(";");r.forEach(t=>{var s=t.trim();if(s){var n=e.styles[s]||{};if(o.forEach(t=>{var s=t.indexOf(":"),r=t.substr(0,s).trim(),o=t.substr(s+1,t.length-s).trim();r&&o&&(n[r]=new U(e,r,o))}),e.styles[s]=n,e.stylesSpecificity[s]=E(s),"@font-face"===s){var r=n["font-family"].getString().replace(/"|'/g,"");n.src.getString().split(",").forEach(t=>{if(t.indexOf('format("svg")')>0){var s=v(t);s&&new Qe(e).load(r,s)}})}}})}})}}$e.parseExternalUrl=v;class Ze extends me{constructor(){super(...arguments),this.type="use"}setContext(e){super.setContext(e);var t=this.getAttribute("x"),s=this.getAttribute("y");t.hasValue()&&e.translate(t.getPixels("x"),0),s.hasValue()&&e.translate(0,s.getPixels("y"))}path(e){var{element:t}=this;t&&t.path(e)}renderChildren(e){var{document:t,element:s}=this;if(s){var n=s;if("symbol"===s.type&&((n=new ve(t,null)).attributes.viewBox=new U(t,"viewBox",s.getAttribute("viewBox").getString()),n.attributes.preserveAspectRatio=new U(t,"preserveAspectRatio",s.getAttribute("preserveAspectRatio").getString()),n.attributes.overflow=new U(t,"overflow",s.getAttribute("overflow").getString()),n.children=s.children,s.styles.opacity=new U(t,"opacity",this.calculateOpacity())),"svg"===n.type){var r=this.getStyle("width",!1,!0),o=this.getStyle("height",!1,!0);r.hasValue()&&(n.attributes.width=new U(t,"width",r.getString())),o.hasValue()&&(n.attributes.height=new U(t,"height",o.getString()))}var i=n.parent;n.parent=this,n.render(e),n.parent=i}}getBoundingBox(e){var{element:t}=this;return t?t.getBoundingBox(e):null}elementTransform(){var{document:e,element:t}=this;return oe.fromElement(e,t)}get element(){return this.cachedElement||(this.cachedElement=this.getHrefAttribute().getDefinition()),this.cachedElement}}function Ke(e,t,s,n,r,o){return e[s*n*4+4*t+o]}function Je(e,t,s,n,r,o,i){e[s*n*4+4*t+o]=i}function et(e,t,s){return e[t]*s}function tt(e,t,s,n){return t+Math.cos(e)*s+Math.sin(e)*n}class st extends ie{constructor(e,t,s){super(e,t,s),this.type="feColorMatrix";var n=g(this.getAttribute("values").getString());switch(this.getAttribute("type").getString("matrix")){case"saturate":var r=n[0];n=[.213+.787*r,.715-.715*r,.072-.072*r,0,0,.213-.213*r,.715+.285*r,.072-.072*r,0,0,.213-.213*r,.715-.715*r,.072+.928*r,0,0,0,0,0,1,0,0,0,0,0,1];break;case"hueRotate":var o=n[0]*Math.PI/180;n=[tt(o,.213,.787,-.213),tt(o,.715,-.715,-.715),tt(o,.072,-.072,.928),0,0,tt(o,.213,-.213,.143),tt(o,.715,.285,.14),tt(o,.072,-.072,-.283),0,0,tt(o,.213,-.213,-.787),tt(o,.715,-.715,.715),tt(o,.072,.928,.072),0,0,0,0,0,1,0,0,0,0,0,1];break;case"luminanceToAlpha":n=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,.2125,.7154,.0721,0,0,0,0,0,0,1]}this.matrix=n,this.includeOpacity=this.getAttribute("includeOpacity").hasValue()}apply(e,t,s,n,r){for(var{includeOpacity:o,matrix:i}=this,a=e.getImageData(0,0,n,r),d=0;d<r;d++)for(var l=0;l<n;l++){var u=Ke(a.data,l,d,n,0,0),c=Ke(a.data,l,d,n,0,1),f=Ke(a.data,l,d,n,0,2),h=Ke(a.data,l,d,n,0,3),m=et(i,0,u)+et(i,1,c)+et(i,2,f)+et(i,3,h)+et(i,4,1),p=et(i,5,u)+et(i,6,c)+et(i,7,f)+et(i,8,h)+et(i,9,1),j=et(i,10,u)+et(i,11,c)+et(i,12,f)+et(i,13,h)+et(i,14,1),g=et(i,15,u)+et(i,16,c)+et(i,17,f)+et(i,18,h)+et(i,19,1);o&&(m=0,p=0,j=0,g*=h/255),Je(a.data,l,d,n,0,0,m),Je(a.data,l,d,n,0,1,p),Je(a.data,l,d,n,0,2,j),Je(a.data,l,d,n,0,3,g)}e.clearRect(0,0,n,r),e.putImageData(a,0,0)}}class nt extends ie{constructor(){super(...arguments),this.type="mask"}apply(e,t){var{document:s}=this,n=this.getAttribute("x").getPixels("x"),r=this.getAttribute("y").getPixels("y"),o=this.getStyle("width").getPixels("x"),i=this.getStyle("height").getPixels("y");if(!o&&!i){var a=new fe;this.children.forEach(t=>{a.addBoundingBox(t.getBoundingBox(e))}),n=Math.floor(a.x1),r=Math.floor(a.y1),o=Math.floor(a.width),i=Math.floor(a.height)}var d=this.removeStyles(t,nt.ignoreStyles),l=s.createCanvas(n+o,r+i),u=l.getContext("2d");s.screen.setDefaults(u),this.renderChildren(u),new st(s,{nodeType:1,childNodes:[],attributes:[{nodeName:"type",value:"luminanceToAlpha"},{nodeName:"includeOpacity",value:"true"}]}).apply(u,0,0,n+o,r+i);var c=s.createCanvas(n+o,r+i),f=c.getContext("2d");s.screen.setDefaults(f),t.render(f),f.globalCompositeOperation="destination-in",f.fillStyle=u.createPattern(l,"no-repeat"),f.fillRect(0,0,n+o,r+i),e.fillStyle=f.createPattern(c,"no-repeat"),e.fillRect(0,0,n+o,r+i),this.restoreStyles(t,d)}render(e){}}nt.ignoreStyles=["mask","transform","clip-path"];var rt=()=>{};class ot extends ie{constructor(){super(...arguments),this.type="clipPath"}apply(e){var{document:t}=this,s=Reflect.getPrototypeOf(e),{beginPath:n,closePath:r}=e;s&&(s.beginPath=rt,s.closePath=rt),Reflect.apply(n,e,[]),this.children.forEach(n=>{if(void 0!==n.path){var o=void 0!==n.elementTransform?n.elementTransform():null;o||(o=oe.fromElement(t,n)),o&&o.apply(e),n.path(e),s&&(s.closePath=r),o&&o.unapply(e)}}),Reflect.apply(r,e,[]),e.clip(),s&&(s.beginPath=n,s.closePath=r)}render(e){}}class it extends ie{constructor(){super(...arguments),this.type="filter"}apply(e,t){var{document:s,children:n}=this,r=t.getBoundingBox(e);if(r){var o=0,i=0;n.forEach(e=>{var t=e.extraFilterDistance||0;o=Math.max(o,t),i=Math.max(i,t)});var a=Math.floor(r.width),d=Math.floor(r.height),l=a+2*o,u=d+2*i;if(!(l<1||u<1)){var c=Math.floor(r.x),f=Math.floor(r.y),h=this.removeStyles(t,it.ignoreStyles),m=s.createCanvas(l,u),p=m.getContext("2d");s.screen.setDefaults(p),p.translate(-c+o,-f+i),t.render(p),n.forEach(e=>{"function"==typeof e.apply&&e.apply(p,0,0,l,u)}),e.drawImage(m,0,0,l,u,c-o,f-i,l,u),this.restoreStyles(t,h)}}}render(e){}}it.ignoreStyles=["filter","transform","clip-path"];class at extends ie{constructor(e,t,s){super(e,t,s),this.type="feDropShadow",this.addStylesFromStyleDefinition()}apply(e,t,s,n,r){}}class dt extends ie{constructor(){super(...arguments),this.type="feMorphology"}apply(e,t,s,n,r){}}class lt extends ie{constructor(){super(...arguments),this.type="feComposite"}apply(e,t,s,n,r){}}class ut extends ie{constructor(e,t,s){super(e,t,s),this.type="feGaussianBlur",this.blurRadius=Math.floor(this.getAttribute("stdDeviation").getNumber()),this.extraFilterDistance=this.blurRadius}apply(e,t,s,n,r){var{document:o,blurRadius:i}=this,a=o.window?o.window.document.body:null,d=e.canvas;d.id=o.getUniqueId(),a&&(d.style.display="none",a.appendChild(d)),Object(f.canvasRGBA)(d,t,s,n,r,i),a&&a.removeChild(d)}}class ct extends ie{constructor(){super(...arguments),this.type="title"}}class ft extends ie{constructor(){super(...arguments),this.type="desc"}}var ht={svg:ve,rect:xe,circle:be,ellipse:we,line:Se,polyline:Te,polygon:Ae,path:pe,pattern:Oe,marker:Pe,defs:Ce,linearGradient:Ne,radialGradient:ke,stop:Re,animate:Ve,animateColor:Ie,animateTransform:Le,font:De,"font-face":Be,"missing-glyph":Fe,glyph:je,text:ge,tspan:_e,tref:ze,a:Ue,textPath:Ye,image:qe,g:Ee,symbol:We,style:$e,use:Ze,mask:nt,clipPath:ot,filter:it,feDropShadow:at,feMorphology:dt,feComposite:lt,feColorMatrix:st,feGaussianBlur:ut,title:ct,desc:ft};function mt(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function pt(){return(pt=r()((function*(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],s=document.createElement("img");return t&&(s.crossOrigin="Anonymous"),new Promise((t,n)=>{s.onload=()=>{t(s)},s.onerror=(e,t,s,r,o)=>{n(o)},s.src=e})}))).apply(this,arguments)}class jt{constructor(e){var{rootEmSize:t=12,emSize:s=12,createCanvas:n=jt.createCanvas,createImage:r=jt.createImage,anonymousCrossOrigin:o}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.canvg=e,this.definitions={},this.styles={},this.stylesSpecificity={},this.images=[],this.fonts=[],this.emSizeStack=[],this.uniqueId=0,this.screen=e.screen,this.rootEmSize=t,this.emSize=s,this.createCanvas=n,this.createImage=this.bindCreateImage(r,o),this.screen.wait(this.isImagesLoaded.bind(this)),this.screen.wait(this.isFontsLoaded.bind(this))}bindCreateImage(e,t){return"boolean"==typeof t?(s,n)=>e(s,"boolean"==typeof n?n:t):e}get window(){return this.screen.window}get fetch(){return this.screen.fetch}get ctx(){return this.screen.ctx}get emSize(){var{emSizeStack:e}=this;return e[e.length-1]}set emSize(e){var{emSizeStack:t}=this;t.push(e)}popEmSize(){var{emSizeStack:e}=this;e.pop()}getUniqueId(){return"canvg".concat(++this.uniqueId)}isImagesLoaded(){return this.images.every(e=>e.loaded)}isFontsLoaded(){return this.fonts.every(e=>e.loaded)}createDocumentElement(e){var t=this.createElement(e.documentElement);return t.root=!0,t.addStylesFromStyleDefinition(),this.documentElement=t,t}createElement(e){var t=e.nodeName.replace(/^[^:]+:/,""),s=jt.elementTypes[t];return void 0!==s?new s(this,e):new ae(this,e)}createTextNode(e){return new ye(this,e)}setViewBox(e){this.screen.setViewBox(function(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?mt(Object(s),!0).forEach((function(t){i()(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):mt(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}({document:this},e))}}function gt(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),s.push.apply(s,n)}return s}function _t(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?gt(Object(s),!0).forEach((function(t){i()(e,t,s[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):gt(Object(s)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))}))}return e}jt.createCanvas=function(e,t){var s=document.createElement("canvas");return s.width=e,s.height=t,s},jt.createImage=function(e){return pt.apply(this,arguments)},jt.elementTypes=ht;class yt{constructor(e,t){var s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};this.parser=new Z(s),this.screen=new W(e,s),this.options=s;var n=new jt(this,s),r=n.createDocumentElement(t);this.document=n,this.documentElement=r}static from(e,t){var s=arguments;return r()((function*(){var n=s.length>2&&void 0!==s[2]?s[2]:{},r=new Z(n),o=yield r.parse(t);return new yt(e,o,n)}))()}static fromString(e,t){var s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=new Z(s).parseFromString(t);return new yt(e,n,s)}fork(e,t){var s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return yt.from(e,t,_t(_t({},this.options),s))}forkString(e,t){var s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return yt.fromString(e,t,_t(_t({},this.options),s))}ready(){return this.screen.ready()}isReady(){return this.screen.isReady()}render(){var e=arguments,t=this;return r()((function*(){var s=e.length>0&&void 0!==e[0]?e[0]:{};t.start(_t({enableRedraw:!0,ignoreAnimation:!0,ignoreMouse:!0},s)),yield t.ready(),t.stop()}))()}start(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{documentElement:t,screen:s,options:n}=this;s.start(t,_t(_t({enableRedraw:!0},n),e))}stop(){this.screen.stop()}resize(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e,s=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.documentElement.resize(e,t,s)}}}.call(this,s(/*! ./../../../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/a-callable.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),r=s(/*! ../internals/try-to-string */"./node_modules/jspdf/node_modules/core-js/internals/try-to-string.js"),o=TypeError;e.exports=function(e){if(n(e))return e;throw o(r(e)+" is not a function")}},"./node_modules/jspdf/node_modules/core-js/internals/a-constructor.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/a-constructor.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-constructor */"./node_modules/jspdf/node_modules/core-js/internals/is-constructor.js"),r=s(/*! ../internals/try-to-string */"./node_modules/jspdf/node_modules/core-js/internals/try-to-string.js"),o=TypeError;e.exports=function(e){if(n(e))return e;throw o(r(e)+" is not a constructor")}},"./node_modules/jspdf/node_modules/core-js/internals/a-possible-prototype.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/a-possible-prototype.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),r=String,o=TypeError;e.exports=function(e){if("object"==typeof e||n(e))return e;throw o("Can't set "+r(e)+" as a prototype")}},"./node_modules/jspdf/node_modules/core-js/internals/add-to-unscopables.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/add-to-unscopables.js ***!
  \*********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),r=s(/*! ../internals/object-create */"./node_modules/jspdf/node_modules/core-js/internals/object-create.js"),o=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js").f,i=n("unscopables"),a=Array.prototype;void 0===a[i]&&o(a,i,{configurable:!0,value:r(null)}),e.exports=function(e){a[i][e]=!0}},"./node_modules/jspdf/node_modules/core-js/internals/advance-string-index.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/advance-string-index.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/string-multibyte */"./node_modules/jspdf/node_modules/core-js/internals/string-multibyte.js").charAt;e.exports=function(e,t,s){return t+(s?n(e,t).length:1)}},"./node_modules/jspdf/node_modules/core-js/internals/an-instance.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/an-instance.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/object-is-prototype-of */"./node_modules/jspdf/node_modules/core-js/internals/object-is-prototype-of.js"),r=TypeError;e.exports=function(e,t){if(n(t,e))return e;throw r("Incorrect invocation")}},"./node_modules/jspdf/node_modules/core-js/internals/an-object.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/an-object.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),r=String,o=TypeError;e.exports=function(e){if(n(e))return e;throw o(r(e)+" is not an object")}},"./node_modules/jspdf/node_modules/core-js/internals/array-includes.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/array-includes.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-indexed-object */"./node_modules/jspdf/node_modules/core-js/internals/to-indexed-object.js"),r=s(/*! ../internals/to-absolute-index */"./node_modules/jspdf/node_modules/core-js/internals/to-absolute-index.js"),o=s(/*! ../internals/length-of-array-like */"./node_modules/jspdf/node_modules/core-js/internals/length-of-array-like.js"),i=function(e){return function(t,s,i){var a,d=n(t),l=o(d),u=r(i,l);if(e&&s!=s){for(;l>u;)if((a=d[u++])!=a)return!0}else for(;l>u;u++)if((e||u in d)&&d[u]===s)return e||u||0;return!e&&-1}};e.exports={includes:i(!0),indexOf:i(!1)}},"./node_modules/jspdf/node_modules/core-js/internals/array-method-is-strict.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/array-method-is-strict.js ***!
  \*************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js");e.exports=function(e,t){var s=[][e];return!!s&&n((function(){s.call(null,t||function(){return 1},1)}))}},"./node_modules/jspdf/node_modules/core-js/internals/array-reduce.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/array-reduce.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js"),r=s(/*! ../internals/to-object */"./node_modules/jspdf/node_modules/core-js/internals/to-object.js"),o=s(/*! ../internals/indexed-object */"./node_modules/jspdf/node_modules/core-js/internals/indexed-object.js"),i=s(/*! ../internals/length-of-array-like */"./node_modules/jspdf/node_modules/core-js/internals/length-of-array-like.js"),a=TypeError,d=function(e){return function(t,s,d,l){n(s);var u=r(t),c=o(u),f=i(u),h=e?f-1:0,m=e?-1:1;if(d<2)for(;;){if(h in c){l=c[h],h+=m;break}if(h+=m,e?h<0:f<=h)throw a("Reduce of empty array with no initial value")}for(;e?h>=0:f>h;h+=m)h in c&&(l=s(l,c[h],h,u));return l}};e.exports={left:d(!1),right:d(!0)}},"./node_modules/jspdf/node_modules/core-js/internals/array-slice-simple.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/array-slice-simple.js ***!
  \*********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-absolute-index */"./node_modules/jspdf/node_modules/core-js/internals/to-absolute-index.js"),r=s(/*! ../internals/length-of-array-like */"./node_modules/jspdf/node_modules/core-js/internals/length-of-array-like.js"),o=s(/*! ../internals/create-property */"./node_modules/jspdf/node_modules/core-js/internals/create-property.js"),i=Array,a=Math.max;e.exports=function(e,t,s){for(var d=r(e),l=n(t,d),u=n(void 0===s?d:s,d),c=i(a(u-l,0)),f=0;l<u;l++,f++)o(c,f,e[l]);return c.length=f,c}},"./node_modules/jspdf/node_modules/core-js/internals/array-slice.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/array-slice.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js");e.exports=n([].slice)},"./node_modules/jspdf/node_modules/core-js/internals/check-correctness-of-iteration.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/check-correctness-of-iteration.js ***!
  \*********************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("iterator"),r=!1;try{var o=0,i={next:function(){return{done:!!o++}},return:function(){r=!0}};i[n]=function(){return this},Array.from(i,(function(){throw 2}))}catch(e){}e.exports=function(e,t){try{if(!t&&!r)return!1}catch(e){return!1}var s=!1;try{var o={};o[n]=function(){return{next:function(){return{done:s=!0}}}},e(o)}catch(e){}return s}},"./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=n({}.toString),o=n("".slice);e.exports=function(e){return o(r(e),8,-1)}},"./node_modules/jspdf/node_modules/core-js/internals/classof.js":
/*!**********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/classof.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-string-tag-support */"./node_modules/jspdf/node_modules/core-js/internals/to-string-tag-support.js"),r=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),o=s(/*! ../internals/classof-raw */"./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js"),i=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("toStringTag"),a=Object,d="Arguments"===o(function(){return arguments}());e.exports=n?o:function(e){var t,s,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(s=function(e,t){try{return e[t]}catch(e){}}(t=a(e),i))?s:d?o(t):"Object"===(n=o(t))&&r(t.callee)?"Arguments":n}},"./node_modules/jspdf/node_modules/core-js/internals/copy-constructor-properties.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/copy-constructor-properties.js ***!
  \******************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),r=s(/*! ../internals/own-keys */"./node_modules/jspdf/node_modules/core-js/internals/own-keys.js"),o=s(/*! ../internals/object-get-own-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-descriptor.js"),i=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js");e.exports=function(e,t,s){for(var a=r(t),d=i.f,l=o.f,u=0;u<a.length;u++){var c=a[u];n(e,c)||s&&n(s,c)||d(e,c,l(t,c))}}},"./node_modules/jspdf/node_modules/core-js/internals/correct-is-regexp-logic.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/correct-is-regexp-logic.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(s){try{return t[n]=!1,"/./"[e](t)}catch(e){}}return!1}},"./node_modules/jspdf/node_modules/core-js/internals/correct-prototype-getter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/correct-prototype-getter.js ***!
  \***************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js");e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},"./node_modules/jspdf/node_modules/core-js/internals/create-iter-result-object.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/create-iter-result-object.js ***!
  \****************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports=function(e,t){return{value:e,done:t}}},"./node_modules/jspdf/node_modules/core-js/internals/create-non-enumerable-property.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \*********************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),r=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js"),o=s(/*! ../internals/create-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/create-property-descriptor.js");e.exports=n?function(e,t,s){return r.f(e,t,o(1,s))}:function(e,t,s){return e[t]=s,e}},"./node_modules/jspdf/node_modules/core-js/internals/create-property-descriptor.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/create-property-descriptor.js ***!
  \*****************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},"./node_modules/jspdf/node_modules/core-js/internals/create-property.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/create-property.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-property-key */"./node_modules/jspdf/node_modules/core-js/internals/to-property-key.js"),r=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js"),o=s(/*! ../internals/create-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/create-property-descriptor.js");e.exports=function(e,t,s){var i=n(t);i in e?r.f(e,i,o(0,s)):e[i]=s}},"./node_modules/jspdf/node_modules/core-js/internals/define-built-in-accessor.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/define-built-in-accessor.js ***!
  \***************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/make-built-in */"./node_modules/jspdf/node_modules/core-js/internals/make-built-in.js"),r=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js");e.exports=function(e,t,s){return s.get&&n(s.get,t,{getter:!0}),s.set&&n(s.set,t,{setter:!0}),r.f(e,t,s)}},"./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),r=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js"),o=s(/*! ../internals/make-built-in */"./node_modules/jspdf/node_modules/core-js/internals/make-built-in.js"),i=s(/*! ../internals/define-global-property */"./node_modules/jspdf/node_modules/core-js/internals/define-global-property.js");e.exports=function(e,t,s,a){a||(a={});var d=a.enumerable,l=void 0!==a.name?a.name:t;if(n(s)&&o(s,l,a),a.global)d?e[t]=s:i(t,s);else{try{a.unsafe?e[t]&&(d=!0):delete e[t]}catch(e){}d?e[t]=s:r.f(e,t,{value:s,enumerable:!1,configurable:!a.nonConfigurable,writable:!a.nonWritable})}return e}},"./node_modules/jspdf/node_modules/core-js/internals/define-global-property.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/define-global-property.js ***!
  \*************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=Object.defineProperty;e.exports=function(e,t){try{r(n,e,{value:t,configurable:!0,writable:!0})}catch(s){n[e]=t}return t}},"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/descriptors.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js");e.exports=!n((function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}))},"./node_modules/jspdf/node_modules/core-js/internals/document-all.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/document-all.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n="object"==typeof document&&document.all,r=void 0===n&&void 0!==n;e.exports={all:n,IS_HTMLDDA:r}},"./node_modules/jspdf/node_modules/core-js/internals/document-create-element.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/document-create-element.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),o=n.document,i=r(o)&&r(o.createElement);e.exports=function(e){return i?o.createElement(e):{}}},"./node_modules/jspdf/node_modules/core-js/internals/dom-iterables.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/dom-iterables.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},"./node_modules/jspdf/node_modules/core-js/internals/dom-token-list-prototype.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/dom-token-list-prototype.js ***!
  \***************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/document-create-element */"./node_modules/jspdf/node_modules/core-js/internals/document-create-element.js")("span").classList,r=n&&n.constructor&&n.constructor.prototype;e.exports=r===Object.prototype?void 0:r},"./node_modules/jspdf/node_modules/core-js/internals/engine-is-browser.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/engine-is-browser.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/engine-is-deno */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-deno.js"),r=s(/*! ../internals/engine-is-node */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-node.js");e.exports=!n&&!r&&"object"==typeof window&&"object"==typeof document},"./node_modules/jspdf/node_modules/core-js/internals/engine-is-deno.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/engine-is-deno.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},"./node_modules/jspdf/node_modules/core-js/internals/engine-is-ios-pebble.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/engine-is-ios-pebble.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/engine-user-agent */"./node_modules/jspdf/node_modules/core-js/internals/engine-user-agent.js");e.exports=/ipad|iphone|ipod/i.test(n)&&"undefined"!=typeof Pebble},"./node_modules/jspdf/node_modules/core-js/internals/engine-is-ios.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/engine-is-ios.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/engine-user-agent */"./node_modules/jspdf/node_modules/core-js/internals/engine-user-agent.js");e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},"./node_modules/jspdf/node_modules/core-js/internals/engine-is-node.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/engine-is-node.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/classof-raw */"./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js");e.exports="process"===r(n.process)},"./node_modules/jspdf/node_modules/core-js/internals/engine-is-webos-webkit.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/engine-is-webos-webkit.js ***!
  \*************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/engine-user-agent */"./node_modules/jspdf/node_modules/core-js/internals/engine-user-agent.js");e.exports=/web0s(?!.*chrome)/i.test(n)},"./node_modules/jspdf/node_modules/core-js/internals/engine-user-agent.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/engine-user-agent.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},"./node_modules/jspdf/node_modules/core-js/internals/engine-v8-version.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/engine-v8-version.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r,o=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),i=s(/*! ../internals/engine-user-agent */"./node_modules/jspdf/node_modules/core-js/internals/engine-user-agent.js"),a=o.process,d=o.Deno,l=a&&a.versions||d&&d.version,u=l&&l.v8;u&&(r=(n=u.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!r&&i&&(!(n=i.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=i.match(/Chrome\/(\d+)/))&&(r=+n[1]),e.exports=r},"./node_modules/jspdf/node_modules/core-js/internals/enum-bug-keys.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/enum-bug-keys.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},"./node_modules/jspdf/node_modules/core-js/internals/export.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/export.js ***!
  \*********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/object-get-own-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-descriptor.js").f,o=s(/*! ../internals/create-non-enumerable-property */"./node_modules/jspdf/node_modules/core-js/internals/create-non-enumerable-property.js"),i=s(/*! ../internals/define-built-in */"./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js"),a=s(/*! ../internals/define-global-property */"./node_modules/jspdf/node_modules/core-js/internals/define-global-property.js"),d=s(/*! ../internals/copy-constructor-properties */"./node_modules/jspdf/node_modules/core-js/internals/copy-constructor-properties.js"),l=s(/*! ../internals/is-forced */"./node_modules/jspdf/node_modules/core-js/internals/is-forced.js");e.exports=function(e,t){var s,u,c,f,h,m=e.target,p=e.global,j=e.stat;if(s=p?n:j?n[m]||a(m,{}):(n[m]||{}).prototype)for(u in t){if(f=t[u],c=e.dontCallGetSet?(h=r(s,u))&&h.value:s[u],!l(p?u:m+(j?".":"#")+u,e.forced)&&void 0!==c){if(typeof f==typeof c)continue;d(f,c)}(e.sham||c&&c.sham)&&o(f,"sham",!0),i(s,u,f,e)}}},"./node_modules/jspdf/node_modules/core-js/internals/fails.js":
/*!********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/fails.js ***!
  \********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports=function(e){try{return!!e()}catch(e){return!0}}},"./node_modules/jspdf/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js ***!
  \*************************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";s(/*! ../modules/es.regexp.exec */"./node_modules/jspdf/node_modules/core-js/modules/es.regexp.exec.js");var n=s(/*! ../internals/function-uncurry-this-clause */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-clause.js"),r=s(/*! ../internals/define-built-in */"./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js"),o=s(/*! ../internals/regexp-exec */"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec.js"),i=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),a=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),d=s(/*! ../internals/create-non-enumerable-property */"./node_modules/jspdf/node_modules/core-js/internals/create-non-enumerable-property.js"),l=a("species"),u=RegExp.prototype;e.exports=function(e,t,s,c){var f=a(e),h=!i((function(){var t={};return t[f]=function(){return 7},7!==""[e](t)})),m=h&&!i((function(){var t=!1,s=/a/;return"split"===e&&((s={}).constructor={},s.constructor[l]=function(){return s},s.flags="",s[f]=/./[f]),s.exec=function(){return t=!0,null},s[f](""),!t}));if(!h||!m||s){var p=n(/./[f]),j=t(f,""[e],(function(e,t,s,r,i){var a=n(e),d=t.exec;return d===o||d===u.exec?h&&!i?{done:!0,value:p(t,s,r)}:{done:!0,value:a(s,t,r)}:{done:!1}}));r(String.prototype,e,j[0]),r(u,f,j[1])}c&&d(u[f],"sham",!0)}},"./node_modules/jspdf/node_modules/core-js/internals/function-apply.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/function-apply.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-bind-native */"./node_modules/jspdf/node_modules/core-js/internals/function-bind-native.js"),r=Function.prototype,o=r.apply,i=r.call;e.exports="object"==typeof Reflect&&Reflect.apply||(n?i.bind(o):function(){return i.apply(o,arguments)})},"./node_modules/jspdf/node_modules/core-js/internals/function-bind-context.js":
/*!************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/function-bind-context.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this-clause */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-clause.js"),r=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js"),o=s(/*! ../internals/function-bind-native */"./node_modules/jspdf/node_modules/core-js/internals/function-bind-native.js"),i=n(n.bind);e.exports=function(e,t){return r(e),void 0===t?e:o?i(e,t):function(){return e.apply(t,arguments)}}},"./node_modules/jspdf/node_modules/core-js/internals/function-bind-native.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/function-bind-native.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js");e.exports=!n((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},"./node_modules/jspdf/node_modules/core-js/internals/function-call.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/function-call.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-bind-native */"./node_modules/jspdf/node_modules/core-js/internals/function-bind-native.js"),r=Function.prototype.call;e.exports=n?r.bind(r):function(){return r.apply(r,arguments)}},"./node_modules/jspdf/node_modules/core-js/internals/function-name.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/function-name.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),r=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),o=Function.prototype,i=n&&Object.getOwnPropertyDescriptor,a=r(o,"name"),d=a&&"something"===function(){}.name,l=a&&(!n||n&&i(o,"name").configurable);e.exports={EXISTS:a,PROPER:d,CONFIGURABLE:l}},"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-accessor.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-accessor.js ***!
  \*********************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js");e.exports=function(e,t,s){try{return n(r(Object.getOwnPropertyDescriptor(e,t)[s]))}catch(e){}}},"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-clause.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-clause.js ***!
  \*******************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/classof-raw */"./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js"),r=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js");e.exports=function(e){if("Function"===n(e))return r(e)}},"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js":
/*!************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-bind-native */"./node_modules/jspdf/node_modules/core-js/internals/function-bind-native.js"),r=Function.prototype,o=r.call,i=n&&r.bind.bind(o,o);e.exports=n?i:function(e){return function(){return o.apply(e,arguments)}}},"./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),o=function(e){return r(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?o(n[e]):n[e]&&n[e][t]}},"./node_modules/jspdf/node_modules/core-js/internals/get-iterator-method.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/get-iterator-method.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/classof */"./node_modules/jspdf/node_modules/core-js/internals/classof.js"),r=s(/*! ../internals/get-method */"./node_modules/jspdf/node_modules/core-js/internals/get-method.js"),o=s(/*! ../internals/is-null-or-undefined */"./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js"),i=s(/*! ../internals/iterators */"./node_modules/jspdf/node_modules/core-js/internals/iterators.js"),a=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("iterator");e.exports=function(e){if(!o(e))return r(e,a)||r(e,"@@iterator")||i[n(e)]}},"./node_modules/jspdf/node_modules/core-js/internals/get-iterator.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/get-iterator.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),r=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js"),o=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),i=s(/*! ../internals/try-to-string */"./node_modules/jspdf/node_modules/core-js/internals/try-to-string.js"),a=s(/*! ../internals/get-iterator-method */"./node_modules/jspdf/node_modules/core-js/internals/get-iterator-method.js"),d=TypeError;e.exports=function(e,t){var s=arguments.length<2?a(e):t;if(r(s))return o(n(s,e));throw d(i(e)+" is not iterable")}},"./node_modules/jspdf/node_modules/core-js/internals/get-method.js":
/*!*************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/get-method.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js"),r=s(/*! ../internals/is-null-or-undefined */"./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js");e.exports=function(e,t){var s=e[t];return r(s)?void 0:n(s)}},"./node_modules/jspdf/node_modules/core-js/internals/get-substitution.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/get-substitution.js ***!
  \*******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/to-object */"./node_modules/jspdf/node_modules/core-js/internals/to-object.js"),o=Math.floor,i=n("".charAt),a=n("".replace),d=n("".slice),l=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,s,n,c,f){var h=s+e.length,m=n.length,p=u;return void 0!==c&&(c=r(c),p=l),a(f,p,(function(r,a){var l;switch(i(a,0)){case"$":return"$";case"&":return e;case"`":return d(t,0,s);case"'":return d(t,h);case"<":l=c[d(a,1,-1)];break;default:var u=+a;if(0===u)return r;if(u>m){var f=o(u/10);return 0===f?r:f<=m?void 0===n[f-1]?i(a,1):n[f-1]+i(a,1):r}l=n[u-1]}return void 0===l?"":l}))}},"./node_modules/jspdf/node_modules/core-js/internals/global.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/global.js ***!
  \*********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";(function(t){var s=function(e){return e&&e.Math===Math&&e};e.exports=s("object"==typeof globalThis&&globalThis)||s("object"==typeof window&&window)||s("object"==typeof self&&self)||s("object"==typeof t&&t)||function(){return this}()||this||Function("return this")()}).call(this,s(/*! ./../../../../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js ***!
  \*******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/to-object */"./node_modules/jspdf/node_modules/core-js/internals/to-object.js"),o=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return o(r(e),t)}},"./node_modules/jspdf/node_modules/core-js/internals/hidden-keys.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/hidden-keys.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={}},"./node_modules/jspdf/node_modules/core-js/internals/host-report-errors.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/host-report-errors.js ***!
  \*********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports=function(e,t){try{1===arguments.length?console.error(e):console.error(e,t)}catch(e){}}},"./node_modules/jspdf/node_modules/core-js/internals/html.js":
/*!*******************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/html.js ***!
  \*******************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/get-built-in */"./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js");e.exports=n("document","documentElement")},"./node_modules/jspdf/node_modules/core-js/internals/ie8-dom-define.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/ie8-dom-define.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),r=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),o=s(/*! ../internals/document-create-element */"./node_modules/jspdf/node_modules/core-js/internals/document-create-element.js");e.exports=!n&&!r((function(){return 7!==Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},"./node_modules/jspdf/node_modules/core-js/internals/indexed-object.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/indexed-object.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),o=s(/*! ../internals/classof-raw */"./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js"),i=Object,a=n("".split);e.exports=r((function(){return!i("z").propertyIsEnumerable(0)}))?function(e){return"String"===o(e)?a(e,""):i(e)}:i},"./node_modules/jspdf/node_modules/core-js/internals/inspect-source.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/inspect-source.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),o=s(/*! ../internals/shared-store */"./node_modules/jspdf/node_modules/core-js/internals/shared-store.js"),i=n(Function.toString);r(o.inspectSource)||(o.inspectSource=function(e){return i(e)}),e.exports=o.inspectSource},"./node_modules/jspdf/node_modules/core-js/internals/internal-state.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/internal-state.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r,o,i=s(/*! ../internals/weak-map-basic-detection */"./node_modules/jspdf/node_modules/core-js/internals/weak-map-basic-detection.js"),a=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),d=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),l=s(/*! ../internals/create-non-enumerable-property */"./node_modules/jspdf/node_modules/core-js/internals/create-non-enumerable-property.js"),u=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),c=s(/*! ../internals/shared-store */"./node_modules/jspdf/node_modules/core-js/internals/shared-store.js"),f=s(/*! ../internals/shared-key */"./node_modules/jspdf/node_modules/core-js/internals/shared-key.js"),h=s(/*! ../internals/hidden-keys */"./node_modules/jspdf/node_modules/core-js/internals/hidden-keys.js"),m=a.TypeError,p=a.WeakMap;if(i||c.state){var j=c.state||(c.state=new p);j.get=j.get,j.has=j.has,j.set=j.set,n=function(e,t){if(j.has(e))throw m("Object already initialized");return t.facade=e,j.set(e,t),t},r=function(e){return j.get(e)||{}},o=function(e){return j.has(e)}}else{var g=f("state");h[g]=!0,n=function(e,t){if(u(e,g))throw m("Object already initialized");return t.facade=e,l(e,g,t),t},r=function(e){return u(e,g)?e[g]:{}},o=function(e){return u(e,g)}}e.exports={set:n,get:r,has:o,enforce:function(e){return o(e)?r(e):n(e,{})},getterFor:function(e){return function(t){var s;if(!d(t)||(s=r(t)).type!==e)throw m("Incompatible receiver, "+e+" required");return s}}}},"./node_modules/jspdf/node_modules/core-js/internals/is-array-iterator-method.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-array-iterator-method.js ***!
  \***************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),r=s(/*! ../internals/iterators */"./node_modules/jspdf/node_modules/core-js/internals/iterators.js"),o=n("iterator"),i=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||i[o]===e)}},"./node_modules/jspdf/node_modules/core-js/internals/is-array.js":
/*!***********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-array.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/classof-raw */"./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js");e.exports=Array.isArray||function(e){return"Array"===n(e)}},"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-callable.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/document-all */"./node_modules/jspdf/node_modules/core-js/internals/document-all.js"),r=n.all;e.exports=n.IS_HTMLDDA?function(e){return"function"==typeof e||e===r}:function(e){return"function"==typeof e}},"./node_modules/jspdf/node_modules/core-js/internals/is-constructor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-constructor.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),o=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),i=s(/*! ../internals/classof */"./node_modules/jspdf/node_modules/core-js/internals/classof.js"),a=s(/*! ../internals/get-built-in */"./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js"),d=s(/*! ../internals/inspect-source */"./node_modules/jspdf/node_modules/core-js/internals/inspect-source.js"),l=function(){},u=[],c=a("Reflect","construct"),f=/^\s*(?:class|function)\b/,h=n(f.exec),m=!f.exec(l),p=function(e){if(!o(e))return!1;try{return c(l,u,e),!0}catch(e){return!1}},j=function(e){if(!o(e))return!1;switch(i(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return m||!!h(f,d(e))}catch(e){return!0}};j.sham=!0,e.exports=!c||r((function(){var e;return p(p.call)||!p(Object)||!p((function(){e=!0}))||e}))?j:p},"./node_modules/jspdf/node_modules/core-js/internals/is-forced.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-forced.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),r=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),o=/#|\.prototype\./,i=function(e,t){var s=d[a(e)];return s===u||s!==l&&(r(t)?n(t):!!t)},a=i.normalize=function(e){return String(e).replace(o,".").toLowerCase()},d=i.data={},l=i.NATIVE="N",u=i.POLYFILL="P";e.exports=i},"./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports=function(e){return null==e}},"./node_modules/jspdf/node_modules/core-js/internals/is-object.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-object.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),r=s(/*! ../internals/document-all */"./node_modules/jspdf/node_modules/core-js/internals/document-all.js"),o=r.all;e.exports=r.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:n(e)||e===o}:function(e){return"object"==typeof e?null!==e:n(e)}},"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js":
/*!**********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-pure.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports=!1},"./node_modules/jspdf/node_modules/core-js/internals/is-regexp.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-regexp.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),r=s(/*! ../internals/classof-raw */"./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js"),o=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[o])?!!t:"RegExp"===r(e))}},"./node_modules/jspdf/node_modules/core-js/internals/is-symbol.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/is-symbol.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/get-built-in */"./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js"),r=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),o=s(/*! ../internals/object-is-prototype-of */"./node_modules/jspdf/node_modules/core-js/internals/object-is-prototype-of.js"),i=s(/*! ../internals/use-symbol-as-uid */"./node_modules/jspdf/node_modules/core-js/internals/use-symbol-as-uid.js"),a=Object;e.exports=i?function(e){return"symbol"==typeof e}:function(e){var t=n("Symbol");return r(t)&&o(t.prototype,a(e))}},"./node_modules/jspdf/node_modules/core-js/internals/iterate.js":
/*!**********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/iterate.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-bind-context */"./node_modules/jspdf/node_modules/core-js/internals/function-bind-context.js"),r=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),o=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),i=s(/*! ../internals/try-to-string */"./node_modules/jspdf/node_modules/core-js/internals/try-to-string.js"),a=s(/*! ../internals/is-array-iterator-method */"./node_modules/jspdf/node_modules/core-js/internals/is-array-iterator-method.js"),d=s(/*! ../internals/length-of-array-like */"./node_modules/jspdf/node_modules/core-js/internals/length-of-array-like.js"),l=s(/*! ../internals/object-is-prototype-of */"./node_modules/jspdf/node_modules/core-js/internals/object-is-prototype-of.js"),u=s(/*! ../internals/get-iterator */"./node_modules/jspdf/node_modules/core-js/internals/get-iterator.js"),c=s(/*! ../internals/get-iterator-method */"./node_modules/jspdf/node_modules/core-js/internals/get-iterator-method.js"),f=s(/*! ../internals/iterator-close */"./node_modules/jspdf/node_modules/core-js/internals/iterator-close.js"),h=TypeError,m=function(e,t){this.stopped=e,this.result=t},p=m.prototype;e.exports=function(e,t,s){var j,g,_,y,v,x,b,w=s&&s.that,S=!(!s||!s.AS_ENTRIES),T=!(!s||!s.IS_RECORD),A=!(!s||!s.IS_ITERATOR),O=!(!s||!s.INTERRUPTED),P=n(t,w),C=function(e){return j&&f(j,"normal",e),new m(!0,e)},E=function(e){return S?(o(e),O?P(e[0],e[1],C):P(e[0],e[1])):O?P(e,C):P(e)};if(T)j=e.iterator;else if(A)j=e;else{if(!(g=c(e)))throw h(i(e)+" is not iterable");if(a(g)){for(_=0,y=d(e);y>_;_++)if((v=E(e[_]))&&l(p,v))return v;return new m(!1)}j=u(e,g)}for(x=T?e.next:j.next;!(b=r(x,j)).done;){try{v=E(b.value)}catch(e){f(j,"throw",e)}if("object"==typeof v&&v&&l(p,v))return v}return new m(!1)}},"./node_modules/jspdf/node_modules/core-js/internals/iterator-close.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/iterator-close.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),r=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),o=s(/*! ../internals/get-method */"./node_modules/jspdf/node_modules/core-js/internals/get-method.js");e.exports=function(e,t,s){var i,a;r(e);try{if(!(i=o(e,"return"))){if("throw"===t)throw s;return s}i=n(i,e)}catch(e){a=!0,i=e}if("throw"===t)throw s;if(a)throw i;return r(i),s}},"./node_modules/jspdf/node_modules/core-js/internals/iterator-create-constructor.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/iterator-create-constructor.js ***!
  \******************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/iterators-core */"./node_modules/jspdf/node_modules/core-js/internals/iterators-core.js").IteratorPrototype,r=s(/*! ../internals/object-create */"./node_modules/jspdf/node_modules/core-js/internals/object-create.js"),o=s(/*! ../internals/create-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/create-property-descriptor.js"),i=s(/*! ../internals/set-to-string-tag */"./node_modules/jspdf/node_modules/core-js/internals/set-to-string-tag.js"),a=s(/*! ../internals/iterators */"./node_modules/jspdf/node_modules/core-js/internals/iterators.js"),d=function(){return this};e.exports=function(e,t,s,l){var u=t+" Iterator";return e.prototype=r(n,{next:o(+!l,s)}),i(e,u,!1,!0),a[u]=d,e}},"./node_modules/jspdf/node_modules/core-js/internals/iterator-define.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/iterator-define.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),o=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),i=s(/*! ../internals/function-name */"./node_modules/jspdf/node_modules/core-js/internals/function-name.js"),a=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),d=s(/*! ../internals/iterator-create-constructor */"./node_modules/jspdf/node_modules/core-js/internals/iterator-create-constructor.js"),l=s(/*! ../internals/object-get-prototype-of */"./node_modules/jspdf/node_modules/core-js/internals/object-get-prototype-of.js"),u=s(/*! ../internals/object-set-prototype-of */"./node_modules/jspdf/node_modules/core-js/internals/object-set-prototype-of.js"),c=s(/*! ../internals/set-to-string-tag */"./node_modules/jspdf/node_modules/core-js/internals/set-to-string-tag.js"),f=s(/*! ../internals/create-non-enumerable-property */"./node_modules/jspdf/node_modules/core-js/internals/create-non-enumerable-property.js"),h=s(/*! ../internals/define-built-in */"./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js"),m=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),p=s(/*! ../internals/iterators */"./node_modules/jspdf/node_modules/core-js/internals/iterators.js"),j=s(/*! ../internals/iterators-core */"./node_modules/jspdf/node_modules/core-js/internals/iterators-core.js"),g=i.PROPER,_=i.CONFIGURABLE,y=j.IteratorPrototype,v=j.BUGGY_SAFARI_ITERATORS,x=m("iterator"),b=function(){return this};e.exports=function(e,t,s,i,m,j,w){d(s,t,i);var S,T,A,O=function(e){if(e===m&&N)return N;if(!v&&e&&e in E)return E[e];switch(e){case"keys":case"values":case"entries":return function(){return new s(this,e)}}return function(){return new s(this)}},P=t+" Iterator",C=!1,E=e.prototype,M=E[x]||E["@@iterator"]||m&&E[m],N=!v&&M||O(m),k="Array"===t&&E.entries||M;if(k&&(S=l(k.call(new e)))!==Object.prototype&&S.next&&(o||l(S)===y||(u?u(S,y):a(S[x])||h(S,x,b)),c(S,P,!0,!0),o&&(p[P]=b)),g&&"values"===m&&M&&"values"!==M.name&&(!o&&_?f(E,"name","values"):(C=!0,N=function(){return r(M,this)})),m)if(T={values:O("values"),keys:j?N:O("keys"),entries:O("entries")},w)for(A in T)(v||C||!(A in E))&&h(E,A,T[A]);else n({target:t,proto:!0,forced:v||C},T);return o&&!w||E[x]===N||h(E,x,N,{name:m}),p[t]=N,T}},"./node_modules/jspdf/node_modules/core-js/internals/iterators-core.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/iterators-core.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r,o,i=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),a=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),d=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),l=s(/*! ../internals/object-create */"./node_modules/jspdf/node_modules/core-js/internals/object-create.js"),u=s(/*! ../internals/object-get-prototype-of */"./node_modules/jspdf/node_modules/core-js/internals/object-get-prototype-of.js"),c=s(/*! ../internals/define-built-in */"./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js"),f=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),h=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),m=f("iterator"),p=!1;[].keys&&("next"in(o=[].keys())?(r=u(u(o)))!==Object.prototype&&(n=r):p=!0),!d(n)||i((function(){var e={};return n[m].call(e)!==e}))?n={}:h&&(n=l(n)),a(n[m])||c(n,m,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},"./node_modules/jspdf/node_modules/core-js/internals/iterators.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/iterators.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports={}},"./node_modules/jspdf/node_modules/core-js/internals/length-of-array-like.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/length-of-array-like.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-length */"./node_modules/jspdf/node_modules/core-js/internals/to-length.js");e.exports=function(e){return n(e.length)}},"./node_modules/jspdf/node_modules/core-js/internals/make-built-in.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/make-built-in.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),o=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),i=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),a=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),d=s(/*! ../internals/function-name */"./node_modules/jspdf/node_modules/core-js/internals/function-name.js").CONFIGURABLE,l=s(/*! ../internals/inspect-source */"./node_modules/jspdf/node_modules/core-js/internals/inspect-source.js"),u=s(/*! ../internals/internal-state */"./node_modules/jspdf/node_modules/core-js/internals/internal-state.js"),c=u.enforce,f=u.get,h=String,m=Object.defineProperty,p=n("".slice),j=n("".replace),g=n([].join),_=a&&!r((function(){return 8!==m((function(){}),"length",{value:8}).length})),y=String(String).split("String"),v=e.exports=function(e,t,s){"Symbol("===p(h(t),0,7)&&(t="["+j(h(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),s&&s.getter&&(t="get "+t),s&&s.setter&&(t="set "+t),(!i(e,"name")||d&&e.name!==t)&&(a?m(e,"name",{value:t,configurable:!0}):e.name=t),_&&s&&i(s,"arity")&&e.length!==s.arity&&m(e,"length",{value:s.arity});try{s&&i(s,"constructor")&&s.constructor?a&&m(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var n=c(e);return i(n,"source")||(n.source=g(y,"string"==typeof t?t:"")),e};Function.prototype.toString=v((function(){return o(this)&&f(this).source||l(this)}),"toString")},"./node_modules/jspdf/node_modules/core-js/internals/math-trunc.js":
/*!*************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/math-trunc.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=Math.ceil,r=Math.floor;e.exports=Math.trunc||function(e){var t=+e;return(t>0?r:n)(t)}},"./node_modules/jspdf/node_modules/core-js/internals/microtask.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/microtask.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r,o,i,a,d=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),l=s(/*! ../internals/function-bind-context */"./node_modules/jspdf/node_modules/core-js/internals/function-bind-context.js"),u=s(/*! ../internals/object-get-own-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-descriptor.js").f,c=s(/*! ../internals/task */"./node_modules/jspdf/node_modules/core-js/internals/task.js").set,f=s(/*! ../internals/queue */"./node_modules/jspdf/node_modules/core-js/internals/queue.js"),h=s(/*! ../internals/engine-is-ios */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-ios.js"),m=s(/*! ../internals/engine-is-ios-pebble */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-ios-pebble.js"),p=s(/*! ../internals/engine-is-webos-webkit */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-webos-webkit.js"),j=s(/*! ../internals/engine-is-node */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-node.js"),g=d.MutationObserver||d.WebKitMutationObserver,_=d.document,y=d.process,v=d.Promise,x=u(d,"queueMicrotask"),b=x&&x.value;if(!b){var w=new f,S=function(){var e,t;for(j&&(e=y.domain)&&e.exit();t=w.get();)try{t()}catch(e){throw w.head&&n(),e}e&&e.enter()};h||j||p||!g||!_?!m&&v&&v.resolve?((i=v.resolve(void 0)).constructor=v,a=l(i.then,i),n=function(){a(S)}):j?n=function(){y.nextTick(S)}:(c=l(c,d),n=function(){c(S)}):(r=!0,o=_.createTextNode(""),new g(S).observe(o,{characterData:!0}),n=function(){o.data=r=!r}),b=function(e){w.head||n(),w.add(e)}}e.exports=b},"./node_modules/jspdf/node_modules/core-js/internals/new-promise-capability.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/new-promise-capability.js ***!
  \*************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js"),r=TypeError,o=function(e){var t,s;this.promise=new e((function(e,n){if(void 0!==t||void 0!==s)throw r("Bad Promise constructor");t=e,s=n})),this.resolve=n(t),this.reject=n(s)};e.exports.f=function(e){return new o(e)}},"./node_modules/jspdf/node_modules/core-js/internals/not-a-regexp.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/not-a-regexp.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-regexp */"./node_modules/jspdf/node_modules/core-js/internals/is-regexp.js"),r=TypeError;e.exports=function(e){if(n(e))throw r("The method doesn't accept regular expressions");return e}},"./node_modules/jspdf/node_modules/core-js/internals/object-create.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-create.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),o=s(/*! ../internals/object-define-properties */"./node_modules/jspdf/node_modules/core-js/internals/object-define-properties.js"),i=s(/*! ../internals/enum-bug-keys */"./node_modules/jspdf/node_modules/core-js/internals/enum-bug-keys.js"),a=s(/*! ../internals/hidden-keys */"./node_modules/jspdf/node_modules/core-js/internals/hidden-keys.js"),d=s(/*! ../internals/html */"./node_modules/jspdf/node_modules/core-js/internals/html.js"),l=s(/*! ../internals/document-create-element */"./node_modules/jspdf/node_modules/core-js/internals/document-create-element.js"),u=s(/*! ../internals/shared-key */"./node_modules/jspdf/node_modules/core-js/internals/shared-key.js"),c=u("IE_PROTO"),f=function(){},h=function(e){return"<script>"+e+"<\/script>"},m=function(e){e.write(h("")),e.close();var t=e.parentWindow.Object;return e=null,t},p=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,t;p="undefined"!=typeof document?document.domain&&n?m(n):((t=l("iframe")).style.display="none",d.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(h("document.F=Object")),e.close(),e.F):m(n);for(var s=i.length;s--;)delete p.prototype[i[s]];return p()};a[c]=!0,e.exports=Object.create||function(e,t){var s;return null!==e?(f.prototype=r(e),s=new f,f.prototype=null,s[c]=e):s=p(),void 0===t?s:o.f(s,t)}},"./node_modules/jspdf/node_modules/core-js/internals/object-define-properties.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-define-properties.js ***!
  \***************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),r=s(/*! ../internals/v8-prototype-define-bug */"./node_modules/jspdf/node_modules/core-js/internals/v8-prototype-define-bug.js"),o=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js"),i=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),a=s(/*! ../internals/to-indexed-object */"./node_modules/jspdf/node_modules/core-js/internals/to-indexed-object.js"),d=s(/*! ../internals/object-keys */"./node_modules/jspdf/node_modules/core-js/internals/object-keys.js");t.f=n&&!r?Object.defineProperties:function(e,t){i(e);for(var s,n=a(t),r=d(t),l=r.length,u=0;l>u;)o.f(e,s=r[u++],n[s]);return e}},"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js ***!
  \*************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),r=s(/*! ../internals/ie8-dom-define */"./node_modules/jspdf/node_modules/core-js/internals/ie8-dom-define.js"),o=s(/*! ../internals/v8-prototype-define-bug */"./node_modules/jspdf/node_modules/core-js/internals/v8-prototype-define-bug.js"),i=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),a=s(/*! ../internals/to-property-key */"./node_modules/jspdf/node_modules/core-js/internals/to-property-key.js"),d=TypeError,l=Object.defineProperty,u=Object.getOwnPropertyDescriptor;t.f=n?o?function(e,t,s){if(i(e),t=a(t),i(s),"function"==typeof e&&"prototype"===t&&"value"in s&&"writable"in s&&!s.writable){var n=u(e,t);n&&n.writable&&(e[t]=s.value,s={configurable:"configurable"in s?s.configurable:n.configurable,enumerable:"enumerable"in s?s.enumerable:n.enumerable,writable:!1})}return l(e,t,s)}:l:function(e,t,s){if(i(e),t=a(t),i(s),r)try{return l(e,t,s)}catch(e){}if("get"in s||"set"in s)throw d("Accessors not supported");return"value"in s&&(e[t]=s.value),e}},"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \*************************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),r=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),o=s(/*! ../internals/object-property-is-enumerable */"./node_modules/jspdf/node_modules/core-js/internals/object-property-is-enumerable.js"),i=s(/*! ../internals/create-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/create-property-descriptor.js"),a=s(/*! ../internals/to-indexed-object */"./node_modules/jspdf/node_modules/core-js/internals/to-indexed-object.js"),d=s(/*! ../internals/to-property-key */"./node_modules/jspdf/node_modules/core-js/internals/to-property-key.js"),l=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),u=s(/*! ../internals/ie8-dom-define */"./node_modules/jspdf/node_modules/core-js/internals/ie8-dom-define.js"),c=Object.getOwnPropertyDescriptor;t.f=n?c:function(e,t){if(e=a(e),t=d(t),u)try{return c(e,t)}catch(e){}if(l(e,t))return i(!r(o.f,e,t),e[t])}},"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-names.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-names.js ***!
  \********************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/object-keys-internal */"./node_modules/jspdf/node_modules/core-js/internals/object-keys-internal.js"),r=s(/*! ../internals/enum-bug-keys */"./node_modules/jspdf/node_modules/core-js/internals/enum-bug-keys.js").concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,r)}},"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \**********************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";t.f=Object.getOwnPropertySymbols},"./node_modules/jspdf/node_modules/core-js/internals/object-get-prototype-of.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-get-prototype-of.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),r=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),o=s(/*! ../internals/to-object */"./node_modules/jspdf/node_modules/core-js/internals/to-object.js"),i=s(/*! ../internals/shared-key */"./node_modules/jspdf/node_modules/core-js/internals/shared-key.js"),a=s(/*! ../internals/correct-prototype-getter */"./node_modules/jspdf/node_modules/core-js/internals/correct-prototype-getter.js"),d=i("IE_PROTO"),l=Object,u=l.prototype;e.exports=a?l.getPrototypeOf:function(e){var t=o(e);if(n(t,d))return t[d];var s=t.constructor;return r(s)&&t instanceof s?s.prototype:t instanceof l?u:null}},"./node_modules/jspdf/node_modules/core-js/internals/object-is-prototype-of.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-is-prototype-of.js ***!
  \*************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js");e.exports=n({}.isPrototypeOf)},"./node_modules/jspdf/node_modules/core-js/internals/object-keys-internal.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-keys-internal.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),o=s(/*! ../internals/to-indexed-object */"./node_modules/jspdf/node_modules/core-js/internals/to-indexed-object.js"),i=s(/*! ../internals/array-includes */"./node_modules/jspdf/node_modules/core-js/internals/array-includes.js").indexOf,a=s(/*! ../internals/hidden-keys */"./node_modules/jspdf/node_modules/core-js/internals/hidden-keys.js"),d=n([].push);e.exports=function(e,t){var s,n=o(e),l=0,u=[];for(s in n)!r(a,s)&&r(n,s)&&d(u,s);for(;t.length>l;)r(n,s=t[l++])&&(~i(u,s)||d(u,s));return u}},"./node_modules/jspdf/node_modules/core-js/internals/object-keys.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-keys.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/object-keys-internal */"./node_modules/jspdf/node_modules/core-js/internals/object-keys-internal.js"),r=s(/*! ../internals/enum-bug-keys */"./node_modules/jspdf/node_modules/core-js/internals/enum-bug-keys.js");e.exports=Object.keys||function(e){return n(e,r)}},"./node_modules/jspdf/node_modules/core-js/internals/object-property-is-enumerable.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \********************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);t.f=o?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},"./node_modules/jspdf/node_modules/core-js/internals/object-set-prototype-of.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/object-set-prototype-of.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this-accessor */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-accessor.js"),r=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),o=s(/*! ../internals/a-possible-prototype */"./node_modules/jspdf/node_modules/core-js/internals/a-possible-prototype.js");e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,s={};try{(e=n(Object.prototype,"__proto__","set"))(s,[]),t=s instanceof Array}catch(e){}return function(s,n){return r(s),o(n),t?e(s,n):s.__proto__=n,s}}():void 0)},"./node_modules/jspdf/node_modules/core-js/internals/ordinary-to-primitive.js":
/*!************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/ordinary-to-primitive.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),r=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),o=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),i=TypeError;e.exports=function(e,t){var s,a;if("string"===t&&r(s=e.toString)&&!o(a=n(s,e)))return a;if(r(s=e.valueOf)&&!o(a=n(s,e)))return a;if("string"!==t&&r(s=e.toString)&&!o(a=n(s,e)))return a;throw i("Can't convert object to primitive value")}},"./node_modules/jspdf/node_modules/core-js/internals/own-keys.js":
/*!***********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/own-keys.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/get-built-in */"./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js"),r=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),o=s(/*! ../internals/object-get-own-property-names */"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-names.js"),i=s(/*! ../internals/object-get-own-property-symbols */"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-symbols.js"),a=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),d=r([].concat);e.exports=n("Reflect","ownKeys")||function(e){var t=o.f(a(e)),s=i.f;return s?d(t,s(e)):t}},"./node_modules/jspdf/node_modules/core-js/internals/perform.js":
/*!**********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/perform.js ***!
  \**********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},"./node_modules/jspdf/node_modules/core-js/internals/promise-constructor-detection.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/promise-constructor-detection.js ***!
  \********************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/promise-native-constructor */"./node_modules/jspdf/node_modules/core-js/internals/promise-native-constructor.js"),o=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),i=s(/*! ../internals/is-forced */"./node_modules/jspdf/node_modules/core-js/internals/is-forced.js"),a=s(/*! ../internals/inspect-source */"./node_modules/jspdf/node_modules/core-js/internals/inspect-source.js"),d=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),l=s(/*! ../internals/engine-is-browser */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-browser.js"),u=s(/*! ../internals/engine-is-deno */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-deno.js"),c=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),f=s(/*! ../internals/engine-v8-version */"./node_modules/jspdf/node_modules/core-js/internals/engine-v8-version.js"),h=r&&r.prototype,m=d("species"),p=!1,j=o(n.PromiseRejectionEvent),g=i("Promise",(function(){var e=a(r),t=e!==String(r);if(!t&&66===f)return!0;if(c&&(!h.catch||!h.finally))return!0;if(!f||f<51||!/native code/.test(e)){var s=new r((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};if((s.constructor={})[m]=n,!(p=s.then((function(){}))instanceof n))return!0}return!t&&(l||u)&&!j}));e.exports={CONSTRUCTOR:g,REJECTION_EVENT:j,SUBCLASSING:p}},"./node_modules/jspdf/node_modules/core-js/internals/promise-native-constructor.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/promise-native-constructor.js ***!
  \*****************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js");e.exports=n.Promise},"./node_modules/jspdf/node_modules/core-js/internals/promise-resolve.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/promise-resolve.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),r=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),o=s(/*! ../internals/new-promise-capability */"./node_modules/jspdf/node_modules/core-js/internals/new-promise-capability.js");e.exports=function(e,t){if(n(e),r(t)&&t.constructor===e)return t;var s=o.f(e);return(0,s.resolve)(t),s.promise}},"./node_modules/jspdf/node_modules/core-js/internals/promise-statics-incorrect-iteration.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/promise-statics-incorrect-iteration.js ***!
  \**************************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/promise-native-constructor */"./node_modules/jspdf/node_modules/core-js/internals/promise-native-constructor.js"),r=s(/*! ../internals/check-correctness-of-iteration */"./node_modules/jspdf/node_modules/core-js/internals/check-correctness-of-iteration.js"),o=s(/*! ../internals/promise-constructor-detection */"./node_modules/jspdf/node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR;e.exports=o||!r((function(e){n.all(e).then(void 0,(function(){}))}))},"./node_modules/jspdf/node_modules/core-js/internals/queue.js":
/*!********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/queue.js ***!
  \********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=function(){this.head=null,this.tail=null};n.prototype={add:function(e){var t={item:e,next:null},s=this.tail;s?s.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return null===(this.head=e.next)&&(this.tail=null),e.item}},e.exports=n},"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec-abstract.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/regexp-exec-abstract.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),r=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),o=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),i=s(/*! ../internals/classof-raw */"./node_modules/jspdf/node_modules/core-js/internals/classof-raw.js"),a=s(/*! ../internals/regexp-exec */"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec.js"),d=TypeError;e.exports=function(e,t){var s=e.exec;if(o(s)){var l=n(s,e,t);return null!==l&&r(l),l}if("RegExp"===i(e))return n(a,e,t);throw d("RegExp#exec called on incompatible receiver")}},"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/regexp-exec.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r,o=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),i=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),a=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),d=s(/*! ../internals/regexp-flags */"./node_modules/jspdf/node_modules/core-js/internals/regexp-flags.js"),l=s(/*! ../internals/regexp-sticky-helpers */"./node_modules/jspdf/node_modules/core-js/internals/regexp-sticky-helpers.js"),u=s(/*! ../internals/shared */"./node_modules/jspdf/node_modules/core-js/internals/shared.js"),c=s(/*! ../internals/object-create */"./node_modules/jspdf/node_modules/core-js/internals/object-create.js"),f=s(/*! ../internals/internal-state */"./node_modules/jspdf/node_modules/core-js/internals/internal-state.js").get,h=s(/*! ../internals/regexp-unsupported-dot-all */"./node_modules/jspdf/node_modules/core-js/internals/regexp-unsupported-dot-all.js"),m=s(/*! ../internals/regexp-unsupported-ncg */"./node_modules/jspdf/node_modules/core-js/internals/regexp-unsupported-ncg.js"),p=u("native-string-replace",String.prototype.replace),j=RegExp.prototype.exec,g=j,_=i("".charAt),y=i("".indexOf),v=i("".replace),x=i("".slice),b=(r=/b*/g,o(j,n=/a/,"a"),o(j,r,"a"),0!==n.lastIndex||0!==r.lastIndex),w=l.BROKEN_CARET,S=void 0!==/()??/.exec("")[1];(b||S||w||h||m)&&(g=function(e){var t,s,n,r,i,l,u,h=this,m=f(h),T=a(e),A=m.raw;if(A)return A.lastIndex=h.lastIndex,t=o(g,A,T),h.lastIndex=A.lastIndex,t;var O=m.groups,P=w&&h.sticky,C=o(d,h),E=h.source,M=0,N=T;if(P&&(C=v(C,"y",""),-1===y(C,"g")&&(C+="g"),N=x(T,h.lastIndex),h.lastIndex>0&&(!h.multiline||h.multiline&&"\n"!==_(T,h.lastIndex-1))&&(E="(?: "+E+")",N=" "+N,M++),s=new RegExp("^(?:"+E+")",C)),S&&(s=new RegExp("^"+E+"$(?!\\s)",C)),b&&(n=h.lastIndex),r=o(j,P?s:h,N),P?r?(r.input=x(r.input,M),r[0]=x(r[0],M),r.index=h.lastIndex,h.lastIndex+=r[0].length):h.lastIndex=0:b&&r&&(h.lastIndex=h.global?r.index+r[0].length:n),S&&r&&r.length>1&&o(p,r[0],s,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r&&O)for(r.groups=l=c(null),i=0;i<O.length;i++)l[(u=O[i])[0]]=r[u[1]];return r}),e.exports=g},"./node_modules/jspdf/node_modules/core-js/internals/regexp-flags.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/regexp-flags.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js");e.exports=function(){var e=n(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},"./node_modules/jspdf/node_modules/core-js/internals/regexp-get-flags.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/regexp-get-flags.js ***!
  \*******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),r=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),o=s(/*! ../internals/object-is-prototype-of */"./node_modules/jspdf/node_modules/core-js/internals/object-is-prototype-of.js"),i=s(/*! ../internals/regexp-flags */"./node_modules/jspdf/node_modules/core-js/internals/regexp-flags.js"),a=RegExp.prototype;e.exports=function(e){var t=e.flags;return void 0!==t||"flags"in a||r(e,"flags")||!o(a,e)?t:n(i,e)}},"./node_modules/jspdf/node_modules/core-js/internals/regexp-sticky-helpers.js":
/*!************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/regexp-sticky-helpers.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),r=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js").RegExp,o=n((function(){var e=r("a","y");return e.lastIndex=2,null!==e.exec("abcd")})),i=o||n((function(){return!r("a","y").sticky})),a=o||n((function(){var e=r("^r","gy");return e.lastIndex=2,null!==e.exec("str")}));e.exports={BROKEN_CARET:a,MISSED_STICKY:i,UNSUPPORTED_Y:o}},"./node_modules/jspdf/node_modules/core-js/internals/regexp-unsupported-dot-all.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/regexp-unsupported-dot-all.js ***!
  \*****************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),r=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js").RegExp;e.exports=n((function(){var e=r(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},"./node_modules/jspdf/node_modules/core-js/internals/regexp-unsupported-ncg.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/regexp-unsupported-ncg.js ***!
  \*************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),r=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js").RegExp;e.exports=n((function(){var e=r("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js ***!
  \***************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-null-or-undefined */"./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js"),r=TypeError;e.exports=function(e){if(n(e))throw r("Can't call method on "+e);return e}},"./node_modules/jspdf/node_modules/core-js/internals/set-species.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/set-species.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/get-built-in */"./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js"),r=s(/*! ../internals/define-built-in-accessor */"./node_modules/jspdf/node_modules/core-js/internals/define-built-in-accessor.js"),o=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),i=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),a=o("species");e.exports=function(e){var t=n(e);i&&t&&!t[a]&&r(t,a,{configurable:!0,get:function(){return this}})}},"./node_modules/jspdf/node_modules/core-js/internals/set-to-string-tag.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/set-to-string-tag.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js").f,r=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),o=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("toStringTag");e.exports=function(e,t,s){e&&!s&&(e=e.prototype),e&&!r(e,o)&&n(e,o,{configurable:!0,value:t})}},"./node_modules/jspdf/node_modules/core-js/internals/shared-key.js":
/*!*************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/shared-key.js ***!
  \*************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/shared */"./node_modules/jspdf/node_modules/core-js/internals/shared.js"),r=s(/*! ../internals/uid */"./node_modules/jspdf/node_modules/core-js/internals/uid.js"),o=n("keys");e.exports=function(e){return o[e]||(o[e]=r(e))}},"./node_modules/jspdf/node_modules/core-js/internals/shared-store.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/shared-store.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/define-global-property */"./node_modules/jspdf/node_modules/core-js/internals/define-global-property.js"),o=n["__core-js_shared__"]||r("__core-js_shared__",{});e.exports=o},"./node_modules/jspdf/node_modules/core-js/internals/shared.js":
/*!*********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/shared.js ***!
  \*********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),r=s(/*! ../internals/shared-store */"./node_modules/jspdf/node_modules/core-js/internals/shared-store.js");(e.exports=function(e,t){return r[e]||(r[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.32.2",mode:n?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.32.2/LICENSE",source:"https://github.com/zloirock/core-js"})},"./node_modules/jspdf/node_modules/core-js/internals/species-constructor.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/species-constructor.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),r=s(/*! ../internals/a-constructor */"./node_modules/jspdf/node_modules/core-js/internals/a-constructor.js"),o=s(/*! ../internals/is-null-or-undefined */"./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js"),i=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("species");e.exports=function(e,t){var s,a=n(e).constructor;return void 0===a||o(s=n(a)[i])?t:r(s)}},"./node_modules/jspdf/node_modules/core-js/internals/string-multibyte.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/string-multibyte.js ***!
  \*******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/to-integer-or-infinity */"./node_modules/jspdf/node_modules/core-js/internals/to-integer-or-infinity.js"),o=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),i=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),a=n("".charAt),d=n("".charCodeAt),l=n("".slice),u=function(e){return function(t,s){var n,u,c=o(i(t)),f=r(s),h=c.length;return f<0||f>=h?e?"":void 0:(n=d(c,f))<55296||n>56319||f+1===h||(u=d(c,f+1))<56320||u>57343?e?a(c,f):n:e?l(c,f,f+2):u-56320+(n-55296<<10)+65536}};e.exports={codeAt:u(!1),charAt:u(!0)}},"./node_modules/jspdf/node_modules/core-js/internals/string-trim-forced.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/string-trim-forced.js ***!
  \*********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-name */"./node_modules/jspdf/node_modules/core-js/internals/function-name.js").PROPER,r=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),o=s(/*! ../internals/whitespaces */"./node_modules/jspdf/node_modules/core-js/internals/whitespaces.js");e.exports=function(e){return r((function(){return!!o[e]()||"​᠎"!=="​᠎"[e]()||n&&o[e].name!==e}))}},"./node_modules/jspdf/node_modules/core-js/internals/string-trim.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/string-trim.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),o=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),i=s(/*! ../internals/whitespaces */"./node_modules/jspdf/node_modules/core-js/internals/whitespaces.js"),a=n("".replace),d=RegExp("^["+i+"]+"),l=RegExp("(^|[^"+i+"])["+i+"]+$"),u=function(e){return function(t){var s=o(r(t));return 1&e&&(s=a(s,d,"")),2&e&&(s=a(s,l,"$1")),s}};e.exports={start:u(1),end:u(2),trim:u(3)}},"./node_modules/jspdf/node_modules/core-js/internals/symbol-constructor-detection.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/symbol-constructor-detection.js ***!
  \*******************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/engine-v8-version */"./node_modules/jspdf/node_modules/core-js/internals/engine-v8-version.js"),r=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),o=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js").String;e.exports=!!Object.getOwnPropertySymbols&&!r((function(){var e=Symbol("symbol detection");return!o(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},"./node_modules/jspdf/node_modules/core-js/internals/task.js":
/*!*******************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/task.js ***!
  \*******************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r,o,i,a=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),d=s(/*! ../internals/function-apply */"./node_modules/jspdf/node_modules/core-js/internals/function-apply.js"),l=s(/*! ../internals/function-bind-context */"./node_modules/jspdf/node_modules/core-js/internals/function-bind-context.js"),u=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),c=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),f=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),h=s(/*! ../internals/html */"./node_modules/jspdf/node_modules/core-js/internals/html.js"),m=s(/*! ../internals/array-slice */"./node_modules/jspdf/node_modules/core-js/internals/array-slice.js"),p=s(/*! ../internals/document-create-element */"./node_modules/jspdf/node_modules/core-js/internals/document-create-element.js"),j=s(/*! ../internals/validate-arguments-length */"./node_modules/jspdf/node_modules/core-js/internals/validate-arguments-length.js"),g=s(/*! ../internals/engine-is-ios */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-ios.js"),_=s(/*! ../internals/engine-is-node */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-node.js"),y=a.setImmediate,v=a.clearImmediate,x=a.process,b=a.Dispatch,w=a.Function,S=a.MessageChannel,T=a.String,A=0,O={};f((function(){n=a.location}));var P=function(e){if(c(O,e)){var t=O[e];delete O[e],t()}},C=function(e){return function(){P(e)}},E=function(e){P(e.data)},M=function(e){a.postMessage(T(e),n.protocol+"//"+n.host)};y&&v||(y=function(e){j(arguments.length,1);var t=u(e)?e:w(e),s=m(arguments,1);return O[++A]=function(){d(t,void 0,s)},r(A),A},v=function(e){delete O[e]},_?r=function(e){x.nextTick(C(e))}:b&&b.now?r=function(e){b.now(C(e))}:S&&!g?(i=(o=new S).port2,o.port1.onmessage=E,r=l(i.postMessage,i)):a.addEventListener&&u(a.postMessage)&&!a.importScripts&&n&&"file:"!==n.protocol&&!f(M)?(r=M,a.addEventListener("message",E,!1)):r="onreadystatechange"in p("script")?function(e){h.appendChild(p("script")).onreadystatechange=function(){h.removeChild(this),P(e)}}:function(e){setTimeout(C(e),0)}),e.exports={set:y,clear:v}},"./node_modules/jspdf/node_modules/core-js/internals/to-absolute-index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-absolute-index.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-integer-or-infinity */"./node_modules/jspdf/node_modules/core-js/internals/to-integer-or-infinity.js"),r=Math.max,o=Math.min;e.exports=function(e,t){var s=n(e);return s<0?r(s+t,0):o(s,t)}},"./node_modules/jspdf/node_modules/core-js/internals/to-indexed-object.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-indexed-object.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/indexed-object */"./node_modules/jspdf/node_modules/core-js/internals/indexed-object.js"),r=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js");e.exports=function(e){return n(r(e))}},"./node_modules/jspdf/node_modules/core-js/internals/to-integer-or-infinity.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-integer-or-infinity.js ***!
  \*************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/math-trunc */"./node_modules/jspdf/node_modules/core-js/internals/math-trunc.js");e.exports=function(e){var t=+e;return t!=t||0===t?0:n(t)}},"./node_modules/jspdf/node_modules/core-js/internals/to-length.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-length.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-integer-or-infinity */"./node_modules/jspdf/node_modules/core-js/internals/to-integer-or-infinity.js"),r=Math.min;e.exports=function(e){return e>0?r(n(e),9007199254740991):0}},"./node_modules/jspdf/node_modules/core-js/internals/to-object.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-object.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),r=Object;e.exports=function(e){return r(n(e))}},"./node_modules/jspdf/node_modules/core-js/internals/to-primitive.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-primitive.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),r=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),o=s(/*! ../internals/is-symbol */"./node_modules/jspdf/node_modules/core-js/internals/is-symbol.js"),i=s(/*! ../internals/get-method */"./node_modules/jspdf/node_modules/core-js/internals/get-method.js"),a=s(/*! ../internals/ordinary-to-primitive */"./node_modules/jspdf/node_modules/core-js/internals/ordinary-to-primitive.js"),d=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),l=TypeError,u=d("toPrimitive");e.exports=function(e,t){if(!r(e)||o(e))return e;var s,d=i(e,u);if(d){if(void 0===t&&(t="default"),s=n(d,e,t),!r(s)||o(s))return s;throw l("Can't convert object to primitive value")}return void 0===t&&(t="number"),a(e,t)}},"./node_modules/jspdf/node_modules/core-js/internals/to-property-key.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-property-key.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-primitive */"./node_modules/jspdf/node_modules/core-js/internals/to-primitive.js"),r=s(/*! ../internals/is-symbol */"./node_modules/jspdf/node_modules/core-js/internals/is-symbol.js");e.exports=function(e){var t=n(e,"string");return r(t)?t:t+""}},"./node_modules/jspdf/node_modules/core-js/internals/to-string-tag-support.js":
/*!************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-string-tag-support.js ***!
  \************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n={};n[s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("toStringTag")]="z",e.exports="[object z]"===String(n)},"./node_modules/jspdf/node_modules/core-js/internals/to-string.js":
/*!************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/to-string.js ***!
  \************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/classof */"./node_modules/jspdf/node_modules/core-js/internals/classof.js"),r=String;e.exports=function(e){if("Symbol"===n(e))throw TypeError("Cannot convert a Symbol value to a string");return r(e)}},"./node_modules/jspdf/node_modules/core-js/internals/try-to-string.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/try-to-string.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=String;e.exports=function(e){try{return n(e)}catch(e){return"Object"}}},"./node_modules/jspdf/node_modules/core-js/internals/uid.js":
/*!******************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/uid.js ***!
  \******************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),r=0,o=Math.random(),i=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+i(++r+o,36)}},"./node_modules/jspdf/node_modules/core-js/internals/use-symbol-as-uid.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/symbol-constructor-detection */"./node_modules/jspdf/node_modules/core-js/internals/symbol-constructor-detection.js");e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},"./node_modules/jspdf/node_modules/core-js/internals/v8-prototype-define-bug.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/v8-prototype-define-bug.js ***!
  \**************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),r=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js");e.exports=n&&r((function(){return 42!==Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},"./node_modules/jspdf/node_modules/core-js/internals/validate-arguments-length.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/validate-arguments-length.js ***!
  \****************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=TypeError;e.exports=function(e,t){if(e<t)throw n("Not enough arguments");return e}},"./node_modules/jspdf/node_modules/core-js/internals/weak-map-basic-detection.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/weak-map-basic-detection.js ***!
  \***************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),o=n.WeakMap;e.exports=r(o)&&/native code/.test(String(o))},"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/shared */"./node_modules/jspdf/node_modules/core-js/internals/shared.js"),o=s(/*! ../internals/has-own-property */"./node_modules/jspdf/node_modules/core-js/internals/has-own-property.js"),i=s(/*! ../internals/uid */"./node_modules/jspdf/node_modules/core-js/internals/uid.js"),a=s(/*! ../internals/symbol-constructor-detection */"./node_modules/jspdf/node_modules/core-js/internals/symbol-constructor-detection.js"),d=s(/*! ../internals/use-symbol-as-uid */"./node_modules/jspdf/node_modules/core-js/internals/use-symbol-as-uid.js"),l=n.Symbol,u=r("wks"),c=d?l.for||l:l&&l.withoutSetter||i;e.exports=function(e){return o(u,e)||(u[e]=a&&o(l,e)?l[e]:c("Symbol."+e)),u[e]}},"./node_modules/jspdf/node_modules/core-js/internals/whitespaces.js":
/*!**************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/internals/whitespaces.js ***!
  \**************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"./node_modules/jspdf/node_modules/core-js/modules/es.array.index-of.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.array.index-of.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/function-uncurry-this-clause */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-clause.js"),o=s(/*! ../internals/array-includes */"./node_modules/jspdf/node_modules/core-js/internals/array-includes.js").indexOf,i=s(/*! ../internals/array-method-is-strict */"./node_modules/jspdf/node_modules/core-js/internals/array-method-is-strict.js"),a=r([].indexOf),d=!!a&&1/a([1],1,-0)<0;n({target:"Array",proto:!0,forced:d||!i("indexOf")},{indexOf:function(e){var t=arguments.length>1?arguments[1]:void 0;return d?a(this,e,t)||0:o(this,e,t)}})},"./node_modules/jspdf/node_modules/core-js/modules/es.array.iterator.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.array.iterator.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/to-indexed-object */"./node_modules/jspdf/node_modules/core-js/internals/to-indexed-object.js"),r=s(/*! ../internals/add-to-unscopables */"./node_modules/jspdf/node_modules/core-js/internals/add-to-unscopables.js"),o=s(/*! ../internals/iterators */"./node_modules/jspdf/node_modules/core-js/internals/iterators.js"),i=s(/*! ../internals/internal-state */"./node_modules/jspdf/node_modules/core-js/internals/internal-state.js"),a=s(/*! ../internals/object-define-property */"./node_modules/jspdf/node_modules/core-js/internals/object-define-property.js").f,d=s(/*! ../internals/iterator-define */"./node_modules/jspdf/node_modules/core-js/internals/iterator-define.js"),l=s(/*! ../internals/create-iter-result-object */"./node_modules/jspdf/node_modules/core-js/internals/create-iter-result-object.js"),u=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),c=s(/*! ../internals/descriptors */"./node_modules/jspdf/node_modules/core-js/internals/descriptors.js"),f=i.set,h=i.getterFor("Array Iterator");e.exports=d(Array,"Array",(function(e,t){f(this,{type:"Array Iterator",target:n(e),index:0,kind:t})}),(function(){var e=h(this),t=e.target,s=e.kind,n=e.index++;if(!t||n>=t.length)return e.target=void 0,l(void 0,!0);switch(s){case"keys":return l(n,!1);case"values":return l(t[n],!1)}return l([n,t[n]],!1)}),"values");var m=o.Arguments=o.Array;if(r("keys"),r("values"),r("entries"),!u&&c&&"values"!==m.name)try{a(m,"name",{value:"values"})}catch(e){}},"./node_modules/jspdf/node_modules/core-js/modules/es.array.reduce.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.array.reduce.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/array-reduce */"./node_modules/jspdf/node_modules/core-js/internals/array-reduce.js").left,o=s(/*! ../internals/array-method-is-strict */"./node_modules/jspdf/node_modules/core-js/internals/array-method-is-strict.js"),i=s(/*! ../internals/engine-v8-version */"./node_modules/jspdf/node_modules/core-js/internals/engine-v8-version.js");n({target:"Array",proto:!0,forced:!s(/*! ../internals/engine-is-node */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-node.js")&&i>79&&i<83||!o("reduce")},{reduce:function(e){var t=arguments.length;return r(this,e,t,t>1?arguments[1]:void 0)}})},"./node_modules/jspdf/node_modules/core-js/modules/es.array.reverse.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.array.reverse.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),o=s(/*! ../internals/is-array */"./node_modules/jspdf/node_modules/core-js/internals/is-array.js"),i=r([].reverse),a=[1,2];n({target:"Array",proto:!0,forced:String(a)===String(a.reverse())},{reverse:function(){return o(this)&&(this.length=this.length),i(this)}})},"./node_modules/jspdf/node_modules/core-js/modules/es.promise.all.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.promise.all.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),o=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js"),i=s(/*! ../internals/new-promise-capability */"./node_modules/jspdf/node_modules/core-js/internals/new-promise-capability.js"),a=s(/*! ../internals/perform */"./node_modules/jspdf/node_modules/core-js/internals/perform.js"),d=s(/*! ../internals/iterate */"./node_modules/jspdf/node_modules/core-js/internals/iterate.js");n({target:"Promise",stat:!0,forced:s(/*! ../internals/promise-statics-incorrect-iteration */"./node_modules/jspdf/node_modules/core-js/internals/promise-statics-incorrect-iteration.js")},{all:function(e){var t=this,s=i.f(t),n=s.resolve,l=s.reject,u=a((function(){var s=o(t.resolve),i=[],a=0,u=1;d(e,(function(e){var o=a++,d=!1;u++,r(s,t,e).then((function(e){d||(d=!0,i[o]=e,--u||n(i))}),l)})),--u||n(i)}));return u.error&&l(u.value),s.promise}})},"./node_modules/jspdf/node_modules/core-js/modules/es.promise.catch.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.promise.catch.js ***!
  \*****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),o=s(/*! ../internals/promise-constructor-detection */"./node_modules/jspdf/node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR,i=s(/*! ../internals/promise-native-constructor */"./node_modules/jspdf/node_modules/core-js/internals/promise-native-constructor.js"),a=s(/*! ../internals/get-built-in */"./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js"),d=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),l=s(/*! ../internals/define-built-in */"./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js"),u=i&&i.prototype;if(n({target:"Promise",proto:!0,forced:o,real:!0},{catch:function(e){return this.then(void 0,e)}}),!r&&d(i)){var c=a("Promise").prototype.catch;u.catch!==c&&l(u,"catch",c,{unsafe:!0})}},"./node_modules/jspdf/node_modules/core-js/modules/es.promise.constructor.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.promise.constructor.js ***!
  \***********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r,o,i=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),a=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),d=s(/*! ../internals/engine-is-node */"./node_modules/jspdf/node_modules/core-js/internals/engine-is-node.js"),l=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),u=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),c=s(/*! ../internals/define-built-in */"./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js"),f=s(/*! ../internals/object-set-prototype-of */"./node_modules/jspdf/node_modules/core-js/internals/object-set-prototype-of.js"),h=s(/*! ../internals/set-to-string-tag */"./node_modules/jspdf/node_modules/core-js/internals/set-to-string-tag.js"),m=s(/*! ../internals/set-species */"./node_modules/jspdf/node_modules/core-js/internals/set-species.js"),p=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js"),j=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),g=s(/*! ../internals/is-object */"./node_modules/jspdf/node_modules/core-js/internals/is-object.js"),_=s(/*! ../internals/an-instance */"./node_modules/jspdf/node_modules/core-js/internals/an-instance.js"),y=s(/*! ../internals/species-constructor */"./node_modules/jspdf/node_modules/core-js/internals/species-constructor.js"),v=s(/*! ../internals/task */"./node_modules/jspdf/node_modules/core-js/internals/task.js").set,x=s(/*! ../internals/microtask */"./node_modules/jspdf/node_modules/core-js/internals/microtask.js"),b=s(/*! ../internals/host-report-errors */"./node_modules/jspdf/node_modules/core-js/internals/host-report-errors.js"),w=s(/*! ../internals/perform */"./node_modules/jspdf/node_modules/core-js/internals/perform.js"),S=s(/*! ../internals/queue */"./node_modules/jspdf/node_modules/core-js/internals/queue.js"),T=s(/*! ../internals/internal-state */"./node_modules/jspdf/node_modules/core-js/internals/internal-state.js"),A=s(/*! ../internals/promise-native-constructor */"./node_modules/jspdf/node_modules/core-js/internals/promise-native-constructor.js"),O=s(/*! ../internals/promise-constructor-detection */"./node_modules/jspdf/node_modules/core-js/internals/promise-constructor-detection.js"),P=s(/*! ../internals/new-promise-capability */"./node_modules/jspdf/node_modules/core-js/internals/new-promise-capability.js"),C=O.CONSTRUCTOR,E=O.REJECTION_EVENT,M=O.SUBCLASSING,N=T.getterFor("Promise"),k=T.set,R=A&&A.prototype,V=A,I=R,L=l.TypeError,D=l.document,B=l.process,F=P.f,z=F,U=!!(D&&D.createEvent&&l.dispatchEvent),H=function(e){var t;return!(!g(e)||!j(t=e.then))&&t},X=function(e,t){var s,n,r,o=t.value,i=1===t.state,a=i?e.ok:e.fail,d=e.resolve,l=e.reject,c=e.domain;try{a?(i||(2===t.rejection&&Q(t),t.rejection=1),!0===a?s=o:(c&&c.enter(),s=a(o),c&&(c.exit(),r=!0)),s===e.promise?l(L("Promise-chain cycle")):(n=H(s))?u(n,s,d,l):d(s)):l(o)}catch(e){c&&!r&&c.exit(),l(e)}},Y=function(e,t){e.notified||(e.notified=!0,x((function(){for(var s,n=e.reactions;s=n.get();)X(s,e);e.notified=!1,t&&!e.rejection&&q(e)})))},G=function(e,t,s){var n,r;U?((n=D.createEvent("Event")).promise=t,n.reason=s,n.initEvent(e,!1,!0),l.dispatchEvent(n)):n={promise:t,reason:s},!E&&(r=l["on"+e])?r(n):"unhandledrejection"===e&&b("Unhandled promise rejection",s)},q=function(e){u(v,l,(function(){var t,s=e.facade,n=e.value;if(W(e)&&(t=w((function(){d?B.emit("unhandledRejection",n,s):G("unhandledrejection",s,n)})),e.rejection=d||W(e)?2:1,t.error))throw t.value}))},W=function(e){return 1!==e.rejection&&!e.parent},Q=function(e){u(v,l,(function(){var t=e.facade;d?B.emit("rejectionHandled",t):G("rejectionhandled",t,e.value)}))},$=function(e,t,s){return function(n){e(t,n,s)}},Z=function(e,t,s){e.done||(e.done=!0,s&&(e=s),e.value=t,e.state=2,Y(e,!0))},K=function(e,t,s){if(!e.done){e.done=!0,s&&(e=s);try{if(e.facade===t)throw L("Promise can't be resolved itself");var n=H(t);n?x((function(){var s={done:!1};try{u(n,t,$(K,s,e),$(Z,s,e))}catch(t){Z(s,t,e)}})):(e.value=t,e.state=1,Y(e,!1))}catch(t){Z({done:!1},t,e)}}};if(C&&(I=(V=function(e){_(this,I),p(e),u(n,this);var t=N(this);try{e($(K,t),$(Z,t))}catch(e){Z(t,e)}}).prototype,(n=function(e){k(this,{type:"Promise",done:!1,notified:!1,parent:!1,reactions:new S,rejection:!1,state:0,value:void 0})}).prototype=c(I,"then",(function(e,t){var s=N(this),n=F(y(this,V));return s.parent=!0,n.ok=!j(e)||e,n.fail=j(t)&&t,n.domain=d?B.domain:void 0,0===s.state?s.reactions.add(n):x((function(){X(n,s)})),n.promise})),r=function(){var e=new n,t=N(e);this.promise=e,this.resolve=$(K,t),this.reject=$(Z,t)},P.f=F=function(e){return e===V||void 0===e?new r(e):z(e)},!a&&j(A)&&R!==Object.prototype)){o=R.then,M||c(R,"then",(function(e,t){var s=this;return new V((function(e,t){u(o,s,e,t)})).then(e,t)}),{unsafe:!0});try{delete R.constructor}catch(e){}f&&f(R,I)}i({global:!0,constructor:!0,wrap:!0,forced:C},{Promise:V}),h(V,"Promise",!1,!0),m("Promise")},"./node_modules/jspdf/node_modules/core-js/modules/es.promise.js":
/*!***********************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.promise.js ***!
  \***********************************************************************/
/*! no static exports found */function(e,t,s){"use strict";s(/*! ../modules/es.promise.constructor */"./node_modules/jspdf/node_modules/core-js/modules/es.promise.constructor.js"),s(/*! ../modules/es.promise.all */"./node_modules/jspdf/node_modules/core-js/modules/es.promise.all.js"),s(/*! ../modules/es.promise.catch */"./node_modules/jspdf/node_modules/core-js/modules/es.promise.catch.js"),s(/*! ../modules/es.promise.race */"./node_modules/jspdf/node_modules/core-js/modules/es.promise.race.js"),s(/*! ../modules/es.promise.reject */"./node_modules/jspdf/node_modules/core-js/modules/es.promise.reject.js"),s(/*! ../modules/es.promise.resolve */"./node_modules/jspdf/node_modules/core-js/modules/es.promise.resolve.js")},"./node_modules/jspdf/node_modules/core-js/modules/es.promise.race.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.promise.race.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),o=s(/*! ../internals/a-callable */"./node_modules/jspdf/node_modules/core-js/internals/a-callable.js"),i=s(/*! ../internals/new-promise-capability */"./node_modules/jspdf/node_modules/core-js/internals/new-promise-capability.js"),a=s(/*! ../internals/perform */"./node_modules/jspdf/node_modules/core-js/internals/perform.js"),d=s(/*! ../internals/iterate */"./node_modules/jspdf/node_modules/core-js/internals/iterate.js");n({target:"Promise",stat:!0,forced:s(/*! ../internals/promise-statics-incorrect-iteration */"./node_modules/jspdf/node_modules/core-js/internals/promise-statics-incorrect-iteration.js")},{race:function(e){var t=this,s=i.f(t),n=s.reject,l=a((function(){var i=o(t.resolve);d(e,(function(e){r(i,t,e).then(s.resolve,n)}))}));return l.error&&n(l.value),s.promise}})},"./node_modules/jspdf/node_modules/core-js/modules/es.promise.reject.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.promise.reject.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),o=s(/*! ../internals/new-promise-capability */"./node_modules/jspdf/node_modules/core-js/internals/new-promise-capability.js");n({target:"Promise",stat:!0,forced:s(/*! ../internals/promise-constructor-detection */"./node_modules/jspdf/node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR},{reject:function(e){var t=o.f(this);return r(t.reject,void 0,e),t.promise}})},"./node_modules/jspdf/node_modules/core-js/modules/es.promise.resolve.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.promise.resolve.js ***!
  \*******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/get-built-in */"./node_modules/jspdf/node_modules/core-js/internals/get-built-in.js"),o=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),i=s(/*! ../internals/promise-native-constructor */"./node_modules/jspdf/node_modules/core-js/internals/promise-native-constructor.js"),a=s(/*! ../internals/promise-constructor-detection */"./node_modules/jspdf/node_modules/core-js/internals/promise-constructor-detection.js").CONSTRUCTOR,d=s(/*! ../internals/promise-resolve */"./node_modules/jspdf/node_modules/core-js/internals/promise-resolve.js"),l=r("Promise"),u=o&&!a;n({target:"Promise",stat:!0,forced:o||a},{resolve:function(e){return d(u&&this===l?i:this,e)}})},"./node_modules/jspdf/node_modules/core-js/modules/es.regexp.exec.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.regexp.exec.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/regexp-exec */"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec.js");n({target:"RegExp",proto:!0,forced:/./.exec!==r},{exec:r})},"./node_modules/jspdf/node_modules/core-js/modules/es.regexp.to-string.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.regexp.to-string.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-name */"./node_modules/jspdf/node_modules/core-js/internals/function-name.js").PROPER,r=s(/*! ../internals/define-built-in */"./node_modules/jspdf/node_modules/core-js/internals/define-built-in.js"),o=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),i=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),a=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),d=s(/*! ../internals/regexp-get-flags */"./node_modules/jspdf/node_modules/core-js/internals/regexp-get-flags.js"),l=RegExp.prototype.toString,u=a((function(){return"/a/b"!==l.call({source:"a",flags:"b"})})),c=n&&"toString"!==l.name;(u||c)&&r(RegExp.prototype,"toString",(function(){var e=o(this);return"/"+i(e.source)+"/"+i(d(e))}),{unsafe:!0})},"./node_modules/jspdf/node_modules/core-js/modules/es.string.ends-with.js":
/*!********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.string.ends-with.js ***!
  \********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),o=s(/*! ../internals/function-uncurry-this-clause */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-clause.js"),i=s(/*! ../internals/object-get-own-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-descriptor.js").f,a=s(/*! ../internals/to-length */"./node_modules/jspdf/node_modules/core-js/internals/to-length.js"),d=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),l=s(/*! ../internals/not-a-regexp */"./node_modules/jspdf/node_modules/core-js/internals/not-a-regexp.js"),u=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),c=s(/*! ../internals/correct-is-regexp-logic */"./node_modules/jspdf/node_modules/core-js/internals/correct-is-regexp-logic.js"),f=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),h=o("".endsWith),m=o("".slice),p=Math.min,j=c("endsWith");r({target:"String",proto:!0,forced:!!(f||j||(n=i(String.prototype,"endsWith"),!n||n.writable))&&!j},{endsWith:function(e){var t=d(u(this));l(e);var s=arguments.length>1?arguments[1]:void 0,n=t.length,r=void 0===s?n:p(a(s),n),o=d(e);return h?h(t,o,r):m(t,r-o.length,r)===o}})},"./node_modules/jspdf/node_modules/core-js/modules/es.string.includes.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.string.includes.js ***!
  \*******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),o=s(/*! ../internals/not-a-regexp */"./node_modules/jspdf/node_modules/core-js/internals/not-a-regexp.js"),i=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),a=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),d=s(/*! ../internals/correct-is-regexp-logic */"./node_modules/jspdf/node_modules/core-js/internals/correct-is-regexp-logic.js"),l=r("".indexOf);n({target:"String",proto:!0,forced:!d("includes")},{includes:function(e){return!!~l(a(i(this)),a(o(e)),arguments.length>1?arguments[1]:void 0)}})},"./node_modules/jspdf/node_modules/core-js/modules/es.string.match.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.string.match.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),r=s(/*! ../internals/fix-regexp-well-known-symbol-logic */"./node_modules/jspdf/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"),o=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),i=s(/*! ../internals/is-null-or-undefined */"./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js"),a=s(/*! ../internals/to-length */"./node_modules/jspdf/node_modules/core-js/internals/to-length.js"),d=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),l=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),u=s(/*! ../internals/get-method */"./node_modules/jspdf/node_modules/core-js/internals/get-method.js"),c=s(/*! ../internals/advance-string-index */"./node_modules/jspdf/node_modules/core-js/internals/advance-string-index.js"),f=s(/*! ../internals/regexp-exec-abstract */"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec-abstract.js");r("match",(function(e,t,s){return[function(t){var s=l(this),r=i(t)?void 0:u(t,e);return r?n(r,t,s):new RegExp(t)[e](d(s))},function(e){var n=o(this),r=d(e),i=s(t,n,r);if(i.done)return i.value;if(!n.global)return f(n,r);var l=n.unicode;n.lastIndex=0;for(var u,h=[],m=0;null!==(u=f(n,r));){var p=d(u[0]);h[m]=p,""===p&&(n.lastIndex=c(r,a(n.lastIndex),l)),m++}return 0===m?null:h}]}))},"./node_modules/jspdf/node_modules/core-js/modules/es.string.replace.js":
/*!******************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.string.replace.js ***!
  \******************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-apply */"./node_modules/jspdf/node_modules/core-js/internals/function-apply.js"),r=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),o=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),i=s(/*! ../internals/fix-regexp-well-known-symbol-logic */"./node_modules/jspdf/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"),a=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),d=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),l=s(/*! ../internals/is-callable */"./node_modules/jspdf/node_modules/core-js/internals/is-callable.js"),u=s(/*! ../internals/is-null-or-undefined */"./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js"),c=s(/*! ../internals/to-integer-or-infinity */"./node_modules/jspdf/node_modules/core-js/internals/to-integer-or-infinity.js"),f=s(/*! ../internals/to-length */"./node_modules/jspdf/node_modules/core-js/internals/to-length.js"),h=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),m=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),p=s(/*! ../internals/advance-string-index */"./node_modules/jspdf/node_modules/core-js/internals/advance-string-index.js"),j=s(/*! ../internals/get-method */"./node_modules/jspdf/node_modules/core-js/internals/get-method.js"),g=s(/*! ../internals/get-substitution */"./node_modules/jspdf/node_modules/core-js/internals/get-substitution.js"),_=s(/*! ../internals/regexp-exec-abstract */"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec-abstract.js"),y=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js")("replace"),v=Math.max,x=Math.min,b=o([].concat),w=o([].push),S=o("".indexOf),T=o("".slice),A="$0"==="a".replace(/./,"$0"),O=!!/./[y]&&""===/./[y]("a","$0");i("replace",(function(e,t,s){var o=O?"$":"$0";return[function(e,s){var n=m(this),o=u(e)?void 0:j(e,y);return o?r(o,e,n,s):r(t,h(n),e,s)},function(e,r){var i=d(this),a=h(e);if("string"==typeof r&&-1===S(r,o)&&-1===S(r,"$<")){var u=s(t,i,a,r);if(u.done)return u.value}var m=l(r);m||(r=h(r));var j,y=i.global;y&&(j=i.unicode,i.lastIndex=0);for(var A,O=[];null!==(A=_(i,a))&&(w(O,A),y);){""===h(A[0])&&(i.lastIndex=p(a,f(i.lastIndex),j))}for(var P,C="",E=0,M=0;M<O.length;M++){for(var N,k=h((A=O[M])[0]),R=v(x(c(A.index),a.length),0),V=[],I=1;I<A.length;I++)w(V,void 0===(P=A[I])?P:String(P));var L=A.groups;if(m){var D=b([k],V,R,a);void 0!==L&&w(D,L),N=h(n(r,void 0,D))}else N=g(k,a,R,V,L,r);R>=E&&(C+=T(a,E,R)+N,E=R+k.length)}return C+T(a,E)}]}),!!a((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!A||O)},"./node_modules/jspdf/node_modules/core-js/modules/es.string.split.js":
/*!****************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.string.split.js ***!
  \****************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/function-apply */"./node_modules/jspdf/node_modules/core-js/internals/function-apply.js"),r=s(/*! ../internals/function-call */"./node_modules/jspdf/node_modules/core-js/internals/function-call.js"),o=s(/*! ../internals/function-uncurry-this */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this.js"),i=s(/*! ../internals/fix-regexp-well-known-symbol-logic */"./node_modules/jspdf/node_modules/core-js/internals/fix-regexp-well-known-symbol-logic.js"),a=s(/*! ../internals/an-object */"./node_modules/jspdf/node_modules/core-js/internals/an-object.js"),d=s(/*! ../internals/is-null-or-undefined */"./node_modules/jspdf/node_modules/core-js/internals/is-null-or-undefined.js"),l=s(/*! ../internals/is-regexp */"./node_modules/jspdf/node_modules/core-js/internals/is-regexp.js"),u=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),c=s(/*! ../internals/species-constructor */"./node_modules/jspdf/node_modules/core-js/internals/species-constructor.js"),f=s(/*! ../internals/advance-string-index */"./node_modules/jspdf/node_modules/core-js/internals/advance-string-index.js"),h=s(/*! ../internals/to-length */"./node_modules/jspdf/node_modules/core-js/internals/to-length.js"),m=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),p=s(/*! ../internals/get-method */"./node_modules/jspdf/node_modules/core-js/internals/get-method.js"),j=s(/*! ../internals/array-slice-simple */"./node_modules/jspdf/node_modules/core-js/internals/array-slice-simple.js"),g=s(/*! ../internals/regexp-exec-abstract */"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec-abstract.js"),_=s(/*! ../internals/regexp-exec */"./node_modules/jspdf/node_modules/core-js/internals/regexp-exec.js"),y=s(/*! ../internals/regexp-sticky-helpers */"./node_modules/jspdf/node_modules/core-js/internals/regexp-sticky-helpers.js"),v=s(/*! ../internals/fails */"./node_modules/jspdf/node_modules/core-js/internals/fails.js"),x=y.UNSUPPORTED_Y,b=Math.min,w=[].push,S=o(/./.exec),T=o(w),A=o("".slice);i("split",(function(e,t,s){var o;return o="c"==="abbc".split(/(b)*/)[1]||4!=="test".split(/(?:)/,-1).length||2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,s){var o=m(u(this)),i=void 0===s?4294967295:s>>>0;if(0===i)return[];if(void 0===e)return[o];if(!l(e))return r(t,o,e,i);for(var a,d,c,f=[],h=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),p=0,g=new RegExp(e.source,h+"g");(a=r(_,g,o))&&!((d=g.lastIndex)>p&&(T(f,A(o,p,a.index)),a.length>1&&a.index<o.length&&n(w,f,j(a,1)),c=a[0].length,p=d,f.length>=i));)g.lastIndex===a.index&&g.lastIndex++;return p===o.length?!c&&S(g,"")||T(f,""):T(f,A(o,p)),f.length>i?j(f,0,i):f}:"0".split(void 0,0).length?function(e,s){return void 0===e&&0===s?[]:r(t,this,e,s)}:t,[function(t,s){var n=u(this),i=d(t)?void 0:p(t,e);return i?r(i,t,n,s):r(o,m(n),t,s)},function(e,n){var r=a(this),i=m(e),d=s(o,r,i,n,o!==t);if(d.done)return d.value;var l=c(r,RegExp),u=r.unicode,p=(r.ignoreCase?"i":"")+(r.multiline?"m":"")+(r.unicode?"u":"")+(x?"g":"y"),j=new l(x?"^(?:"+r.source+")":r,p),_=void 0===n?4294967295:n>>>0;if(0===_)return[];if(0===i.length)return null===g(j,i)?[i]:[];for(var y=0,v=0,w=[];v<i.length;){j.lastIndex=x?0:v;var S,O=g(j,x?A(i,v):i);if(null===O||(S=b(h(j.lastIndex+(x?v:0)),i.length))===y)v=f(i,v,u);else{if(T(w,A(i,y,v)),w.length===_)return w;for(var P=1;P<=O.length-1;P++)if(T(w,O[P]),w.length===_)return w;v=y=S}}return T(w,A(i,y)),w}]}),!!v((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var s="ab".split(e);return 2!==s.length||"a"!==s[0]||"b"!==s[1]})),x)},"./node_modules/jspdf/node_modules/core-js/modules/es.string.starts-with.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.string.starts-with.js ***!
  \**********************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n,r=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),o=s(/*! ../internals/function-uncurry-this-clause */"./node_modules/jspdf/node_modules/core-js/internals/function-uncurry-this-clause.js"),i=s(/*! ../internals/object-get-own-property-descriptor */"./node_modules/jspdf/node_modules/core-js/internals/object-get-own-property-descriptor.js").f,a=s(/*! ../internals/to-length */"./node_modules/jspdf/node_modules/core-js/internals/to-length.js"),d=s(/*! ../internals/to-string */"./node_modules/jspdf/node_modules/core-js/internals/to-string.js"),l=s(/*! ../internals/not-a-regexp */"./node_modules/jspdf/node_modules/core-js/internals/not-a-regexp.js"),u=s(/*! ../internals/require-object-coercible */"./node_modules/jspdf/node_modules/core-js/internals/require-object-coercible.js"),c=s(/*! ../internals/correct-is-regexp-logic */"./node_modules/jspdf/node_modules/core-js/internals/correct-is-regexp-logic.js"),f=s(/*! ../internals/is-pure */"./node_modules/jspdf/node_modules/core-js/internals/is-pure.js"),h=o("".startsWith),m=o("".slice),p=Math.min,j=c("startsWith");r({target:"String",proto:!0,forced:!!(f||j||(n=i(String.prototype,"startsWith"),!n||n.writable))&&!j},{startsWith:function(e){var t=d(u(this));l(e);var s=a(p(arguments.length>1?arguments[1]:void 0,t.length)),n=d(e);return h?h(t,n,s):m(t,s,s+n.length)===n}})},"./node_modules/jspdf/node_modules/core-js/modules/es.string.trim.js":
/*!***************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/es.string.trim.js ***!
  \***************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/export */"./node_modules/jspdf/node_modules/core-js/internals/export.js"),r=s(/*! ../internals/string-trim */"./node_modules/jspdf/node_modules/core-js/internals/string-trim.js").trim;n({target:"String",proto:!0,forced:s(/*! ../internals/string-trim-forced */"./node_modules/jspdf/node_modules/core-js/internals/string-trim-forced.js")("trim")},{trim:function(){return r(this)}})},"./node_modules/jspdf/node_modules/core-js/modules/web.dom-collections.iterator.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/jspdf/node_modules/core-js/modules/web.dom-collections.iterator.js ***!
  \*****************************************************************************************/
/*! no static exports found */function(e,t,s){"use strict";var n=s(/*! ../internals/global */"./node_modules/jspdf/node_modules/core-js/internals/global.js"),r=s(/*! ../internals/dom-iterables */"./node_modules/jspdf/node_modules/core-js/internals/dom-iterables.js"),o=s(/*! ../internals/dom-token-list-prototype */"./node_modules/jspdf/node_modules/core-js/internals/dom-token-list-prototype.js"),i=s(/*! ../modules/es.array.iterator */"./node_modules/jspdf/node_modules/core-js/modules/es.array.iterator.js"),a=s(/*! ../internals/create-non-enumerable-property */"./node_modules/jspdf/node_modules/core-js/internals/create-non-enumerable-property.js"),d=s(/*! ../internals/well-known-symbol */"./node_modules/jspdf/node_modules/core-js/internals/well-known-symbol.js"),l=d("iterator"),u=d("toStringTag"),c=i.values,f=function(e,t){if(e){if(e[l]!==c)try{a(e,l,c)}catch(t){e[l]=c}if(e[u]||a(e,u,t),r[t])for(var s in i)if(e[s]!==i[s])try{a(e,s,i[s])}catch(t){e[s]=i[s]}}};for(var h in r)f(n[h]&&n[h].prototype,h);f(o,"DOMTokenList")},"./node_modules/performance-now/lib/performance-now.js":
/*!*************************************************************!*\
  !*** ./node_modules/performance-now/lib/performance-now.js ***!
  \*************************************************************/
/*! no static exports found */function(e,t,s){(function(t){(function(){var s,n,r,o,i,a;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:null!=t&&t.hrtime?(e.exports=function(){return(s()-i)/1e6},n=t.hrtime,o=(s=function(){var e;return 1e9*(e=n())[0]+e[1]})(),a=1e9*t.uptime(),i=o-a):Date.now?(e.exports=function(){return Date.now()-r},r=Date.now()):(e.exports=function(){return(new Date).getTime()-r},r=(new Date).getTime())}).call(this)}).call(this,s(/*! ./../../process/browser.js */"./node_modules/process/browser.js"))},"./node_modules/raf/index.js":
/*!***********************************!*\
  !*** ./node_modules/raf/index.js ***!
  \***********************************/
/*! no static exports found */function(e,t,s){(function(t){for(var n=s(/*! performance-now */"./node_modules/performance-now/lib/performance-now.js"),r="undefined"==typeof window?t:window,o=["moz","webkit"],i="AnimationFrame",a=r["request"+i],d=r["cancel"+i]||r["cancelRequest"+i],l=0;!a&&l<o.length;l++)a=r[o[l]+"Request"+i],d=r[o[l]+"Cancel"+i]||r[o[l]+"CancelRequest"+i];if(!a||!d){var u=0,c=0,f=[];a=function(e){if(0===f.length){var t=n(),s=Math.max(0,1e3/60-(t-u));u=s+t,setTimeout((function(){var e=f.slice(0);f.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(u)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(s))}return f.push({handle:++c,callback:e,cancelled:!1}),c},d=function(e){for(var t=0;t<f.length;t++)f[t].handle===e&&(f[t].cancelled=!0)}}e.exports=function(e){return a.call(r,e)},e.exports.cancel=function(){d.apply(r,arguments)},e.exports.polyfill=function(e){e||(e=r),e.requestAnimationFrame=a,e.cancelAnimationFrame=d}}).call(this,s(/*! ./../webpack/buildin/global.js */"./node_modules/webpack/buildin/global.js"))},"./node_modules/rgbcolor/index.js":
/*!****************************************!*\
  !*** ./node_modules/rgbcolor/index.js ***!
  \****************************************/
/*! no static exports found */function(e,t){e.exports=function(e){this.ok=!1,this.alpha=1,"#"==e.charAt(0)&&(e=e.substr(1,6)),e=(e=e.replace(/ /g,"")).toLowerCase();var t={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"};e=t[e]||e;for(var s=[{re:/^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,example:["rgba(123, 234, 45, 0.8)","rgba(255,234,245,1.0)"],process:function(e){return[parseInt(e[1]),parseInt(e[2]),parseInt(e[3]),parseFloat(e[4])]}},{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(e){return[parseInt(e[1]),parseInt(e[2]),parseInt(e[3])]}},{re:/^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,example:["#00ff00","336699"],process:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}},{re:/^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,example:["#fb0","f0f"],process:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}}],n=0;n<s.length;n++){var r=s[n].re,o=s[n].process,i=r.exec(e);if(i){var a=o(i);this.r=a[0],this.g=a[1],this.b=a[2],a.length>3&&(this.alpha=a[3]),this.ok=!0}}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.alpha=this.alpha<0?0:this.alpha>1||isNaN(this.alpha)?1:this.alpha,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toRGBA=function(){return"rgba("+this.r+", "+this.g+", "+this.b+", "+this.alpha+")"},this.toHex=function(){var e=this.r.toString(16),t=this.g.toString(16),s=this.b.toString(16);return 1==e.length&&(e="0"+e),1==t.length&&(t="0"+t),1==s.length&&(s="0"+s),"#"+e+t+s},this.getHelpXML=function(){for(var e=new Array,n=0;n<s.length;n++)for(var r=s[n].example,o=0;o<r.length;o++)e[e.length]=r[o];for(var i in t)e[e.length]=i;var a=document.createElement("ul");a.setAttribute("id","rgbcolor-examples");for(n=0;n<e.length;n++)try{var d=document.createElement("li"),l=new RGBColor(e[n]),u=document.createElement("div");u.style.cssText="margin: 3px; border: 1px solid black; background:"+l.toHex()+"; color:"+l.toHex(),u.appendChild(document.createTextNode("test"));var c=document.createTextNode(" "+e[n]+" -> "+l.toRGB()+" -> "+l.toHex());d.appendChild(u),d.appendChild(c),a.appendChild(d)}catch(e){}return a}}},"./node_modules/stackblur-canvas/dist/stackblur-es.js":
/*!************************************************************!*\
  !*** ./node_modules/stackblur-canvas/dist/stackblur-es.js ***!
  \************************************************************/
/*! exports provided: BlurStack, canvasRGB, canvasRGBA, image, imageDataRGB, imageDataRGBA */function(e,t,s){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}s.r(t),s.d(t,"BlurStack",(function(){return f})),s.d(t,"canvasRGB",(function(){return u})),s.d(t,"canvasRGBA",(function(){return d})),s.d(t,"image",(function(){return i})),s.d(t,"imageDataRGB",(function(){return c})),s.d(t,"imageDataRGBA",(function(){return l}));var r=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],o=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];function i(e,t,s,n,r,o){if("string"==typeof e&&(e=document.getElementById(e)),e&&"naturalWidth"in e){var i=r?"offset":"natural",a=e[i+"Width"],l=e[i+"Height"];if("string"==typeof t&&(t=document.getElementById(t)),t&&"getContext"in t){o||(t.style.width=a+"px",t.style.height=l+"px"),t.width=a,t.height=l;var c=t.getContext("2d");c.clearRect(0,0,a,l),c.drawImage(e,0,0,e.naturalWidth,e.naturalHeight,0,0,a,l),isNaN(s)||s<1||(n?d(t,0,0,a,l,s):u(t,0,0,a,l,s))}}}function a(e,t,s,r,o){if("string"==typeof e&&(e=document.getElementById(e)),!e||"object"!==n(e)||!("getContext"in e))throw new TypeError("Expecting canvas with `getContext` method in processCanvasRGB(A) calls!");var i=e.getContext("2d");try{return i.getImageData(t,s,r,o)}catch(e){throw new Error("unable to access image data: "+e)}}function d(e,t,s,n,r,o){if(!(isNaN(o)||o<1)){o|=0;var i=a(e,t,s,n,r);i=l(i,t,s,n,r,o),e.getContext("2d").putImageData(i,t,s)}}function l(e,t,s,n,i,a){for(var d,l=e.data,u=2*a+1,c=n-1,h=i-1,m=a+1,p=m*(m+1)/2,j=new f,g=j,_=1;_<u;_++)g=g.next=new f,_===m&&(d=g);g.next=j;for(var y=null,v=null,x=0,b=0,w=r[a],S=o[a],T=0;T<i;T++){g=j;for(var A=l[b],O=l[b+1],P=l[b+2],C=l[b+3],E=0;E<m;E++)g.r=A,g.g=O,g.b=P,g.a=C,g=g.next;for(var M=0,N=0,k=0,R=0,V=m*A,I=m*O,L=m*P,D=m*C,B=p*A,F=p*O,z=p*P,U=p*C,H=1;H<m;H++){var X=b+((c<H?c:H)<<2),Y=l[X],G=l[X+1],q=l[X+2],W=l[X+3],Q=m-H;B+=(g.r=Y)*Q,F+=(g.g=G)*Q,z+=(g.b=q)*Q,U+=(g.a=W)*Q,M+=Y,N+=G,k+=q,R+=W,g=g.next}y=j,v=d;for(var $=0;$<n;$++){var Z=U*w>>S;if(l[b+3]=Z,0!==Z){var K=255/Z;l[b]=(B*w>>S)*K,l[b+1]=(F*w>>S)*K,l[b+2]=(z*w>>S)*K}else l[b]=l[b+1]=l[b+2]=0;B-=V,F-=I,z-=L,U-=D,V-=y.r,I-=y.g,L-=y.b,D-=y.a;var J=$+a+1;J=x+(J<c?J:c)<<2,B+=M+=y.r=l[J],F+=N+=y.g=l[J+1],z+=k+=y.b=l[J+2],U+=R+=y.a=l[J+3],y=y.next;var ee=v,te=ee.r,se=ee.g,ne=ee.b,re=ee.a;V+=te,I+=se,L+=ne,D+=re,M-=te,N-=se,k-=ne,R-=re,v=v.next,b+=4}x+=n}for(var oe=0;oe<n;oe++){var ie=l[b=oe<<2],ae=l[b+1],de=l[b+2],le=l[b+3],ue=m*ie,ce=m*ae,fe=m*de,he=m*le,me=p*ie,pe=p*ae,je=p*de,ge=p*le;g=j;for(var _e=0;_e<m;_e++)g.r=ie,g.g=ae,g.b=de,g.a=le,g=g.next;for(var ye=n,ve=0,xe=0,be=0,we=0,Se=1;Se<=a;Se++){b=ye+oe<<2;var Te=m-Se;me+=(g.r=ie=l[b])*Te,pe+=(g.g=ae=l[b+1])*Te,je+=(g.b=de=l[b+2])*Te,ge+=(g.a=le=l[b+3])*Te,we+=ie,ve+=ae,xe+=de,be+=le,g=g.next,Se<h&&(ye+=n)}b=oe,y=j,v=d;for(var Ae=0;Ae<i;Ae++){var Oe=b<<2;l[Oe+3]=le=ge*w>>S,le>0?(le=255/le,l[Oe]=(me*w>>S)*le,l[Oe+1]=(pe*w>>S)*le,l[Oe+2]=(je*w>>S)*le):l[Oe]=l[Oe+1]=l[Oe+2]=0,me-=ue,pe-=ce,je-=fe,ge-=he,ue-=y.r,ce-=y.g,fe-=y.b,he-=y.a,Oe=oe+((Oe=Ae+m)<h?Oe:h)*n<<2,me+=we+=y.r=l[Oe],pe+=ve+=y.g=l[Oe+1],je+=xe+=y.b=l[Oe+2],ge+=be+=y.a=l[Oe+3],y=y.next,ue+=ie=v.r,ce+=ae=v.g,fe+=de=v.b,he+=le=v.a,we-=ie,ve-=ae,xe-=de,be-=le,v=v.next,b+=n}}return e}function u(e,t,s,n,r,o){if(!(isNaN(o)||o<1)){o|=0;var i=a(e,t,s,n,r);i=c(i,t,s,n,r,o),e.getContext("2d").putImageData(i,t,s)}}function c(e,t,s,n,i,a){for(var d,l=e.data,u=2*a+1,c=n-1,h=i-1,m=a+1,p=m*(m+1)/2,j=new f,g=j,_=1;_<u;_++)g=g.next=new f,_===m&&(d=g);g.next=j;for(var y,v,x=null,b=null,w=r[a],S=o[a],T=0,A=0,O=0;O<i;O++){var P=l[A],C=l[A+1],E=l[A+2],M=m*P,N=m*C,k=m*E,R=p*P,V=p*C,I=p*E;g=j;for(var L=0;L<m;L++)g.r=P,g.g=C,g.b=E,g=g.next;for(var D=0,B=0,F=0,z=1;z<m;z++)y=A+((c<z?c:z)<<2),R+=(g.r=P=l[y])*(v=m-z),V+=(g.g=C=l[y+1])*v,I+=(g.b=E=l[y+2])*v,D+=P,B+=C,F+=E,g=g.next;x=j,b=d;for(var U=0;U<n;U++)l[A]=R*w>>S,l[A+1]=V*w>>S,l[A+2]=I*w>>S,R-=M,V-=N,I-=k,M-=x.r,N-=x.g,k-=x.b,y=T+((y=U+a+1)<c?y:c)<<2,R+=D+=x.r=l[y],V+=B+=x.g=l[y+1],I+=F+=x.b=l[y+2],x=x.next,M+=P=b.r,N+=C=b.g,k+=E=b.b,D-=P,B-=C,F-=E,b=b.next,A+=4;T+=n}for(var H=0;H<n;H++){var X=l[A=H<<2],Y=l[A+1],G=l[A+2],q=m*X,W=m*Y,Q=m*G,$=p*X,Z=p*Y,K=p*G;g=j;for(var J=0;J<m;J++)g.r=X,g.g=Y,g.b=G,g=g.next;for(var ee=0,te=0,se=0,ne=1,re=n;ne<=a;ne++)A=re+H<<2,$+=(g.r=X=l[A])*(v=m-ne),Z+=(g.g=Y=l[A+1])*v,K+=(g.b=G=l[A+2])*v,ee+=X,te+=Y,se+=G,g=g.next,ne<h&&(re+=n);A=H,x=j,b=d;for(var oe=0;oe<i;oe++)l[y=A<<2]=$*w>>S,l[y+1]=Z*w>>S,l[y+2]=K*w>>S,$-=q,Z-=W,K-=Q,q-=x.r,W-=x.g,Q-=x.b,y=H+((y=oe+m)<h?y:h)*n<<2,$+=ee+=x.r=l[y],Z+=te+=x.g=l[y+1],K+=se+=x.b=l[y+2],x=x.next,q+=X=b.r,W+=Y=b.g,Q+=G=b.b,ee-=X,te-=Y,se-=G,b=b.next,A+=n}return e}var f=function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}},"./node_modules/svg-pathdata/lib/SVGPathData.module.js":
/*!*************************************************************!*\
  !*** ./node_modules/svg-pathdata/lib/SVGPathData.module.js ***!
  \*************************************************************/
/*! exports provided: COMMAND_ARG_COUNTS, SVGPathData, SVGPathDataParser, SVGPathDataTransformer, encodeSVGPath */function(e,t,s){"use strict";s.r(t),s.d(t,"COMMAND_ARG_COUNTS",(function(){return w})),s.d(t,"SVGPathData",(function(){return b})),s.d(t,"SVGPathDataParser",(function(){return x})),s.d(t,"SVGPathDataTransformer",(function(){return c})),s.d(t,"encodeSVGPath",(function(){return o}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var s in t)Object.prototype.hasOwnProperty.call(t,s)&&(e[s]=t[s])})(e,t)};function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function s(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(s.prototype=t.prototype,new s)}function o(e){var t="";Array.isArray(e)||(e=[e]);for(var s=0;s<e.length;s++){var n=e[s];if(n.type===b.CLOSE_PATH)t+="z";else if(n.type===b.HORIZ_LINE_TO)t+=(n.relative?"h":"H")+n.x;else if(n.type===b.VERT_LINE_TO)t+=(n.relative?"v":"V")+n.y;else if(n.type===b.MOVE_TO)t+=(n.relative?"m":"M")+n.x+" "+n.y;else if(n.type===b.LINE_TO)t+=(n.relative?"l":"L")+n.x+" "+n.y;else if(n.type===b.CURVE_TO)t+=(n.relative?"c":"C")+n.x1+" "+n.y1+" "+n.x2+" "+n.y2+" "+n.x+" "+n.y;else if(n.type===b.SMOOTH_CURVE_TO)t+=(n.relative?"s":"S")+n.x2+" "+n.y2+" "+n.x+" "+n.y;else if(n.type===b.QUAD_TO)t+=(n.relative?"q":"Q")+n.x1+" "+n.y1+" "+n.x+" "+n.y;else if(n.type===b.SMOOTH_QUAD_TO)t+=(n.relative?"t":"T")+n.x+" "+n.y;else{if(n.type!==b.ARC)throw new Error('Unexpected command type "'+n.type+'" at index '+s+".");t+=(n.relative?"a":"A")+n.rX+" "+n.rY+" "+n.xRot+" "+ +n.lArcFlag+" "+ +n.sweepFlag+" "+n.x+" "+n.y}}return t}function i(e,t){var s=e[0],n=e[1];return[s*Math.cos(t)-n*Math.sin(t),s*Math.sin(t)+n*Math.cos(t)]}function a(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var s=0;s<e.length;s++)if("number"!=typeof e[s])throw new Error("assertNumbers arguments["+s+"] is not a number. "+typeof e[s]+" == typeof "+e[s]);return!0}var d=Math.PI;function l(e,t,s){e.lArcFlag=0===e.lArcFlag?0:1,e.sweepFlag=0===e.sweepFlag?0:1;var n=e.rX,r=e.rY,o=e.x,a=e.y;n=Math.abs(e.rX),r=Math.abs(e.rY);var l=i([(t-o)/2,(s-a)/2],-e.xRot/180*d),u=l[0],c=l[1],f=Math.pow(u,2)/Math.pow(n,2)+Math.pow(c,2)/Math.pow(r,2);1<f&&(n*=Math.sqrt(f),r*=Math.sqrt(f)),e.rX=n,e.rY=r;var h=Math.pow(n,2)*Math.pow(c,2)+Math.pow(r,2)*Math.pow(u,2),m=(e.lArcFlag!==e.sweepFlag?1:-1)*Math.sqrt(Math.max(0,(Math.pow(n,2)*Math.pow(r,2)-h)/h)),p=n*c/r*m,j=-r*u/n*m,g=i([p,j],e.xRot/180*d);e.cX=g[0]+(t+o)/2,e.cY=g[1]+(s+a)/2,e.phi1=Math.atan2((c-j)/r,(u-p)/n),e.phi2=Math.atan2((-c-j)/r,(-u-p)/n),0===e.sweepFlag&&e.phi2>e.phi1&&(e.phi2-=2*d),1===e.sweepFlag&&e.phi2<e.phi1&&(e.phi2+=2*d),e.phi1*=180/d,e.phi2*=180/d}function u(e,t,s){a(e,t,s);var n=e*e+t*t-s*s;if(0>n)return[];if(0===n)return[[e*s/(e*e+t*t),t*s/(e*e+t*t)]];var r=Math.sqrt(n);return[[(e*s+t*r)/(e*e+t*t),(t*s-e*r)/(e*e+t*t)],[(e*s-t*r)/(e*e+t*t),(t*s+e*r)/(e*e+t*t)]]}var c,f=Math.PI/180;function h(e,t,s){return(1-s)*e+s*t}function m(e,t,s,n){return e+Math.cos(n/180*d)*t+Math.sin(n/180*d)*s}function p(e,t,s,n){var r=1e-6,o=t-e,i=s-t,a=3*o+3*(n-s)-6*i,d=6*(i-o),l=3*o;return Math.abs(a)<r?[-l/d]:function(e,t,s){void 0===s&&(s=1e-6);var n=e*e/4-t;if(n<-s)return[];if(n<=s)return[-e/2];var r=Math.sqrt(n);return[-e/2-r,-e/2+r]}(d/a,l/a,r)}function j(e,t,s,n,r){var o=1-r;return e*(o*o*o)+t*(3*o*o*r)+s*(3*o*r*r)+n*(r*r*r)}!function(e){function t(){return r((function(e,t,s){return e.relative&&(void 0!==e.x1&&(e.x1+=t),void 0!==e.y1&&(e.y1+=s),void 0!==e.x2&&(e.x2+=t),void 0!==e.y2&&(e.y2+=s),void 0!==e.x&&(e.x+=t),void 0!==e.y&&(e.y+=s),e.relative=!1),e}))}function s(){var e=NaN,t=NaN,s=NaN,n=NaN;return r((function(r,o,i){return r.type&b.SMOOTH_CURVE_TO&&(r.type=b.CURVE_TO,e=isNaN(e)?o:e,t=isNaN(t)?i:t,r.x1=r.relative?o-e:2*o-e,r.y1=r.relative?i-t:2*i-t),r.type&b.CURVE_TO?(e=r.relative?o+r.x2:r.x2,t=r.relative?i+r.y2:r.y2):(e=NaN,t=NaN),r.type&b.SMOOTH_QUAD_TO&&(r.type=b.QUAD_TO,s=isNaN(s)?o:s,n=isNaN(n)?i:n,r.x1=r.relative?o-s:2*o-s,r.y1=r.relative?i-n:2*i-n),r.type&b.QUAD_TO?(s=r.relative?o+r.x1:r.x1,n=r.relative?i+r.y1:r.y1):(s=NaN,n=NaN),r}))}function n(){var e=NaN,t=NaN;return r((function(s,n,r){if(s.type&b.SMOOTH_QUAD_TO&&(s.type=b.QUAD_TO,e=isNaN(e)?n:e,t=isNaN(t)?r:t,s.x1=s.relative?n-e:2*n-e,s.y1=s.relative?r-t:2*r-t),s.type&b.QUAD_TO){e=s.relative?n+s.x1:s.x1,t=s.relative?r+s.y1:s.y1;var o=s.x1,i=s.y1;s.type=b.CURVE_TO,s.x1=((s.relative?0:n)+2*o)/3,s.y1=((s.relative?0:r)+2*i)/3,s.x2=(s.x+2*o)/3,s.y2=(s.y+2*i)/3}else e=NaN,t=NaN;return s}))}function r(e){var t=0,s=0,n=NaN,r=NaN;return function(o){if(isNaN(n)&&!(o.type&b.MOVE_TO))throw new Error("path must start with moveto");var i=e(o,t,s,n,r);return o.type&b.CLOSE_PATH&&(t=n,s=r),void 0!==o.x&&(t=o.relative?t+o.x:o.x),void 0!==o.y&&(s=o.relative?s+o.y:o.y),o.type&b.MOVE_TO&&(n=t,r=s),i}}function o(e,t,s,n,o,i){return a(e,t,s,n,o,i),r((function(r,a,d,l){var u=r.x1,c=r.x2,f=r.relative&&!isNaN(l),h=void 0!==r.x?r.x:f?0:a,m=void 0!==r.y?r.y:f?0:d;function p(e){return e*e}r.type&b.HORIZ_LINE_TO&&0!==t&&(r.type=b.LINE_TO,r.y=r.relative?0:d),r.type&b.VERT_LINE_TO&&0!==s&&(r.type=b.LINE_TO,r.x=r.relative?0:a),void 0!==r.x&&(r.x=r.x*e+m*s+(f?0:o)),void 0!==r.y&&(r.y=h*t+r.y*n+(f?0:i)),void 0!==r.x1&&(r.x1=r.x1*e+r.y1*s+(f?0:o)),void 0!==r.y1&&(r.y1=u*t+r.y1*n+(f?0:i)),void 0!==r.x2&&(r.x2=r.x2*e+r.y2*s+(f?0:o)),void 0!==r.y2&&(r.y2=c*t+r.y2*n+(f?0:i));var j=e*n-t*s;if(void 0!==r.xRot&&(1!==e||0!==t||0!==s||1!==n))if(0===j)delete r.rX,delete r.rY,delete r.xRot,delete r.lArcFlag,delete r.sweepFlag,r.type=b.LINE_TO;else{var g=r.xRot*Math.PI/180,_=Math.sin(g),y=Math.cos(g),v=1/p(r.rX),x=1/p(r.rY),w=p(y)*v+p(_)*x,S=2*_*y*(v-x),T=p(_)*v+p(y)*x,A=w*n*n-S*t*n+T*t*t,O=S*(e*n+t*s)-2*(w*s*n+T*e*t),P=w*s*s-S*e*s+T*e*e,C=(Math.atan2(O,A-P)+Math.PI)%Math.PI/2,E=Math.sin(C),M=Math.cos(C);r.rX=Math.abs(j)/Math.sqrt(A*p(M)+O*E*M+P*p(E)),r.rY=Math.abs(j)/Math.sqrt(A*p(E)-O*E*M+P*p(M)),r.xRot=180*C/Math.PI}return void 0!==r.sweepFlag&&0>j&&(r.sweepFlag=+!r.sweepFlag),r}))}e.ROUND=function(e){function t(t){return Math.round(t*e)/e}return void 0===e&&(e=1e13),a(e),function(e){return void 0!==e.x1&&(e.x1=t(e.x1)),void 0!==e.y1&&(e.y1=t(e.y1)),void 0!==e.x2&&(e.x2=t(e.x2)),void 0!==e.y2&&(e.y2=t(e.y2)),void 0!==e.x&&(e.x=t(e.x)),void 0!==e.y&&(e.y=t(e.y)),void 0!==e.rX&&(e.rX=t(e.rX)),void 0!==e.rY&&(e.rY=t(e.rY)),e}},e.TO_ABS=t,e.TO_REL=function(){return r((function(e,t,s){return e.relative||(void 0!==e.x1&&(e.x1-=t),void 0!==e.y1&&(e.y1-=s),void 0!==e.x2&&(e.x2-=t),void 0!==e.y2&&(e.y2-=s),void 0!==e.x&&(e.x-=t),void 0!==e.y&&(e.y-=s),e.relative=!0),e}))},e.NORMALIZE_HVZ=function(e,t,s){return void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===s&&(s=!0),r((function(n,r,o,i,a){if(isNaN(i)&&!(n.type&b.MOVE_TO))throw new Error("path must start with moveto");return t&&n.type&b.HORIZ_LINE_TO&&(n.type=b.LINE_TO,n.y=n.relative?0:o),s&&n.type&b.VERT_LINE_TO&&(n.type=b.LINE_TO,n.x=n.relative?0:r),e&&n.type&b.CLOSE_PATH&&(n.type=b.LINE_TO,n.x=n.relative?i-r:i,n.y=n.relative?a-o:a),n.type&b.ARC&&(0===n.rX||0===n.rY)&&(n.type=b.LINE_TO,delete n.rX,delete n.rY,delete n.xRot,delete n.lArcFlag,delete n.sweepFlag),n}))},e.NORMALIZE_ST=s,e.QT_TO_C=n,e.INFO=r,e.SANITIZE=function(e){void 0===e&&(e=0),a(e);var t=NaN,s=NaN,n=NaN,o=NaN;return r((function(r,i,a,d,l){var u=Math.abs,c=!1,f=0,h=0;if(r.type&b.SMOOTH_CURVE_TO&&(f=isNaN(t)?0:i-t,h=isNaN(s)?0:a-s),r.type&(b.CURVE_TO|b.SMOOTH_CURVE_TO)?(t=r.relative?i+r.x2:r.x2,s=r.relative?a+r.y2:r.y2):(t=NaN,s=NaN),r.type&b.SMOOTH_QUAD_TO?(n=isNaN(n)?i:2*i-n,o=isNaN(o)?a:2*a-o):r.type&b.QUAD_TO?(n=r.relative?i+r.x1:r.x1,o=r.relative?a+r.y1:r.y2):(n=NaN,o=NaN),r.type&b.LINE_COMMANDS||r.type&b.ARC&&(0===r.rX||0===r.rY||!r.lArcFlag)||r.type&b.CURVE_TO||r.type&b.SMOOTH_CURVE_TO||r.type&b.QUAD_TO||r.type&b.SMOOTH_QUAD_TO){var m=void 0===r.x?0:r.relative?r.x:r.x-i,p=void 0===r.y?0:r.relative?r.y:r.y-a;f=isNaN(n)?void 0===r.x1?f:r.relative?r.x:r.x1-i:n-i,h=isNaN(o)?void 0===r.y1?h:r.relative?r.y:r.y1-a:o-a;var j=void 0===r.x2?0:r.relative?r.x:r.x2-i,g=void 0===r.y2?0:r.relative?r.y:r.y2-a;u(m)<=e&&u(p)<=e&&u(f)<=e&&u(h)<=e&&u(j)<=e&&u(g)<=e&&(c=!0)}return r.type&b.CLOSE_PATH&&u(i-d)<=e&&u(a-l)<=e&&(c=!0),c?[]:r}))},e.MATRIX=o,e.ROTATE=function(e,t,s){void 0===t&&(t=0),void 0===s&&(s=0),a(e,t,s);var n=Math.sin(e),r=Math.cos(e);return o(r,n,-n,r,t-t*r+s*n,s-t*n-s*r)},e.TRANSLATE=function(e,t){return void 0===t&&(t=0),a(e,t),o(1,0,0,1,e,t)},e.SCALE=function(e,t){return void 0===t&&(t=e),a(e,t),o(e,0,0,t,0,0)},e.SKEW_X=function(e){return a(e),o(1,0,Math.atan(e),1,0,0)},e.SKEW_Y=function(e){return a(e),o(1,Math.atan(e),0,1,0,0)},e.X_AXIS_SYMMETRY=function(e){return void 0===e&&(e=0),a(e),o(-1,0,0,1,e,0)},e.Y_AXIS_SYMMETRY=function(e){return void 0===e&&(e=0),a(e),o(1,0,0,-1,0,e)},e.A_TO_C=function(){return r((function(e,t,s){return b.ARC===e.type?function(e,t,s){var n,r,o,a;e.cX||l(e,t,s);for(var d=Math.min(e.phi1,e.phi2),u=Math.max(e.phi1,e.phi2)-d,c=Math.ceil(u/90),m=new Array(c),p=t,j=s,g=0;g<c;g++){var _=h(e.phi1,e.phi2,g/c),y=h(e.phi1,e.phi2,(g+1)/c),v=y-_,x=4/3*Math.tan(v*f/4),w=[Math.cos(_*f)-x*Math.sin(_*f),Math.sin(_*f)+x*Math.cos(_*f)],S=w[0],T=w[1],A=[Math.cos(y*f),Math.sin(y*f)],O=A[0],P=A[1],C=[O+x*Math.sin(y*f),P-x*Math.cos(y*f)],E=C[0],M=C[1];m[g]={relative:e.relative,type:b.CURVE_TO};var N=function(t,s){var n=i([t*e.rX,s*e.rY],e.xRot),r=n[0],o=n[1];return[e.cX+r,e.cY+o]};n=N(S,T),m[g].x1=n[0],m[g].y1=n[1],r=N(E,M),m[g].x2=r[0],m[g].y2=r[1],o=N(O,P),m[g].x=o[0],m[g].y=o[1],e.relative&&(m[g].x1-=p,m[g].y1-=j,m[g].x2-=p,m[g].y2-=j,m[g].x-=p,m[g].y-=j),p=(a=[m[g].x,m[g].y])[0],j=a[1]}return m}(e,e.relative?0:t,e.relative?0:s):e}))},e.ANNOTATE_ARCS=function(){return r((function(e,t,s){return e.relative&&(t=0,s=0),b.ARC===e.type&&l(e,t,s),e}))},e.CLONE=function(){return function(e){var t={};for(var s in e)t[s]=e[s];return t}},e.CALCULATE_BOUNDS=function(){var e=t(),o=n(),i=s(),a=r((function(t,s,n){var r=i(o(e(function(e){var t={};for(var s in e)t[s]=e[s];return t}(t))));function d(e){e>a.maxX&&(a.maxX=e),e<a.minX&&(a.minX=e)}function c(e){e>a.maxY&&(a.maxY=e),e<a.minY&&(a.minY=e)}if(r.type&b.DRAWING_COMMANDS&&(d(s),c(n)),r.type&b.HORIZ_LINE_TO&&d(r.x),r.type&b.VERT_LINE_TO&&c(r.y),r.type&b.LINE_TO&&(d(r.x),c(r.y)),r.type&b.CURVE_TO){d(r.x),c(r.y);for(var f=0,h=p(s,r.x1,r.x2,r.x);f<h.length;f++)0<(k=h[f])&&1>k&&d(j(s,r.x1,r.x2,r.x,k));for(var g=0,_=p(n,r.y1,r.y2,r.y);g<_.length;g++)0<(k=_[g])&&1>k&&c(j(n,r.y1,r.y2,r.y,k))}if(r.type&b.ARC){d(r.x),c(r.y),l(r,s,n);for(var y=r.xRot/180*Math.PI,v=Math.cos(y)*r.rX,x=Math.sin(y)*r.rX,w=-Math.sin(y)*r.rY,S=Math.cos(y)*r.rY,T=r.phi1<r.phi2?[r.phi1,r.phi2]:-180>r.phi2?[r.phi2+360,r.phi1+360]:[r.phi2,r.phi1],A=T[0],O=T[1],P=function(e){var t=e[0],s=e[1],n=180*Math.atan2(s,t)/Math.PI;return n<A?n+360:n},C=0,E=u(w,-v,0).map(P);C<E.length;C++)(k=E[C])>A&&k<O&&d(m(r.cX,v,w,k));for(var M=0,N=u(S,-x,0).map(P);M<N.length;M++){var k;(k=N[M])>A&&k<O&&c(m(r.cY,x,S,k))}}return t}));return a.minX=1/0,a.maxX=-1/0,a.minY=1/0,a.maxY=-1/0,a}}(c||(c={}));var g,_=function(){function e(){}return e.prototype.round=function(e){return this.transform(c.ROUND(e))},e.prototype.toAbs=function(){return this.transform(c.TO_ABS())},e.prototype.toRel=function(){return this.transform(c.TO_REL())},e.prototype.normalizeHVZ=function(e,t,s){return this.transform(c.NORMALIZE_HVZ(e,t,s))},e.prototype.normalizeST=function(){return this.transform(c.NORMALIZE_ST())},e.prototype.qtToC=function(){return this.transform(c.QT_TO_C())},e.prototype.aToC=function(){return this.transform(c.A_TO_C())},e.prototype.sanitize=function(e){return this.transform(c.SANITIZE(e))},e.prototype.translate=function(e,t){return this.transform(c.TRANSLATE(e,t))},e.prototype.scale=function(e,t){return this.transform(c.SCALE(e,t))},e.prototype.rotate=function(e,t,s){return this.transform(c.ROTATE(e,t,s))},e.prototype.matrix=function(e,t,s,n,r,o){return this.transform(c.MATRIX(e,t,s,n,r,o))},e.prototype.skewX=function(e){return this.transform(c.SKEW_X(e))},e.prototype.skewY=function(e){return this.transform(c.SKEW_Y(e))},e.prototype.xSymmetry=function(e){return this.transform(c.X_AXIS_SYMMETRY(e))},e.prototype.ySymmetry=function(e){return this.transform(c.Y_AXIS_SYMMETRY(e))},e.prototype.annotateArcs=function(){return this.transform(c.ANNOTATE_ARCS())},e}(),y=function(e){return" "===e||"\t"===e||"\r"===e||"\n"===e},v=function(e){return"0".charCodeAt(0)<=e.charCodeAt(0)&&e.charCodeAt(0)<="9".charCodeAt(0)},x=function(e){function t(){var t=e.call(this)||this;return t.curNumber="",t.curCommandType=-1,t.curCommandRelative=!1,t.canParseCommandOrComma=!0,t.curNumberHasExp=!1,t.curNumberHasExpDigits=!1,t.curNumberHasDecimal=!1,t.curArgs=[],t}return r(t,e),t.prototype.finish=function(e){if(void 0===e&&(e=[]),this.parse(" ",e),0!==this.curArgs.length||!this.canParseCommandOrComma)throw new SyntaxError("Unterminated command at the path end.");return e},t.prototype.parse=function(e,t){var s=this;void 0===t&&(t=[]);for(var n=function(e){t.push(e),s.curArgs.length=0,s.canParseCommandOrComma=!0},r=0;r<e.length;r++){var o=e[r],i=!(this.curCommandType!==b.ARC||3!==this.curArgs.length&&4!==this.curArgs.length||1!==this.curNumber.length||"0"!==this.curNumber&&"1"!==this.curNumber),a=v(o)&&("0"===this.curNumber&&"0"===o||i);if(!v(o)||a)if("e"!==o&&"E"!==o)if("-"!==o&&"+"!==o||!this.curNumberHasExp||this.curNumberHasExpDigits)if("."!==o||this.curNumberHasExp||this.curNumberHasDecimal||i){if(this.curNumber&&-1!==this.curCommandType){var d=Number(this.curNumber);if(isNaN(d))throw new SyntaxError("Invalid number ending at "+r);if(this.curCommandType===b.ARC)if(0===this.curArgs.length||1===this.curArgs.length){if(0>d)throw new SyntaxError('Expected positive number, got "'+d+'" at index "'+r+'"')}else if((3===this.curArgs.length||4===this.curArgs.length)&&"0"!==this.curNumber&&"1"!==this.curNumber)throw new SyntaxError('Expected a flag, got "'+this.curNumber+'" at index "'+r+'"');this.curArgs.push(d),this.curArgs.length===w[this.curCommandType]&&(b.HORIZ_LINE_TO===this.curCommandType?n({type:b.HORIZ_LINE_TO,relative:this.curCommandRelative,x:d}):b.VERT_LINE_TO===this.curCommandType?n({type:b.VERT_LINE_TO,relative:this.curCommandRelative,y:d}):this.curCommandType===b.MOVE_TO||this.curCommandType===b.LINE_TO||this.curCommandType===b.SMOOTH_QUAD_TO?(n({type:this.curCommandType,relative:this.curCommandRelative,x:this.curArgs[0],y:this.curArgs[1]}),b.MOVE_TO===this.curCommandType&&(this.curCommandType=b.LINE_TO)):this.curCommandType===b.CURVE_TO?n({type:b.CURVE_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x2:this.curArgs[2],y2:this.curArgs[3],x:this.curArgs[4],y:this.curArgs[5]}):this.curCommandType===b.SMOOTH_CURVE_TO?n({type:b.SMOOTH_CURVE_TO,relative:this.curCommandRelative,x2:this.curArgs[0],y2:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===b.QUAD_TO?n({type:b.QUAD_TO,relative:this.curCommandRelative,x1:this.curArgs[0],y1:this.curArgs[1],x:this.curArgs[2],y:this.curArgs[3]}):this.curCommandType===b.ARC&&n({type:b.ARC,relative:this.curCommandRelative,rX:this.curArgs[0],rY:this.curArgs[1],xRot:this.curArgs[2],lArcFlag:this.curArgs[3],sweepFlag:this.curArgs[4],x:this.curArgs[5],y:this.curArgs[6]})),this.curNumber="",this.curNumberHasExpDigits=!1,this.curNumberHasExp=!1,this.curNumberHasDecimal=!1,this.canParseCommandOrComma=!0}if(!y(o))if(","===o&&this.canParseCommandOrComma)this.canParseCommandOrComma=!1;else if("+"!==o&&"-"!==o&&"."!==o)if(a)this.curNumber=o,this.curNumberHasDecimal=!1;else{if(0!==this.curArgs.length)throw new SyntaxError("Unterminated command at index "+r+".");if(!this.canParseCommandOrComma)throw new SyntaxError('Unexpected character "'+o+'" at index '+r+". Command cannot follow comma");if(this.canParseCommandOrComma=!1,"z"!==o&&"Z"!==o)if("h"===o||"H"===o)this.curCommandType=b.HORIZ_LINE_TO,this.curCommandRelative="h"===o;else if("v"===o||"V"===o)this.curCommandType=b.VERT_LINE_TO,this.curCommandRelative="v"===o;else if("m"===o||"M"===o)this.curCommandType=b.MOVE_TO,this.curCommandRelative="m"===o;else if("l"===o||"L"===o)this.curCommandType=b.LINE_TO,this.curCommandRelative="l"===o;else if("c"===o||"C"===o)this.curCommandType=b.CURVE_TO,this.curCommandRelative="c"===o;else if("s"===o||"S"===o)this.curCommandType=b.SMOOTH_CURVE_TO,this.curCommandRelative="s"===o;else if("q"===o||"Q"===o)this.curCommandType=b.QUAD_TO,this.curCommandRelative="q"===o;else if("t"===o||"T"===o)this.curCommandType=b.SMOOTH_QUAD_TO,this.curCommandRelative="t"===o;else{if("a"!==o&&"A"!==o)throw new SyntaxError('Unexpected character "'+o+'" at index '+r+".");this.curCommandType=b.ARC,this.curCommandRelative="a"===o}else t.push({type:b.CLOSE_PATH}),this.canParseCommandOrComma=!0,this.curCommandType=-1}else this.curNumber=o,this.curNumberHasDecimal="."===o}else this.curNumber+=o,this.curNumberHasDecimal=!0;else this.curNumber+=o;else this.curNumber+=o,this.curNumberHasExp=!0;else this.curNumber+=o,this.curNumberHasExpDigits=this.curNumberHasExp}return t},t.prototype.transform=function(e){return Object.create(this,{parse:{value:function(t,s){void 0===s&&(s=[]);for(var n=0,r=Object.getPrototypeOf(this).parse.call(this,t);n<r.length;n++){var o=r[n],i=e(o);Array.isArray(i)?s.push.apply(s,i):s.push(i)}return s}}})},t}(_),b=function(e){function t(s){var n=e.call(this)||this;return n.commands="string"==typeof s?t.parse(s):s,n}return r(t,e),t.prototype.encode=function(){return t.encode(this.commands)},t.prototype.getBounds=function(){var e=c.CALCULATE_BOUNDS();return this.transform(e),e},t.prototype.transform=function(e){for(var t=[],s=0,n=this.commands;s<n.length;s++){var r=e(n[s]);Array.isArray(r)?t.push.apply(t,r):t.push(r)}return this.commands=t,this},t.encode=function(e){return o(e)},t.parse=function(e){var t=new x,s=[];return t.parse(e,s),t.finish(s),s},t.CLOSE_PATH=1,t.MOVE_TO=2,t.HORIZ_LINE_TO=4,t.VERT_LINE_TO=8,t.LINE_TO=16,t.CURVE_TO=32,t.SMOOTH_CURVE_TO=64,t.QUAD_TO=128,t.SMOOTH_QUAD_TO=256,t.ARC=512,t.LINE_COMMANDS=t.LINE_TO|t.HORIZ_LINE_TO|t.VERT_LINE_TO,t.DRAWING_COMMANDS=t.HORIZ_LINE_TO|t.VERT_LINE_TO|t.LINE_TO|t.CURVE_TO|t.SMOOTH_CURVE_TO|t.QUAD_TO|t.SMOOTH_QUAD_TO|t.ARC,t}(_),w=((g={})[b.MOVE_TO]=2,g[b.LINE_TO]=2,g[b.HORIZ_LINE_TO]=1,g[b.VERT_LINE_TO]=1,g[b.CLOSE_PATH]=0,g[b.QUAD_TO]=4,g[b.SMOOTH_QUAD_TO]=2,g[b.CURVE_TO]=6,g[b.SMOOTH_CURVE_TO]=4,g[b.ARC]=7,g)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,